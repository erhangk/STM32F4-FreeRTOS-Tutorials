
002_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d644  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800d7d4  0800d7d4  0000e7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8cc  0800d8cc  0000f080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8cc  0800d8cc  0000e8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8d4  0800d8d4  0000f080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8d4  0800d8d4  0000e8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d8d8  0800d8d8  0000e8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800d8dc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f080  2**0
                  CONTENTS
 10 .bss          000054d4  20000080  20000080  0000f080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005554  20005554  0000f080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028dfd  00000000  00000000  0000f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059dc  00000000  00000000  00037ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020e8  00000000  00000000  0003d890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001993  00000000  00000000  0003f978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000076ed  00000000  00000000  0004130b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028847  00000000  00000000  000489f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e10b3  00000000  00000000  0007123f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001522f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000916c  00000000  00000000  00152338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0015b4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d7bc 	.word	0x0800d7bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800d7bc 	.word	0x0800d7bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b090      	sub	sp, #64	@ 0x40
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fdad 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f8bd 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f9e7 	bl	8000950 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000582:	f000 f927 	bl	80007d4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000586:	f000 f953 	bl	8000830 <MX_I2S3_Init>
  MX_SPI1_Init();
 800058a:	f000 f981 	bl	8000890 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f9b5 	bl	80008fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000592:	f009 f969 	bl	8009868 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000596:	4a18      	ldr	r2, [pc, #96]	@ (80005f8 <main+0x88>)
 8000598:	2100      	movs	r1, #0
 800059a:	4818      	ldr	r0, [pc, #96]	@ (80005fc <main+0x8c>)
 800059c:	f009 f9ae 	bl	80098fc <osThreadNew>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <main+0x90>)
 80005a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(Task1_Handler, "Task 1", configMINIMAL_STACK_SIZE, NULL, 4, &myTask1Handle);
 80005a6:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <main+0x94>)
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2304      	movs	r3, #4
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	4915      	ldr	r1, [pc, #84]	@ (8000608 <main+0x98>)
 80005b4:	4815      	ldr	r0, [pc, #84]	@ (800060c <main+0x9c>)
 80005b6:	f00a fa7f 	bl	800aab8 <xTaskCreate>
  xTaskCreate(Task2_Handler, "Task 2", configMINIMAL_STACK_SIZE, NULL, 4, &myTask2Handle);
 80005ba:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <main+0xa0>)
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2304      	movs	r3, #4
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	2280      	movs	r2, #128	@ 0x80
 80005c6:	4913      	ldr	r1, [pc, #76]	@ (8000614 <main+0xa4>)
 80005c8:	4813      	ldr	r0, [pc, #76]	@ (8000618 <main+0xa8>)
 80005ca:	f00a fa75 	bl	800aab8 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ce:	f009 f96f 	bl	80098b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  char message[50];
  sprintf(message, "Hello from UART2.\r\n");
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4911      	ldr	r1, [pc, #68]	@ (800061c <main+0xac>)
 80005d6:	4618      	mov	r0, r3
 80005d8:	f00c fca8 	bl	800cf2c <siprintf>
  HAL_UART_Transmit(&huart2, (const uint8_t*) message, strlen(message), 5);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fdf6 	bl	80001d0 <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	1d39      	adds	r1, r7, #4
 80005ea:	2305      	movs	r3, #5
 80005ec:	480c      	ldr	r0, [pc, #48]	@ (8000620 <main+0xb0>)
 80005ee:	f005 f8f3 	bl	80057d8 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f2:	bf00      	nop
 80005f4:	e7fd      	b.n	80005f2 <main+0x82>
 80005f6:	bf00      	nop
 80005f8:	0800d85c 	.word	0x0800d85c
 80005fc:	08000b4d 	.word	0x08000b4d
 8000600:	200001d8 	.word	0x200001d8
 8000604:	200001dc 	.word	0x200001dc
 8000608:	0800d7e0 	.word	0x0800d7e0
 800060c:	08000625 	.word	0x08000625
 8000610:	200001e0 	.word	0x200001e0
 8000614:	0800d7e8 	.word	0x0800d7e8
 8000618:	08000691 	.word	0x08000691
 800061c:	0800d7f0 	.word	0x0800d7f0
 8000620:	20000190 	.word	0x20000190

08000624 <Task1_Handler>:
  }
  /* USER CODE END 3 */
}

void Task1_Handler(void *params)
{
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	char Task1_message[] = "Greetings from Task1!\r\n";
 800062c:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <Task1_Handler+0x5c>)
 800062e:	f107 0408 	add.w	r4, r7, #8
 8000632:	461d      	mov	r5, r3
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	e895 0003 	ldmia.w	r5, {r0, r1}
 800063c:	e884 0003 	stmia.w	r4, {r0, r1}
	while(1)
	{
		if(UART_ACCESS_KEY == 0)
 8000640:	4b10      	ldr	r3, [pc, #64]	@ (8000684 <Task1_Handler+0x60>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	f083 0301 	eor.w	r3, r3, #1
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0f8      	beq.n	8000640 <Task1_Handler+0x1c>
		{
			HAL_UART_Transmit(&huart2, (const uint8_t*)Task1_message, strlen(Task1_message), 5);
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fdbc 	bl	80001d0 <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	b29a      	uxth	r2, r3
 800065c:	f107 0108 	add.w	r1, r7, #8
 8000660:	2305      	movs	r3, #5
 8000662:	4809      	ldr	r0, [pc, #36]	@ (8000688 <Task1_Handler+0x64>)
 8000664:	f005 f8b8 	bl	80057d8 <HAL_UART_Transmit>
			UART_ACCESS_KEY = 1;
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <Task1_Handler+0x60>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
			taskYIELD();
 800066e:	4b07      	ldr	r3, [pc, #28]	@ (800068c <Task1_Handler+0x68>)
 8000670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	f3bf 8f4f 	dsb	sy
 800067a:	f3bf 8f6f 	isb	sy
		if(UART_ACCESS_KEY == 0)
 800067e:	e7df      	b.n	8000640 <Task1_Handler+0x1c>
 8000680:	0800d804 	.word	0x0800d804
 8000684:	200001e4 	.word	0x200001e4
 8000688:	20000190 	.word	0x20000190
 800068c:	e000ed04 	.word	0xe000ed04

08000690 <Task2_Handler>:
		}
	}
}

void Task2_Handler(void *params)
{
 8000690:	b5b0      	push	{r4, r5, r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	char Task2_message[] = "Greetings from Task2!\r\n";
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <Task2_Handler+0x58>)
 800069a:	f107 0408 	add.w	r4, r7, #8
 800069e:	461d      	mov	r5, r3
 80006a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006a8:	e884 0003 	stmia.w	r4, {r0, r1}
	while(1)
	{
		if(UART_ACCESS_KEY == 1)
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <Task2_Handler+0x5c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d0fb      	beq.n	80006ac <Task2_Handler+0x1c>
		{
			HAL_UART_Transmit(&huart2, (const uint8_t*)Task2_message, strlen(Task2_message), 5);
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fd89 	bl	80001d0 <strlen>
 80006be:	4603      	mov	r3, r0
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	f107 0108 	add.w	r1, r7, #8
 80006c6:	2305      	movs	r3, #5
 80006c8:	4809      	ldr	r0, [pc, #36]	@ (80006f0 <Task2_Handler+0x60>)
 80006ca:	f005 f885 	bl	80057d8 <HAL_UART_Transmit>
			UART_ACCESS_KEY = 0;
 80006ce:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <Task2_Handler+0x5c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
			taskYIELD();
 80006d4:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <Task2_Handler+0x64>)
 80006d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	f3bf 8f4f 	dsb	sy
 80006e0:	f3bf 8f6f 	isb	sy
		if(UART_ACCESS_KEY == 1)
 80006e4:	e7e2      	b.n	80006ac <Task2_Handler+0x1c>
 80006e6:	bf00      	nop
 80006e8:	0800d81c 	.word	0x0800d81c
 80006ec:	200001e4 	.word	0x200001e4
 80006f0:	20000190 	.word	0x20000190
 80006f4:	e000ed04 	.word	0xe000ed04

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	@ 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2230      	movs	r2, #48	@ 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f00c fc30 	bl	800cf6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	4b2a      	ldr	r3, [pc, #168]	@ (80007cc <SystemClock_Config+0xd4>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	4a29      	ldr	r2, [pc, #164]	@ (80007cc <SystemClock_Config+0xd4>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	@ 0x40
 800072c:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <SystemClock_Config+0xd4>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b24      	ldr	r3, [pc, #144]	@ (80007d0 <SystemClock_Config+0xd8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a23      	ldr	r2, [pc, #140]	@ (80007d0 <SystemClock_Config+0xd8>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <SystemClock_Config+0xd8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000754:	2303      	movs	r3, #3
 8000756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000758:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075e:	2301      	movs	r3, #1
 8000760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000762:	2310      	movs	r3, #16
 8000764:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000770:	2308      	movs	r3, #8
 8000772:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000774:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000778:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077a:	2302      	movs	r3, #2
 800077c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800077e:	2307      	movs	r3, #7
 8000780:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fea0 	bl	80044cc <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000792:	f000 f9f7 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 f901 	bl	80049bc <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007c0:	f000 f9e0 	bl	8000b84 <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3750      	adds	r7, #80	@ 0x50
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <MX_I2C1_Init+0x50>)
 80007da:	4a13      	ldr	r2, [pc, #76]	@ (8000828 <MX_I2C1_Init+0x54>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_I2C1_Init+0x50>)
 80007e0:	4a12      	ldr	r2, [pc, #72]	@ (800082c <MX_I2C1_Init+0x58>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_I2C1_Init+0x50>)
 80007f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	@ (8000824 <MX_I2C1_Init+0x50>)
 8000812:	f003 f877 	bl	8003904 <HAL_I2C_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800081c:	f000 f9b2 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2000009c 	.word	0x2000009c
 8000828:	40005400 	.word	0x40005400
 800082c:	000186a0 	.word	0x000186a0

08000830 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_I2S3_Init+0x54>)
 8000836:	4a14      	ldr	r2, [pc, #80]	@ (8000888 <MX_I2S3_Init+0x58>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_I2S3_Init+0x54>)
 800083c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000840:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_I2S3_Init+0x54>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000848:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_I2S3_Init+0x54>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <MX_I2S3_Init+0x54>)
 8000850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000854:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_I2S3_Init+0x54>)
 8000858:	4a0c      	ldr	r2, [pc, #48]	@ (800088c <MX_I2S3_Init+0x5c>)
 800085a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_I2S3_Init+0x54>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_I2S3_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_I2S3_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_I2S3_Init+0x54>)
 8000870:	f003 f98c 	bl	8003b8c <HAL_I2S_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800087a:	f000 f983 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000f0 	.word	0x200000f0
 8000888:	40003c00 	.word	0x40003c00
 800088c:	00017700 	.word	0x00017700

08000890 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000894:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_SPI1_Init+0x64>)
 8000896:	4a18      	ldr	r2, [pc, #96]	@ (80008f8 <MX_SPI1_Init+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_SPI1_Init+0x64>)
 800089c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_SPI1_Init+0x64>)
 80008bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_SPI1_Init+0x64>)
 80008dc:	220a      	movs	r2, #10
 80008de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_SPI1_Init+0x64>)
 80008e2:	f004 fbff 	bl	80050e4 <HAL_SPI_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008ec:	f000 f94a 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000138 	.word	0x20000138
 80008f8:	40013000 	.word	0x40013000

080008fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	@ (800094c <MX_USART2_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000934:	f004 ff00 	bl	8005738 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f000 f921 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000190 	.word	0x20000190
 800094c:	40004400 	.word	0x40004400

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	@ 0x30
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	4b72      	ldr	r3, [pc, #456]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a71      	ldr	r2, [pc, #452]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 8000970:	f043 0310 	orr.w	r3, r3, #16
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b6f      	ldr	r3, [pc, #444]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	4b6b      	ldr	r3, [pc, #428]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a6a      	ldr	r2, [pc, #424]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b68      	ldr	r3, [pc, #416]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b64      	ldr	r3, [pc, #400]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a63      	ldr	r2, [pc, #396]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b61      	ldr	r3, [pc, #388]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b5d      	ldr	r3, [pc, #372]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a5c      	ldr	r2, [pc, #368]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b56      	ldr	r3, [pc, #344]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a55      	ldr	r2, [pc, #340]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b53      	ldr	r3, [pc, #332]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a4e      	ldr	r2, [pc, #312]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b4c      	ldr	r3, [pc, #304]	@ (8000b34 <MX_GPIO_Init+0x1e4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2108      	movs	r1, #8
 8000a12:	4849      	ldr	r0, [pc, #292]	@ (8000b38 <MX_GPIO_Init+0x1e8>)
 8000a14:	f000 fe42 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4847      	ldr	r0, [pc, #284]	@ (8000b3c <MX_GPIO_Init+0x1ec>)
 8000a1e:	f000 fe3d 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a22:	2200      	movs	r2, #0
 8000a24:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a28:	4845      	ldr	r0, [pc, #276]	@ (8000b40 <MX_GPIO_Init+0x1f0>)
 8000a2a:	f000 fe37 	bl	800169c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	483c      	ldr	r0, [pc, #240]	@ (8000b38 <MX_GPIO_Init+0x1e8>)
 8000a46:	f000 fc8d 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4836      	ldr	r0, [pc, #216]	@ (8000b3c <MX_GPIO_Init+0x1ec>)
 8000a62:	f000 fc7f 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a66:	2308      	movs	r3, #8
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a76:	2305      	movs	r3, #5
 8000a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	482e      	ldr	r0, [pc, #184]	@ (8000b3c <MX_GPIO_Init+0x1ec>)
 8000a82:	f000 fc6f 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a8a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	482a      	ldr	r0, [pc, #168]	@ (8000b44 <MX_GPIO_Init+0x1f4>)
 8000a9c:	f000 fc62 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4825      	ldr	r0, [pc, #148]	@ (8000b48 <MX_GPIO_Init+0x1f8>)
 8000ab4:	f000 fc56 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aca:	2305      	movs	r3, #5
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481c      	ldr	r0, [pc, #112]	@ (8000b48 <MX_GPIO_Init+0x1f8>)
 8000ad6:	f000 fc45 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ada:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000ade:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4813      	ldr	r0, [pc, #76]	@ (8000b40 <MX_GPIO_Init+0x1f0>)
 8000af4:	f000 fc36 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000af8:	2320      	movs	r3, #32
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480d      	ldr	r0, [pc, #52]	@ (8000b40 <MX_GPIO_Init+0x1f0>)
 8000b0c:	f000 fc2a 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b14:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <MX_GPIO_Init+0x1e8>)
 8000b26:	f000 fc1d 	bl	8001364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3730      	adds	r7, #48	@ 0x30
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020400 	.word	0x40020400

08000b4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000b54:	f00b fe28 	bl	800c7a8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f008 ff61 	bl	8009a20 <osDelay>
 8000b5e:	e7fb      	b.n	8000b58 <StartDefaultTask+0xc>

08000b60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b72:	f000 fad1 	bl	8001118 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40002000 	.word	0x40002000

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <Error_Handler+0x8>

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_MspInit+0x54>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	4a11      	ldr	r2, [pc, #68]	@ (8000be4 <HAL_MspInit+0x54>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <HAL_MspInit+0x54>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000be4 <HAL_MspInit+0x54>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <HAL_MspInit+0x54>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc2:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <HAL_MspInit+0x54>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	f06f 0001 	mvn.w	r0, #1
 8000bd6:	f000 fb9b 	bl	8001310 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a19      	ldr	r2, [pc, #100]	@ (8000c6c <HAL_I2C_MspInit+0x84>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d12c      	bne.n	8000c64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <HAL_I2C_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a17      	ldr	r2, [pc, #92]	@ (8000c70 <HAL_I2C_MspInit+0x88>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <HAL_I2C_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c26:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2c:	2312      	movs	r3, #18
 8000c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <HAL_I2C_MspInit+0x8c>)
 8000c44:	f000 fb8e 	bl	8001364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_I2C_MspInit+0x88>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c50:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <HAL_I2C_MspInit+0x88>)
 8000c52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <HAL_I2C_MspInit+0x88>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	@ 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40005400 	.word	0x40005400
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020400 	.word	0x40020400

08000c78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	@ 0x38
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a31      	ldr	r2, [pc, #196]	@ (8000d68 <HAL_I2S_MspInit+0xf0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d15a      	bne.n	8000d5e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cac:	23c0      	movs	r3, #192	@ 0xc0
 8000cae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f004 f8d1 	bl	8004e60 <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cc4:	f7ff ff5e 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	4b27      	ldr	r3, [pc, #156]	@ (8000d6c <HAL_I2S_MspInit+0xf4>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd0:	4a26      	ldr	r2, [pc, #152]	@ (8000d6c <HAL_I2S_MspInit+0xf4>)
 8000cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd8:	4b24      	ldr	r3, [pc, #144]	@ (8000d6c <HAL_I2S_MspInit+0xf4>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	4b20      	ldr	r3, [pc, #128]	@ (8000d6c <HAL_I2S_MspInit+0xf4>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cec:	4a1f      	ldr	r2, [pc, #124]	@ (8000d6c <HAL_I2S_MspInit+0xf4>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <HAL_I2S_MspInit+0xf4>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <HAL_I2S_MspInit+0xf4>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d08:	4a18      	ldr	r2, [pc, #96]	@ (8000d6c <HAL_I2S_MspInit+0xf4>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d10:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <HAL_I2S_MspInit+0xf4>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d1c:	2310      	movs	r3, #16
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d2c:	2306      	movs	r3, #6
 8000d2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	480e      	ldr	r0, [pc, #56]	@ (8000d70 <HAL_I2S_MspInit+0xf8>)
 8000d38:	f000 fb14 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d3c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d4e:	2306      	movs	r3, #6
 8000d50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	4806      	ldr	r0, [pc, #24]	@ (8000d74 <HAL_I2S_MspInit+0xfc>)
 8000d5a:	f000 fb03 	bl	8001364 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3738      	adds	r7, #56	@ 0x38
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40003c00 	.word	0x40003c00
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000
 8000d74:	40020800 	.word	0x40020800

08000d78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a19      	ldr	r2, [pc, #100]	@ (8000dfc <HAL_SPI_MspInit+0x84>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12b      	bne.n	8000df2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <HAL_SPI_MspInit+0x88>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	4a17      	ldr	r2, [pc, #92]	@ (8000e00 <HAL_SPI_MspInit+0x88>)
 8000da4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <HAL_SPI_MspInit+0x88>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <HAL_SPI_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a10      	ldr	r2, [pc, #64]	@ (8000e00 <HAL_SPI_MspInit+0x88>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <HAL_SPI_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dd2:	23e0      	movs	r3, #224	@ 0xe0
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000de2:	2305      	movs	r3, #5
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <HAL_SPI_MspInit+0x8c>)
 8000dee:	f000 fab9 	bl	8001364 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	@ 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40013000 	.word	0x40013000
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020000 	.word	0x40020000

08000e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a19      	ldr	r2, [pc, #100]	@ (8000e8c <HAL_UART_MspInit+0x84>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d12b      	bne.n	8000e82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a10      	ldr	r2, [pc, #64]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e62:	230c      	movs	r3, #12
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e72:	2307      	movs	r3, #7
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <HAL_UART_MspInit+0x8c>)
 8000e7e:	f000 fa71 	bl	8001364 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	@ 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40004400 	.word	0x40004400
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000

08000e98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	@ 0x38
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4b33      	ldr	r3, [pc, #204]	@ (8000f7c <HAL_InitTick+0xe4>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	4a32      	ldr	r2, [pc, #200]	@ (8000f7c <HAL_InitTick+0xe4>)
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb8:	4b30      	ldr	r3, [pc, #192]	@ (8000f7c <HAL_InitTick+0xe4>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec4:	f107 0210 	add.w	r2, r7, #16
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 ff94 	bl	8004dfc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d103      	bne.n	8000ee6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ede:	f003 ff65 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8000ee2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ee4:	e004      	b.n	8000ef0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ee6:	f003 ff61 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8000eea:	4603      	mov	r3, r0
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ef2:	4a23      	ldr	r2, [pc, #140]	@ (8000f80 <HAL_InitTick+0xe8>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	0c9b      	lsrs	r3, r3, #18
 8000efa:	3b01      	subs	r3, #1
 8000efc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000efe:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <HAL_InitTick+0xec>)
 8000f00:	4a21      	ldr	r2, [pc, #132]	@ (8000f88 <HAL_InitTick+0xf0>)
 8000f02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000f04:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <HAL_InitTick+0xec>)
 8000f06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f0a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f84 <HAL_InitTick+0xec>)
 8000f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f10:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <HAL_InitTick+0xec>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <HAL_InitTick+0xec>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <HAL_InitTick+0xec>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000f24:	4817      	ldr	r0, [pc, #92]	@ (8000f84 <HAL_InitTick+0xec>)
 8000f26:	f004 f966 	bl	80051f6 <HAL_TIM_Base_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000f38:	4812      	ldr	r0, [pc, #72]	@ (8000f84 <HAL_InitTick+0xec>)
 8000f3a:	f004 f9b5 	bl	80052a8 <HAL_TIM_Base_Start_IT>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d111      	bne.n	8000f70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000f4c:	202d      	movs	r0, #45	@ 0x2d
 8000f4e:	f000 f9fb 	bl	8001348 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d808      	bhi.n	8000f6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	202d      	movs	r0, #45	@ 0x2d
 8000f5e:	f000 f9d7 	bl	8001310 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f62:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <HAL_InitTick+0xf4>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e002      	b.n	8000f70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3738      	adds	r7, #56	@ 0x38
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	431bde83 	.word	0x431bde83
 8000f84:	200001e8 	.word	0x200001e8
 8000f88:	40002000 	.word	0x40002000
 8000f8c:	20000004 	.word	0x20000004

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <NMI_Handler+0x4>

08000f98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000fce:	f004 f9db 	bl	8005388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001e8 	.word	0x200001e8

08000fdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fe0:	4802      	ldr	r0, [pc, #8]	@ (8000fec <OTG_FS_IRQHandler+0x10>)
 8000fe2:	f000 fe55 	bl	8001c90 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000502c 	.word	0x2000502c

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	@ (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f00c f812 	bl	800d048 <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20020000 	.word	0x20020000
 8001050:	00000400 	.word	0x00000400
 8001054:	20000230 	.word	0x20000230
 8001058:	20005558 	.word	0x20005558

0800105c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001084:	f7ff ffea 	bl	800105c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001088:	480c      	ldr	r0, [pc, #48]	@ (80010bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800108a:	490d      	ldr	r1, [pc, #52]	@ (80010c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800108c:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a0:	4c0a      	ldr	r4, [pc, #40]	@ (80010cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ae:	f00b ffd1 	bl	800d054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fa5d 	bl	8000570 <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80010c4:	0800d8dc 	.word	0x0800d8dc
  ldr r2, =_sbss
 80010c8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80010cc:	20005554 	.word	0x20005554

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001114 <HAL_Init+0x40>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <HAL_Init+0x40>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	@ (8001114 <HAL_Init+0x40>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f8fc 	bl	80012fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	200f      	movs	r0, #15
 8001104:	f7ff fec8 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fd42 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	@ (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008
 800113c:	20000234 	.word	0x20000234

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000234 	.word	0x20000234

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff ffee 	bl	8001140 <HAL_GetTick>
 8001164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001170:	d005      	beq.n	800117e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <HAL_Delay+0x44>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117e:	bf00      	nop
 8001180:	f7ff ffde 	bl	8001140 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8f7      	bhi.n	8001180 <HAL_Delay+0x28>
  {
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4907      	ldr	r1, [pc, #28]	@ (800123c <__NVIC_EnableIRQ+0x38>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	@ (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	@ (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	@ 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	@ 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff4c 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001322:	f7ff ff61 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 8001326:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	68b9      	ldr	r1, [r7, #8]
 800132c:	6978      	ldr	r0, [r7, #20]
 800132e:	f7ff ffb1 	bl	8001294 <NVIC_EncodePriority>
 8001332:	4602      	mov	r2, r0
 8001334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff80 	bl	8001240 <__NVIC_SetPriority>
}
 8001340:	bf00      	nop
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff54 	bl	8001204 <__NVIC_EnableIRQ>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	e16b      	b.n	8001658 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 815a 	bne.w	8001652 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d005      	beq.n	80013b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d130      	bne.n	8001418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 0201 	and.w	r2, r3, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b03      	cmp	r3, #3
 8001422:	d017      	beq.n	8001454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d123      	bne.n	80014a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	08da      	lsrs	r2, r3, #3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	69b9      	ldr	r1, [r7, #24]
 80014a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0203 	and.w	r2, r3, #3
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80b4 	beq.w	8001652 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b60      	ldr	r3, [pc, #384]	@ (8001670 <HAL_GPIO_Init+0x30c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001670 <HAL_GPIO_Init+0x30c>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001670 <HAL_GPIO_Init+0x30c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001506:	4a5b      	ldr	r2, [pc, #364]	@ (8001674 <HAL_GPIO_Init+0x310>)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a52      	ldr	r2, [pc, #328]	@ (8001678 <HAL_GPIO_Init+0x314>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d02b      	beq.n	800158a <HAL_GPIO_Init+0x226>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a51      	ldr	r2, [pc, #324]	@ (800167c <HAL_GPIO_Init+0x318>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d025      	beq.n	8001586 <HAL_GPIO_Init+0x222>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a50      	ldr	r2, [pc, #320]	@ (8001680 <HAL_GPIO_Init+0x31c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d01f      	beq.n	8001582 <HAL_GPIO_Init+0x21e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4f      	ldr	r2, [pc, #316]	@ (8001684 <HAL_GPIO_Init+0x320>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d019      	beq.n	800157e <HAL_GPIO_Init+0x21a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4e      	ldr	r2, [pc, #312]	@ (8001688 <HAL_GPIO_Init+0x324>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_GPIO_Init+0x216>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4d      	ldr	r2, [pc, #308]	@ (800168c <HAL_GPIO_Init+0x328>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00d      	beq.n	8001576 <HAL_GPIO_Init+0x212>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4c      	ldr	r2, [pc, #304]	@ (8001690 <HAL_GPIO_Init+0x32c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_Init+0x20e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4b      	ldr	r2, [pc, #300]	@ (8001694 <HAL_GPIO_Init+0x330>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_GPIO_Init+0x20a>
 800156a:	2307      	movs	r3, #7
 800156c:	e00e      	b.n	800158c <HAL_GPIO_Init+0x228>
 800156e:	2308      	movs	r3, #8
 8001570:	e00c      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001572:	2306      	movs	r3, #6
 8001574:	e00a      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001576:	2305      	movs	r3, #5
 8001578:	e008      	b.n	800158c <HAL_GPIO_Init+0x228>
 800157a:	2304      	movs	r3, #4
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x228>
 800157e:	2303      	movs	r3, #3
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x228>
 800158a:	2300      	movs	r3, #0
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800159c:	4935      	ldr	r1, [pc, #212]	@ (8001674 <HAL_GPIO_Init+0x310>)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001698 <HAL_GPIO_Init+0x334>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ce:	4a32      	ldr	r2, [pc, #200]	@ (8001698 <HAL_GPIO_Init+0x334>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d4:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <HAL_GPIO_Init+0x334>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f8:	4a27      	ldr	r2, [pc, #156]	@ (8001698 <HAL_GPIO_Init+0x334>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015fe:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <HAL_GPIO_Init+0x334>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001622:	4a1d      	ldr	r2, [pc, #116]	@ (8001698 <HAL_GPIO_Init+0x334>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <HAL_GPIO_Init+0x334>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800164c:	4a12      	ldr	r2, [pc, #72]	@ (8001698 <HAL_GPIO_Init+0x334>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3301      	adds	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b0f      	cmp	r3, #15
 800165c:	f67f ae90 	bls.w	8001380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3724      	adds	r7, #36	@ 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40013800 	.word	0x40013800
 8001678:	40020000 	.word	0x40020000
 800167c:	40020400 	.word	0x40020400
 8001680:	40020800 	.word	0x40020800
 8001684:	40020c00 	.word	0x40020c00
 8001688:	40021000 	.word	0x40021000
 800168c:	40021400 	.word	0x40021400
 8001690:	40021800 	.word	0x40021800
 8001694:	40021c00 	.word	0x40021c00
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	619a      	str	r2, [r3, #24]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af02      	add	r7, sp, #8
 80016d4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e059      	b.n	8001794 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d106      	bne.n	8001700 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f00b f8a8 	bl	800c850 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2203      	movs	r2, #3
 8001704:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800170e:	d102      	bne.n	8001716 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f004 fc8d 	bl	800603a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7c1a      	ldrb	r2, [r3, #16]
 8001728:	f88d 2000 	strb.w	r2, [sp]
 800172c:	3304      	adds	r3, #4
 800172e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001730:	f004 fc0e 	bl	8005f50 <USB_CoreInit>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2202      	movs	r2, #2
 800173e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e026      	b.n	8001794 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2101      	movs	r1, #1
 800174c:	4618      	mov	r0, r3
 800174e:	f004 fc85 	bl	800605c <USB_SetCurrentMode>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2202      	movs	r2, #2
 800175c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e017      	b.n	8001794 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7c1a      	ldrb	r2, [r3, #16]
 800176c:	f88d 2000 	strb.w	r2, [sp]
 8001770:	3304      	adds	r3, #4
 8001772:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001774:	f004 fe28 	bl	80063c8 <USB_HostInit>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2202      	movs	r2, #2
 8001782:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e004      	b.n	8001794 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b08b      	sub	sp, #44	@ 0x2c
 80017a0:	af04      	add	r7, sp, #16
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	4608      	mov	r0, r1
 80017a6:	4611      	mov	r1, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	4603      	mov	r3, r0
 80017ac:	70fb      	strb	r3, [r7, #3]
 80017ae:	460b      	mov	r3, r1
 80017b0:	70bb      	strb	r3, [r7, #2]
 80017b2:	4613      	mov	r3, r2
 80017b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80017b6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80017b8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_HCD_HC_Init+0x2c>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e09d      	b.n	8001904 <HAL_HCD_HC_Init+0x168>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	1a9b      	subs	r3, r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	3319      	adds	r3, #25
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017e4:	78fa      	ldrb	r2, [r7, #3]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	1a9b      	subs	r3, r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	3314      	adds	r3, #20
 80017f4:	787a      	ldrb	r2, [r7, #1]
 80017f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	1a9b      	subs	r3, r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	3315      	adds	r3, #21
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	3326      	adds	r3, #38	@ 0x26
 800181c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001820:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	78bb      	ldrb	r3, [r7, #2]
 8001826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800182a:	b2d8      	uxtb	r0, r3
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	3316      	adds	r3, #22
 800183a:	4602      	mov	r2, r0
 800183c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	4619      	mov	r1, r3
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fbc8 	bl	8001fd8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001848:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800184c:	2b00      	cmp	r3, #0
 800184e:	da0a      	bge.n	8001866 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	1a9b      	subs	r3, r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	3317      	adds	r3, #23
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e009      	b.n	800187a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	1a9b      	subs	r3, r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	3317      	adds	r3, #23
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f004 ff06 	bl	8006690 <USB_GetHostSpeed>
 8001884:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001886:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800188a:	2b01      	cmp	r3, #1
 800188c:	d10b      	bne.n	80018a6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800188e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001892:	2b01      	cmp	r3, #1
 8001894:	d107      	bne.n	80018a6 <HAL_HCD_HC_Init+0x10a>
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d104      	bne.n	80018a6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2bbc      	cmp	r3, #188	@ 0xbc
 80018a0:	d901      	bls.n	80018a6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80018a2:	23bc      	movs	r3, #188	@ 0xbc
 80018a4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	3318      	adds	r3, #24
 80018b6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80018ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	b298      	uxth	r0, r3
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	1a9b      	subs	r3, r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	3328      	adds	r3, #40	@ 0x28
 80018d0:	4602      	mov	r2, r0
 80018d2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	787c      	ldrb	r4, [r7, #1]
 80018de:	78ba      	ldrb	r2, [r7, #2]
 80018e0:	78f9      	ldrb	r1, [r7, #3]
 80018e2:	9302      	str	r3, [sp, #8]
 80018e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	4623      	mov	r3, r4
 80018f2:	f004 fef5 	bl	80066e0 <USB_HC_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
}
 8001904:	4618      	mov	r0, r3
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd90      	pop	{r4, r7, pc}

0800190c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_HCD_HC_Halt+0x1e>
 8001926:	2302      	movs	r3, #2
 8001928:	e00f      	b.n	800194a <HAL_HCD_HC_Halt+0x3e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f005 fa87 	bl	8006e4e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001948:	7bfb      	ldrb	r3, [r7, #15]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	4608      	mov	r0, r1
 800195e:	4611      	mov	r1, r2
 8001960:	461a      	mov	r2, r3
 8001962:	4603      	mov	r3, r0
 8001964:	70fb      	strb	r3, [r7, #3]
 8001966:	460b      	mov	r3, r1
 8001968:	70bb      	strb	r3, [r7, #2]
 800196a:	4613      	mov	r3, r2
 800196c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	3317      	adds	r3, #23
 800197e:	78ba      	ldrb	r2, [r7, #2]
 8001980:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	3326      	adds	r3, #38	@ 0x26
 8001992:	787a      	ldrb	r2, [r7, #1]
 8001994:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001996:	7c3b      	ldrb	r3, [r7, #16]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d114      	bne.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	332a      	adds	r3, #42	@ 0x2a
 80019ac:	2203      	movs	r2, #3
 80019ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	3319      	adds	r3, #25
 80019c0:	7f3a      	ldrb	r2, [r7, #28]
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	e009      	b.n	80019da <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	1a9b      	subs	r3, r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	332a      	adds	r3, #42	@ 0x2a
 80019d6:	2202      	movs	r2, #2
 80019d8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019da:	787b      	ldrb	r3, [r7, #1]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	f200 8102 	bhi.w	8001be6 <HAL_HCD_HC_SubmitRequest+0x292>
 80019e2:	a201      	add	r2, pc, #4	@ (adr r2, 80019e8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80019e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e8:	080019f9 	.word	0x080019f9
 80019ec:	08001bd1 	.word	0x08001bd1
 80019f0:	08001abd 	.word	0x08001abd
 80019f4:	08001b47 	.word	0x08001b47
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80019f8:	7c3b      	ldrb	r3, [r7, #16]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	f040 80f5 	bne.w	8001bea <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001a00:	78bb      	ldrb	r3, [r7, #2]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d12d      	bne.n	8001a62 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001a06:	8b3b      	ldrh	r3, [r7, #24]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	333d      	adds	r3, #61	@ 0x3d
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	333d      	adds	r3, #61	@ 0x3d
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10a      	bne.n	8001a4c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a36:	78fa      	ldrb	r2, [r7, #3]
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	1a9b      	subs	r3, r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	332a      	adds	r3, #42	@ 0x2a
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001a4a:	e0ce      	b.n	8001bea <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	1a9b      	subs	r3, r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	332a      	adds	r3, #42	@ 0x2a
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	701a      	strb	r2, [r3, #0]
      break;
 8001a60:	e0c3      	b.n	8001bea <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001a62:	78fa      	ldrb	r2, [r7, #3]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	331a      	adds	r3, #26
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	f040 80b8 	bne.w	8001bea <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a7a:	78fa      	ldrb	r2, [r7, #3]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	333c      	adds	r3, #60	@ 0x3c
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10a      	bne.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	332a      	adds	r3, #42	@ 0x2a
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
      break;
 8001aa4:	e0a1      	b.n	8001bea <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	332a      	adds	r3, #42	@ 0x2a
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	701a      	strb	r2, [r3, #0]
      break;
 8001aba:	e096      	b.n	8001bea <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001abc:	78bb      	ldrb	r3, [r7, #2]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d120      	bne.n	8001b04 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	333d      	adds	r3, #61	@ 0x3d
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10a      	bne.n	8001aee <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ad8:	78fa      	ldrb	r2, [r7, #3]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	332a      	adds	r3, #42	@ 0x2a
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001aec:	e07e      	b.n	8001bec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aee:	78fa      	ldrb	r2, [r7, #3]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	332a      	adds	r3, #42	@ 0x2a
 8001afe:	2202      	movs	r2, #2
 8001b00:	701a      	strb	r2, [r3, #0]
      break;
 8001b02:	e073      	b.n	8001bec <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b04:	78fa      	ldrb	r2, [r7, #3]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	333c      	adds	r3, #60	@ 0x3c
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10a      	bne.n	8001b30 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b1a:	78fa      	ldrb	r2, [r7, #3]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	332a      	adds	r3, #42	@ 0x2a
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
      break;
 8001b2e:	e05d      	b.n	8001bec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	332a      	adds	r3, #42	@ 0x2a
 8001b40:	2202      	movs	r2, #2
 8001b42:	701a      	strb	r2, [r3, #0]
      break;
 8001b44:	e052      	b.n	8001bec <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b46:	78bb      	ldrb	r3, [r7, #2]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d120      	bne.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b4c:	78fa      	ldrb	r2, [r7, #3]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	333d      	adds	r3, #61	@ 0x3d
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10a      	bne.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	332a      	adds	r3, #42	@ 0x2a
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b76:	e039      	b.n	8001bec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	332a      	adds	r3, #42	@ 0x2a
 8001b88:	2202      	movs	r2, #2
 8001b8a:	701a      	strb	r2, [r3, #0]
      break;
 8001b8c:	e02e      	b.n	8001bec <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b8e:	78fa      	ldrb	r2, [r7, #3]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	333c      	adds	r3, #60	@ 0x3c
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10a      	bne.n	8001bba <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	332a      	adds	r3, #42	@ 0x2a
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
      break;
 8001bb8:	e018      	b.n	8001bec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bba:	78fa      	ldrb	r2, [r7, #3]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	1a9b      	subs	r3, r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	332a      	adds	r3, #42	@ 0x2a
 8001bca:	2202      	movs	r2, #2
 8001bcc:	701a      	strb	r2, [r3, #0]
      break;
 8001bce:	e00d      	b.n	8001bec <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	332a      	adds	r3, #42	@ 0x2a
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
      break;
 8001be4:	e002      	b.n	8001bec <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001be6:	bf00      	nop
 8001be8:	e000      	b.n	8001bec <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001bea:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	332c      	adds	r3, #44	@ 0x2c
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	8b39      	ldrh	r1, [r7, #24]
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4403      	add	r3, r0
 8001c10:	3334      	adds	r3, #52	@ 0x34
 8001c12:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c14:	78fa      	ldrb	r2, [r7, #3]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	334c      	adds	r3, #76	@ 0x4c
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c28:	78fa      	ldrb	r2, [r7, #3]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	3338      	adds	r3, #56	@ 0x38
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c3c:	78fa      	ldrb	r2, [r7, #3]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3315      	adds	r3, #21
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c50:	78fa      	ldrb	r2, [r7, #3]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	334d      	adds	r3, #77	@ 0x4d
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	3310      	adds	r3, #16
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	1d19      	adds	r1, r3, #4
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	799b      	ldrb	r3, [r3, #6]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f004 fe5a 	bl	8006938 <USB_HC_StartXfer>
 8001c84:	4603      	mov	r3, r0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop

08001c90 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 fb4e 	bl	8006348 <USB_GetMode>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	f040 80fb 	bne.w	8001eaa <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 fb11 	bl	80062e0 <USB_ReadInterrupts>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80f1 	beq.w	8001ea8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 fb08 	bl	80062e0 <USB_ReadInterrupts>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001cda:	d104      	bne.n	8001ce6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001ce4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f004 faf8 	bl	80062e0 <USB_ReadInterrupts>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cfa:	d104      	bne.n	8001d06 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f004 fae8 	bl	80062e0 <USB_ReadInterrupts>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001d1a:	d104      	bne.n	8001d26 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f004 fad8 	bl	80062e0 <USB_ReadInterrupts>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d103      	bne.n	8001d42 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f004 faca 	bl	80062e0 <USB_ReadInterrupts>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d56:	d120      	bne.n	8001d9a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001d60:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d113      	bne.n	8001d9a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d72:	2110      	movs	r1, #16
 8001d74:	6938      	ldr	r0, [r7, #16]
 8001d76:	f004 f9bd 	bl	80060f4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d7a:	6938      	ldr	r0, [r7, #16]
 8001d7c:	f004 f9ec 	bl	8006158 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7a5b      	ldrb	r3, [r3, #9]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d105      	bne.n	8001d94 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f004 fbde 	bl	8006550 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f00a fdd9 	bl	800c94c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 fa9e 	bl	80062e0 <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001daa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dae:	d102      	bne.n	8001db6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f001 fd33 	bl	800381c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 fa90 	bl	80062e0 <USB_ReadInterrupts>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d106      	bne.n	8001dd8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f00a fda2 	bl	800c914 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2208      	movs	r2, #8
 8001dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 fa7f 	bl	80062e0 <USB_ReadInterrupts>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001dec:	d139      	bne.n	8001e62 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f005 f81a 	bl	8006e2c <USB_HC_ReadInterrupt>
 8001df8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	e025      	b.n	8001e4c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d018      	beq.n	8001e46 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e2a:	d106      	bne.n	8001e3a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	4619      	mov	r1, r3
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f905 	bl	8002042 <HCD_HC_IN_IRQHandler>
 8001e38:	e005      	b.n	8001e46 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 ff67 	bl	8002d14 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	795b      	ldrb	r3, [r3, #5]
 8001e50:	461a      	mov	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d3d3      	bcc.n	8001e00 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f004 fa3a 	bl	80062e0 <USB_ReadInterrupts>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b10      	cmp	r3, #16
 8001e74:	d101      	bne.n	8001e7a <HAL_HCD_IRQHandler+0x1ea>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_HCD_IRQHandler+0x1ec>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d014      	beq.n	8001eaa <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0210 	bic.w	r2, r2, #16
 8001e8e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f001 fbe4 	bl	800365e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699a      	ldr	r2, [r3, #24]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0210 	orr.w	r2, r2, #16
 8001ea4:	619a      	str	r2, [r3, #24]
 8001ea6:	e000      	b.n	8001eaa <HAL_HCD_IRQHandler+0x21a>
      return;
 8001ea8:	bf00      	nop
    }
  }
}
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_HCD_Start+0x16>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e013      	b.n	8001eee <HAL_HCD_Start+0x3e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f004 fba2 	bl	800661e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 f89a 	bl	8006018 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_HCD_Stop+0x16>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e00d      	b.n	8001f28 <HAL_HCD_Stop+0x32>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f005 f8f5 	bl	8007108 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f004 fb44 	bl	80065ca <USB_ResetPort>
 8001f42:	4603      	mov	r3, r0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	334c      	adds	r3, #76	@ 0x4c
 8001f68:	781b      	ldrb	r3, [r3, #0]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	3338      	adds	r3, #56	@ 0x38
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f004 fb86 	bl	80066be <USB_GetCurrentFrame>
 8001fb2:	4603      	mov	r3, r0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f004 fb61 	bl	8006690 <USB_GetHostSpeed>
 8001fce:	4603      	mov	r3, r0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	331a      	adds	r3, #26
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	331b      	adds	r3, #27
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3325      	adds	r3, #37	@ 0x25
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3324      	adds	r3, #36	@ 0x24
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f004 f950 	bl	8006306 <USB_ReadChInterrupts>
 8002066:	4603      	mov	r3, r0
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b04      	cmp	r3, #4
 800206e:	d11a      	bne.n	80020a6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4413      	add	r3, r2
 8002078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800207c:	461a      	mov	r2, r3
 800207e:	2304      	movs	r3, #4
 8002080:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	334d      	adds	r3, #77	@ 0x4d
 8002092:	2207      	movs	r2, #7
 8002094:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f004 fed5 	bl	8006e4e <USB_HC_Halt>
 80020a4:	e09e      	b.n	80021e4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 f929 	bl	8006306 <USB_ReadChInterrupts>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020be:	d11b      	bne.n	80020f8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020cc:	461a      	mov	r2, r3
 80020ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	334d      	adds	r3, #77	@ 0x4d
 80020e4:	2208      	movs	r2, #8
 80020e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f004 feac 	bl	8006e4e <USB_HC_Halt>
 80020f6:	e075      	b.n	80021e4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f004 f900 	bl	8006306 <USB_ReadChInterrupts>
 8002106:	4603      	mov	r3, r0
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b08      	cmp	r3, #8
 800210e:	d11a      	bne.n	8002146 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4413      	add	r3, r2
 8002118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800211c:	461a      	mov	r2, r3
 800211e:	2308      	movs	r3, #8
 8002120:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	334d      	adds	r3, #77	@ 0x4d
 8002132:	2206      	movs	r2, #6
 8002134:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	78fa      	ldrb	r2, [r7, #3]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f004 fe85 	bl	8006e4e <USB_HC_Halt>
 8002144:	e04e      	b.n	80021e4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f004 f8d9 	bl	8006306 <USB_ReadChInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215e:	d11b      	bne.n	8002198 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4413      	add	r3, r2
 8002168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800216c:	461a      	mov	r2, r3
 800216e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002172:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	334d      	adds	r3, #77	@ 0x4d
 8002184:	2209      	movs	r2, #9
 8002186:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f004 fe5c 	bl	8006e4e <USB_HC_Halt>
 8002196:	e025      	b.n	80021e4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f004 f8b0 	bl	8006306 <USB_ReadChInterrupts>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ac:	2b80      	cmp	r3, #128	@ 0x80
 80021ae:	d119      	bne.n	80021e4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021bc:	461a      	mov	r2, r3
 80021be:	2380      	movs	r3, #128	@ 0x80
 80021c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	334d      	adds	r3, #77	@ 0x4d
 80021d2:	2207      	movs	r2, #7
 80021d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f004 fe35 	bl	8006e4e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 f88a 	bl	8006306 <USB_ReadChInterrupts>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021fc:	d112      	bne.n	8002224 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f004 fe21 	bl	8006e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002218:	461a      	mov	r2, r3
 800221a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800221e:	6093      	str	r3, [r2, #8]
 8002220:	f000 bd75 	b.w	8002d0e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f004 f86a 	bl	8006306 <USB_ReadChInterrupts>
 8002232:	4603      	mov	r3, r0
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b01      	cmp	r3, #1
 800223a:	f040 8128 	bne.w	800248e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800224a:	461a      	mov	r2, r3
 800224c:	2320      	movs	r3, #32
 800224e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	331b      	adds	r3, #27
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d119      	bne.n	800229a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	331b      	adds	r3, #27
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	0151      	lsls	r1, r2, #5
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	440a      	add	r2, r1
 8002290:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002298:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	799b      	ldrb	r3, [r3, #6]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d01b      	beq.n	80022da <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	3330      	adds	r3, #48	@ 0x30
 80022b2:	6819      	ldr	r1, [r3, #0]
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	1ac9      	subs	r1, r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4403      	add	r3, r0
 80022d6:	3338      	adds	r3, #56	@ 0x38
 80022d8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	334d      	adds	r3, #77	@ 0x4d
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	3344      	adds	r3, #68	@ 0x44
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800230e:	461a      	mov	r2, r3
 8002310:	2301      	movs	r3, #1
 8002312:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	3326      	adds	r3, #38	@ 0x26
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	3326      	adds	r3, #38	@ 0x26
 800233a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800233c:	2b02      	cmp	r3, #2
 800233e:	d110      	bne.n	8002362 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f004 fd80 	bl	8006e4e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4413      	add	r3, r2
 8002356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800235a:	461a      	mov	r2, r3
 800235c:	2310      	movs	r3, #16
 800235e:	6093      	str	r3, [r2, #8]
 8002360:	e03d      	b.n	80023de <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	3326      	adds	r3, #38	@ 0x26
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d00a      	beq.n	800238e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	3326      	adds	r3, #38	@ 0x26
 8002388:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800238a:	2b01      	cmp	r3, #1
 800238c:	d127      	bne.n	80023de <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4413      	add	r3, r2
 8002396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	0151      	lsls	r1, r2, #5
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	440a      	add	r2, r1
 80023a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80023ac:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	334c      	adds	r3, #76	@ 0x4c
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	334c      	adds	r3, #76	@ 0x4c
 80023d2:	781a      	ldrb	r2, [r3, #0]
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	4619      	mov	r1, r3
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f00a fac5 	bl	800c968 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	799b      	ldrb	r3, [r3, #6]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d13b      	bne.n	800245e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	3338      	adds	r3, #56	@ 0x38
 80023f6:	6819      	ldr	r1, [r3, #0]
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4403      	add	r3, r0
 8002406:	3328      	adds	r3, #40	@ 0x28
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	440b      	add	r3, r1
 800240c:	1e59      	subs	r1, r3, #1
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4403      	add	r3, r0
 800241c:	3328      	adds	r3, #40	@ 0x28
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	fbb1 f3f3 	udiv	r3, r1, r3
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 8470 	beq.w	8002d0e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	333c      	adds	r3, #60	@ 0x3c
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	f083 0301 	eor.w	r3, r3, #1
 8002446:	b2d8      	uxtb	r0, r3
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	333c      	adds	r3, #60	@ 0x3c
 8002456:	4602      	mov	r2, r0
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	f000 bc58 	b.w	8002d0e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800245e:	78fa      	ldrb	r2, [r7, #3]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	333c      	adds	r3, #60	@ 0x3c
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	f083 0301 	eor.w	r3, r3, #1
 8002476:	b2d8      	uxtb	r0, r3
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	333c      	adds	r3, #60	@ 0x3c
 8002486:	4602      	mov	r2, r0
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	f000 bc40 	b.w	8002d0e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f003 ff35 	bl	8006306 <USB_ReadChInterrupts>
 800249c:	4603      	mov	r3, r0
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b20      	cmp	r3, #32
 80024a4:	d131      	bne.n	800250a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b2:	461a      	mov	r2, r3
 80024b4:	2320      	movs	r3, #32
 80024b6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	331a      	adds	r3, #26
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	f040 841f 	bne.w	8002d0e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	331b      	adds	r3, #27
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	334d      	adds	r3, #77	@ 0x4d
 80024f4:	2203      	movs	r2, #3
 80024f6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f004 fca4 	bl	8006e4e <USB_HC_Halt>
 8002506:	f000 bc02 	b.w	8002d0e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fef7 	bl	8006306 <USB_ReadChInterrupts>
 8002518:	4603      	mov	r3, r0
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b02      	cmp	r3, #2
 8002520:	f040 8305 	bne.w	8002b2e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002530:	461a      	mov	r2, r3
 8002532:	2302      	movs	r3, #2
 8002534:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	334d      	adds	r3, #77	@ 0x4d
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d114      	bne.n	8002576 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	334d      	adds	r3, #77	@ 0x4d
 800255c:	2202      	movs	r2, #2
 800255e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	334c      	adds	r3, #76	@ 0x4c
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e2cc      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	334d      	adds	r3, #77	@ 0x4d
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b06      	cmp	r3, #6
 800258a:	d114      	bne.n	80025b6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	334d      	adds	r3, #77	@ 0x4d
 800259c:	2202      	movs	r2, #2
 800259e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	334c      	adds	r3, #76	@ 0x4c
 80025b0:	2205      	movs	r2, #5
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	e2ac      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	334d      	adds	r3, #77	@ 0x4d
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b07      	cmp	r3, #7
 80025ca:	d00b      	beq.n	80025e4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	334d      	adds	r3, #77	@ 0x4d
 80025dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80025de:	2b09      	cmp	r3, #9
 80025e0:	f040 80a6 	bne.w	8002730 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	334d      	adds	r3, #77	@ 0x4d
 80025f4:	2202      	movs	r2, #2
 80025f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	3344      	adds	r3, #68	@ 0x44
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	1c59      	adds	r1, r3, #1
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4403      	add	r3, r0
 8002618:	3344      	adds	r3, #68	@ 0x44
 800261a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	3344      	adds	r3, #68	@ 0x44
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d943      	bls.n	80026ba <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	3344      	adds	r3, #68	@ 0x44
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	331a      	adds	r3, #26
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d123      	bne.n	80026a4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	331b      	adds	r3, #27
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	331c      	adds	r3, #28
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	78fa      	ldrb	r2, [r7, #3]
 8002694:	0151      	lsls	r1, r2, #5
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	440a      	add	r2, r1
 800269a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800269e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	334c      	adds	r3, #76	@ 0x4c
 80026b4:	2204      	movs	r2, #4
 80026b6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026b8:	e229      	b.n	8002b0e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	334c      	adds	r3, #76	@ 0x4c
 80026ca:	2202      	movs	r2, #2
 80026cc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3326      	adds	r3, #38	@ 0x26
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	3326      	adds	r3, #38	@ 0x26
 80026f4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	f040 8209 	bne.w	8002b0e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002712:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800271a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002728:	461a      	mov	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800272e:	e1ee      	b.n	8002b0e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	334d      	adds	r3, #77	@ 0x4d
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b05      	cmp	r3, #5
 8002744:	f040 80c8 	bne.w	80028d8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	334d      	adds	r3, #77	@ 0x4d
 8002758:	2202      	movs	r2, #2
 800275a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	331b      	adds	r3, #27
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b01      	cmp	r3, #1
 8002770:	f040 81ce 	bne.w	8002b10 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3326      	adds	r3, #38	@ 0x26
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d16b      	bne.n	8002862 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	3348      	adds	r3, #72	@ 0x48
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	1c59      	adds	r1, r3, #1
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4403      	add	r3, r0
 80027aa:	3348      	adds	r3, #72	@ 0x48
 80027ac:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	1a9b      	subs	r3, r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	3348      	adds	r3, #72	@ 0x48
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d943      	bls.n	800284c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	3348      	adds	r3, #72	@ 0x48
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	331b      	adds	r3, #27
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	3344      	adds	r3, #68	@ 0x44
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d809      	bhi.n	8002816 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	331c      	adds	r3, #28
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	0151      	lsls	r1, r2, #5
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	440a      	add	r2, r1
 800282c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002830:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002834:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	334c      	adds	r3, #76	@ 0x4c
 8002846:	2204      	movs	r2, #4
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	e014      	b.n	8002876 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	334c      	adds	r3, #76	@ 0x4c
 800285c:	2202      	movs	r2, #2
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	e009      	b.n	8002876 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	334c      	adds	r3, #76	@ 0x4c
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	3326      	adds	r3, #38	@ 0x26
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00b      	beq.n	80028a4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	3326      	adds	r3, #38	@ 0x26
 800289c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800289e:	2b02      	cmp	r3, #2
 80028a0:	f040 8136 	bne.w	8002b10 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028ba:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028c2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d0:	461a      	mov	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e11b      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	334d      	adds	r3, #77	@ 0x4d
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	f040 8081 	bne.w	80029f2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	334d      	adds	r3, #77	@ 0x4d
 8002900:	2202      	movs	r2, #2
 8002902:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	331b      	adds	r3, #27
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	f040 80fa 	bne.w	8002b10 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	334c      	adds	r3, #76	@ 0x4c
 800292c:	2202      	movs	r2, #2
 800292e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	0151      	lsls	r1, r2, #5
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	440a      	add	r2, r1
 8002946:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800294a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800294e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	0151      	lsls	r1, r2, #5
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	440a      	add	r2, r1
 8002966:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800296a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800296e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	0151      	lsls	r1, r2, #5
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	440a      	add	r2, r1
 8002986:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800298a:	f023 0320 	bic.w	r3, r3, #32
 800298e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	3326      	adds	r3, #38	@ 0x26
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	3326      	adds	r3, #38	@ 0x26
 80029b6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	f040 80a9 	bne.w	8002b10 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80029d4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029dc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	e08e      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	334d      	adds	r3, #77	@ 0x4d
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d143      	bne.n	8002a90 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	334d      	adds	r3, #77	@ 0x4d
 8002a18:	2202      	movs	r2, #2
 8002a1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	334c      	adds	r3, #76	@ 0x4c
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3326      	adds	r3, #38	@ 0x26
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	3326      	adds	r3, #38	@ 0x26
 8002a56:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d159      	bne.n	8002b10 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a72:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a7a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e03f      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	334d      	adds	r3, #77	@ 0x4d
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d126      	bne.n	8002af4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	334d      	adds	r3, #77	@ 0x4d
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3344      	adds	r3, #68	@ 0x44
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	1c59      	adds	r1, r3, #1
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4403      	add	r3, r0
 8002ada:	3344      	adds	r3, #68	@ 0x44
 8002adc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	334c      	adds	r3, #76	@ 0x4c
 8002aee:	2204      	movs	r2, #4
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e00d      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	334d      	adds	r3, #77	@ 0x4d
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	f000 8100 	beq.w	8002d0c <HCD_HC_IN_IRQHandler+0xcca>
 8002b0c:	e000      	b.n	8002b10 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b0e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	334c      	adds	r3, #76	@ 0x4c
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	4619      	mov	r1, r3
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f009 ff1e 	bl	800c968 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b2c:	e0ef      	b.n	8002d0e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f003 fbe5 	bl	8006306 <USB_ReadChInterrupts>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b42:	2b40      	cmp	r3, #64	@ 0x40
 8002b44:	d12f      	bne.n	8002ba6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b52:	461a      	mov	r2, r3
 8002b54:	2340      	movs	r3, #64	@ 0x40
 8002b56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	334d      	adds	r3, #77	@ 0x4d
 8002b68:	2205      	movs	r2, #5
 8002b6a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	331a      	adds	r3, #26
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	3344      	adds	r3, #68	@ 0x44
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f004 f955 	bl	8006e4e <USB_HC_Halt>
 8002ba4:	e0b3      	b.n	8002d0e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f003 fba9 	bl	8006306 <USB_ReadChInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	f040 80a7 	bne.w	8002d0e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	3326      	adds	r3, #38	@ 0x26
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d11b      	bne.n	8002c0e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	3344      	adds	r3, #68	@ 0x44
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	334d      	adds	r3, #77	@ 0x4d
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f004 f921 	bl	8006e4e <USB_HC_Halt>
 8002c0c:	e03f      	b.n	8002c8e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3326      	adds	r3, #38	@ 0x26
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3326      	adds	r3, #38	@ 0x26
 8002c34:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d129      	bne.n	8002c8e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	3344      	adds	r3, #68	@ 0x44
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	799b      	ldrb	r3, [r3, #6]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HCD_HC_IN_IRQHandler+0xc2a>
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	331b      	adds	r3, #27
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d110      	bne.n	8002c8e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	334d      	adds	r3, #77	@ 0x4d
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f004 f8e0 	bl	8006e4e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	331b      	adds	r3, #27
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d129      	bne.n	8002cf8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	331b      	adds	r3, #27
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	0151      	lsls	r1, r2, #5
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	440a      	add	r2, r1
 8002cce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cd6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	0151      	lsls	r1, r2, #5
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	440a      	add	r2, r1
 8002cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cf2:	f043 0320 	orr.w	r3, r3, #32
 8002cf6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d04:	461a      	mov	r2, r3
 8002d06:	2310      	movs	r3, #16
 8002d08:	6093      	str	r3, [r2, #8]
 8002d0a:	e000      	b.n	8002d0e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002d0c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f003 fae7 	bl	8006306 <USB_ReadChInterrupts>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d11b      	bne.n	8002d7a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2304      	movs	r3, #4
 8002d52:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	334d      	adds	r3, #77	@ 0x4d
 8002d64:	2207      	movs	r2, #7
 8002d66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f004 f86c 	bl	8006e4e <USB_HC_Halt>
 8002d76:	f000 bc6f 	b.w	8003658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f003 fabf 	bl	8006306 <USB_ReadChInterrupts>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	f040 8082 	bne.w	8002e98 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da0:	461a      	mov	r2, r3
 8002da2:	2320      	movs	r3, #32
 8002da4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	3319      	adds	r3, #25
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d124      	bne.n	8002e06 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3319      	adds	r3, #25
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	334c      	adds	r3, #76	@ 0x4c
 8002de0:	2202      	movs	r2, #2
 8002de2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	334d      	adds	r3, #77	@ 0x4d
 8002df4:	2203      	movs	r2, #3
 8002df6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f004 f824 	bl	8006e4e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	331a      	adds	r3, #26
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	f040 841d 	bne.w	8003658 <HCD_HC_OUT_IRQHandler+0x944>
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	331b      	adds	r3, #27
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f040 8411 	bne.w	8003658 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	3326      	adds	r3, #38	@ 0x26
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d009      	beq.n	8002e60 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	331b      	adds	r3, #27
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	334d      	adds	r3, #77	@ 0x4d
 8002e70:	2203      	movs	r2, #3
 8002e72:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f003 ffe6 	bl	8006e4e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	3344      	adds	r3, #68	@ 0x44
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e3df      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f003 fa30 	bl	8006306 <USB_ReadChInterrupts>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eb0:	d111      	bne.n	8002ed6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ec4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 ffbd 	bl	8006e4e <USB_HC_Halt>
 8002ed4:	e3c0      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 fa11 	bl	8006306 <USB_ReadChInterrupts>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d168      	bne.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3344      	adds	r3, #68	@ 0x44
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 f9fb 	bl	8006306 <USB_ReadChInterrupts>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f16:	2b40      	cmp	r3, #64	@ 0x40
 8002f18:	d112      	bne.n	8002f40 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3319      	adds	r3, #25
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2340      	movs	r3, #64	@ 0x40
 8002f3e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	331b      	adds	r3, #27
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d019      	beq.n	8002f8a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	331b      	adds	r3, #27
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	0151      	lsls	r1, r2, #5
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	440a      	add	r2, r1
 8002f80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f88:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f96:	461a      	mov	r2, r3
 8002f98:	2301      	movs	r3, #1
 8002f9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	334d      	adds	r3, #77	@ 0x4d
 8002fac:	2201      	movs	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 ff48 	bl	8006e4e <USB_HC_Halt>
 8002fbe:	e34b      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 f99c 	bl	8006306 <USB_ReadChInterrupts>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd4:	2b40      	cmp	r3, #64	@ 0x40
 8002fd6:	d139      	bne.n	800304c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	334d      	adds	r3, #77	@ 0x4d
 8002fe8:	2205      	movs	r2, #5
 8002fea:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	331a      	adds	r3, #26
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	3319      	adds	r3, #25
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3344      	adds	r3, #68	@ 0x44
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f003 ff0b 	bl	8006e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003044:	461a      	mov	r2, r3
 8003046:	2340      	movs	r3, #64	@ 0x40
 8003048:	6093      	str	r3, [r2, #8]
 800304a:	e305      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f003 f956 	bl	8006306 <USB_ReadChInterrupts>
 800305a:	4603      	mov	r3, r0
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b08      	cmp	r3, #8
 8003062:	d11a      	bne.n	800309a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003070:	461a      	mov	r2, r3
 8003072:	2308      	movs	r3, #8
 8003074:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	334d      	adds	r3, #77	@ 0x4d
 8003086:	2206      	movs	r2, #6
 8003088:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	f003 fedb 	bl	8006e4e <USB_HC_Halt>
 8003098:	e2de      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 f92f 	bl	8006306 <USB_ReadChInterrupts>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2b10      	cmp	r3, #16
 80030b0:	d144      	bne.n	800313c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3344      	adds	r3, #68	@ 0x44
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	334d      	adds	r3, #77	@ 0x4d
 80030d6:	2204      	movs	r2, #4
 80030d8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3319      	adds	r3, #25
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d114      	bne.n	800311a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	3318      	adds	r3, #24
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3319      	adds	r3, #25
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f003 fe93 	bl	8006e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003134:	461a      	mov	r2, r3
 8003136:	2310      	movs	r3, #16
 8003138:	6093      	str	r3, [r2, #8]
 800313a:	e28d      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f003 f8de 	bl	8006306 <USB_ReadChInterrupts>
 800314a:	4603      	mov	r3, r0
 800314c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003150:	2b80      	cmp	r3, #128	@ 0x80
 8003152:	d169      	bne.n	8003228 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	799b      	ldrb	r3, [r3, #6]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d111      	bne.n	8003180 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	334d      	adds	r3, #77	@ 0x4d
 800316c:	2207      	movs	r2, #7
 800316e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f003 fe68 	bl	8006e4e <USB_HC_Halt>
 800317e:	e049      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3344      	adds	r3, #68	@ 0x44
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	1c59      	adds	r1, r3, #1
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4403      	add	r3, r0
 80031a0:	3344      	adds	r3, #68	@ 0x44
 80031a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	3344      	adds	r3, #68	@ 0x44
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d922      	bls.n	8003200 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	3344      	adds	r3, #68	@ 0x44
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	334c      	adds	r3, #76	@ 0x4c
 80031de:	2204      	movs	r2, #4
 80031e0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	334c      	adds	r3, #76	@ 0x4c
 80031f2:	781a      	ldrb	r2, [r3, #0]
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	4619      	mov	r1, r3
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f009 fbb5 	bl	800c968 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031fe:	e009      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	334c      	adds	r3, #76	@ 0x4c
 8003210:	2202      	movs	r2, #2
 8003212:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003220:	461a      	mov	r2, r3
 8003222:	2380      	movs	r3, #128	@ 0x80
 8003224:	6093      	str	r3, [r2, #8]
 8003226:	e217      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f003 f868 	bl	8006306 <USB_ReadChInterrupts>
 8003236:	4603      	mov	r3, r0
 8003238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003240:	d11b      	bne.n	800327a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334d      	adds	r3, #77	@ 0x4d
 8003252:	2209      	movs	r2, #9
 8003254:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f003 fdf5 	bl	8006e4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4413      	add	r3, r2
 800326c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003270:	461a      	mov	r2, r3
 8003272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003276:	6093      	str	r3, [r2, #8]
 8003278:	e1ee      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f003 f83f 	bl	8006306 <USB_ReadChInterrupts>
 8003288:	4603      	mov	r3, r0
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b02      	cmp	r3, #2
 8003290:	f040 81df 	bne.w	8003652 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a0:	461a      	mov	r2, r3
 80032a2:	2302      	movs	r3, #2
 80032a4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	334d      	adds	r3, #77	@ 0x4d
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	f040 8093 	bne.w	80033e4 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	334d      	adds	r3, #77	@ 0x4d
 80032ce:	2202      	movs	r2, #2
 80032d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	334c      	adds	r3, #76	@ 0x4c
 80032e2:	2201      	movs	r2, #1
 80032e4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3326      	adds	r3, #38	@ 0x26
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d00b      	beq.n	8003314 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	3326      	adds	r3, #38	@ 0x26
 800330c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800330e:	2b03      	cmp	r3, #3
 8003310:	f040 8190 	bne.w	8003634 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	799b      	ldrb	r3, [r3, #6]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d115      	bne.n	8003348 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	333d      	adds	r3, #61	@ 0x3d
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	f083 0301 	eor.w	r3, r3, #1
 8003334:	b2d8      	uxtb	r0, r3
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	333d      	adds	r3, #61	@ 0x3d
 8003344:	4602      	mov	r2, r0
 8003346:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	799b      	ldrb	r3, [r3, #6]
 800334c:	2b01      	cmp	r3, #1
 800334e:	f040 8171 	bne.w	8003634 <HCD_HC_OUT_IRQHandler+0x920>
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	3334      	adds	r3, #52	@ 0x34
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8165 	beq.w	8003634 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	3334      	adds	r3, #52	@ 0x34
 800337a:	6819      	ldr	r1, [r3, #0]
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4403      	add	r3, r0
 800338a:	3328      	adds	r3, #40	@ 0x28
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	440b      	add	r3, r1
 8003390:	1e59      	subs	r1, r3, #1
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4403      	add	r3, r0
 80033a0:	3328      	adds	r3, #40	@ 0x28
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 813f 	beq.w	8003634 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	333d      	adds	r3, #61	@ 0x3d
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	f083 0301 	eor.w	r3, r3, #1
 80033ce:	b2d8      	uxtb	r0, r3
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	333d      	adds	r3, #61	@ 0x3d
 80033de:	4602      	mov	r2, r0
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e127      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	334d      	adds	r3, #77	@ 0x4d
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d120      	bne.n	800343c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	334d      	adds	r3, #77	@ 0x4d
 800340a:	2202      	movs	r2, #2
 800340c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	331b      	adds	r3, #27
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	f040 8107 	bne.w	8003634 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	334c      	adds	r3, #76	@ 0x4c
 8003436:	2202      	movs	r2, #2
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	e0fb      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	334d      	adds	r3, #77	@ 0x4d
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b04      	cmp	r3, #4
 8003450:	d13a      	bne.n	80034c8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	334d      	adds	r3, #77	@ 0x4d
 8003462:	2202      	movs	r2, #2
 8003464:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	334c      	adds	r3, #76	@ 0x4c
 8003476:	2202      	movs	r2, #2
 8003478:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	331b      	adds	r3, #27
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	f040 80d1 	bne.w	8003634 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	331b      	adds	r3, #27
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	0151      	lsls	r1, r2, #5
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	440a      	add	r2, r1
 80034bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c4:	6053      	str	r3, [r2, #4]
 80034c6:	e0b5      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	334d      	adds	r3, #77	@ 0x4d
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d114      	bne.n	8003508 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	334d      	adds	r3, #77	@ 0x4d
 80034ee:	2202      	movs	r2, #2
 80034f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	334c      	adds	r3, #76	@ 0x4c
 8003502:	2202      	movs	r2, #2
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	e095      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	334d      	adds	r3, #77	@ 0x4d
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b06      	cmp	r3, #6
 800351c:	d114      	bne.n	8003548 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	334d      	adds	r3, #77	@ 0x4d
 800352e:	2202      	movs	r2, #2
 8003530:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	334c      	adds	r3, #76	@ 0x4c
 8003542:	2205      	movs	r2, #5
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e075      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	334d      	adds	r3, #77	@ 0x4d
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b07      	cmp	r3, #7
 800355c:	d00a      	beq.n	8003574 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	334d      	adds	r3, #77	@ 0x4d
 800356e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003570:	2b09      	cmp	r3, #9
 8003572:	d170      	bne.n	8003656 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	334d      	adds	r3, #77	@ 0x4d
 8003584:	2202      	movs	r2, #2
 8003586:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3344      	adds	r3, #68	@ 0x44
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	1c59      	adds	r1, r3, #1
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4403      	add	r3, r0
 80035a8:	3344      	adds	r3, #68	@ 0x44
 80035aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	3344      	adds	r3, #68	@ 0x44
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d914      	bls.n	80035ec <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	3344      	adds	r3, #68	@ 0x44
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	334c      	adds	r3, #76	@ 0x4c
 80035e6:	2204      	movs	r2, #4
 80035e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035ea:	e022      	b.n	8003632 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334c      	adds	r3, #76	@ 0x4c
 80035fc:	2202      	movs	r2, #2
 80035fe:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003616:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800361e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4413      	add	r3, r2
 8003628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362c:	461a      	mov	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003632:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	334c      	adds	r3, #76	@ 0x4c
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	4619      	mov	r1, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f009 f98c 	bl	800c968 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003650:	e002      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003656:	bf00      	nop
  }
}
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b08a      	sub	sp, #40	@ 0x28
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	0c5b      	lsrs	r3, r3, #17
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003692:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d004      	beq.n	80036a4 <HCD_RXQLVL_IRQHandler+0x46>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b05      	cmp	r3, #5
 800369e:	f000 80b6 	beq.w	800380e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80036a2:	e0b7      	b.n	8003814 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80b3 	beq.w	8003812 <HCD_RXQLVL_IRQHandler+0x1b4>
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4613      	mov	r3, r2
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	332c      	adds	r3, #44	@ 0x2c
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80a7 	beq.w	8003812 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3338      	adds	r3, #56	@ 0x38
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	18d1      	adds	r1, r2, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4403      	add	r3, r0
 80036e8:	3334      	adds	r3, #52	@ 0x34
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4299      	cmp	r1, r3
 80036ee:	f200 8083 	bhi.w	80037f8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	332c      	adds	r3, #44	@ 0x2c
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	b292      	uxth	r2, r2
 800370c:	4619      	mov	r1, r3
 800370e:	f002 fd8f 	bl	8006230 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	332c      	adds	r3, #44	@ 0x2c
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	18d1      	adds	r1, r2, r3
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4403      	add	r3, r0
 8003736:	332c      	adds	r3, #44	@ 0x2c
 8003738:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4613      	mov	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	3338      	adds	r3, #56	@ 0x38
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	18d1      	adds	r1, r2, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4403      	add	r3, r0
 800375e:	3338      	adds	r3, #56	@ 0x38
 8003760:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	4413      	add	r3, r2
 800376a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	0cdb      	lsrs	r3, r3, #19
 8003772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003776:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3328      	adds	r3, #40	@ 0x28
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4293      	cmp	r3, r2
 8003790:	d13f      	bne.n	8003812 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d03c      	beq.n	8003812 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c4:	461a      	mov	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	333c      	adds	r3, #60	@ 0x3c
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	f083 0301 	eor.w	r3, r3, #1
 80037e0:	b2d8      	uxtb	r0, r3
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	333c      	adds	r3, #60	@ 0x3c
 80037f2:	4602      	mov	r2, r0
 80037f4:	701a      	strb	r2, [r3, #0]
      break;
 80037f6:	e00c      	b.n	8003812 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	334c      	adds	r3, #76	@ 0x4c
 8003808:	2204      	movs	r2, #4
 800380a:	701a      	strb	r2, [r3, #0]
      break;
 800380c:	e001      	b.n	8003812 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003812:	bf00      	nop
  }
}
 8003814:	bf00      	nop
 8003816:	3728      	adds	r7, #40	@ 0x28
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003848:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b02      	cmp	r3, #2
 8003852:	d10b      	bne.n	800386c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b01      	cmp	r3, #1
 800385c:	d102      	bne.n	8003864 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f009 f866 	bl	800c930 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f043 0302 	orr.w	r3, r3, #2
 800386a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b08      	cmp	r3, #8
 8003874:	d132      	bne.n	80038dc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f043 0308 	orr.w	r3, r3, #8
 800387c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b04      	cmp	r3, #4
 8003886:	d126      	bne.n	80038d6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7a5b      	ldrb	r3, [r3, #9]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d113      	bne.n	80038b8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003896:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800389a:	d106      	bne.n	80038aa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2102      	movs	r1, #2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f002 fe54 	bl	8006550 <USB_InitFSLSPClkSel>
 80038a8:	e011      	b.n	80038ce <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2101      	movs	r1, #1
 80038b0:	4618      	mov	r0, r3
 80038b2:	f002 fe4d 	bl	8006550 <USB_InitFSLSPClkSel>
 80038b6:	e00a      	b.n	80038ce <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	79db      	ldrb	r3, [r3, #7]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d106      	bne.n	80038ce <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038c6:	461a      	mov	r2, r3
 80038c8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80038cc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f009 f85c 	bl	800c98c <HAL_HCD_PortEnabled_Callback>
 80038d4:	e002      	b.n	80038dc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f009 f866 	bl	800c9a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d103      	bne.n	80038ee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f043 0320 	orr.w	r3, r3, #32
 80038ec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	6013      	str	r3, [r2, #0]
}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e12b      	b.n	8003b6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd f95c 	bl	8000be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2224      	movs	r2, #36	@ 0x24
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003956:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003966:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003968:	f001 fa20 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 800396c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	4a81      	ldr	r2, [pc, #516]	@ (8003b78 <HAL_I2C_Init+0x274>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d807      	bhi.n	8003988 <HAL_I2C_Init+0x84>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4a80      	ldr	r2, [pc, #512]	@ (8003b7c <HAL_I2C_Init+0x278>)
 800397c:	4293      	cmp	r3, r2
 800397e:	bf94      	ite	ls
 8003980:	2301      	movls	r3, #1
 8003982:	2300      	movhi	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	e006      	b.n	8003996 <HAL_I2C_Init+0x92>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b80 <HAL_I2C_Init+0x27c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	bf94      	ite	ls
 8003990:	2301      	movls	r3, #1
 8003992:	2300      	movhi	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e0e7      	b.n	8003b6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4a78      	ldr	r2, [pc, #480]	@ (8003b84 <HAL_I2C_Init+0x280>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	0c9b      	lsrs	r3, r3, #18
 80039a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4a6a      	ldr	r2, [pc, #424]	@ (8003b78 <HAL_I2C_Init+0x274>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d802      	bhi.n	80039d8 <HAL_I2C_Init+0xd4>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	3301      	adds	r3, #1
 80039d6:	e009      	b.n	80039ec <HAL_I2C_Init+0xe8>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	4a69      	ldr	r2, [pc, #420]	@ (8003b88 <HAL_I2C_Init+0x284>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	099b      	lsrs	r3, r3, #6
 80039ea:	3301      	adds	r3, #1
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	430b      	orrs	r3, r1
 80039f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	495c      	ldr	r1, [pc, #368]	@ (8003b78 <HAL_I2C_Init+0x274>)
 8003a08:	428b      	cmp	r3, r1
 8003a0a:	d819      	bhi.n	8003a40 <HAL_I2C_Init+0x13c>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e59      	subs	r1, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a1a:	1c59      	adds	r1, r3, #1
 8003a1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a20:	400b      	ands	r3, r1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_I2C_Init+0x138>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1e59      	subs	r1, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a34:	3301      	adds	r3, #1
 8003a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3a:	e051      	b.n	8003ae0 <HAL_I2C_Init+0x1dc>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	e04f      	b.n	8003ae0 <HAL_I2C_Init+0x1dc>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d111      	bne.n	8003a6c <HAL_I2C_Init+0x168>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1e58      	subs	r0, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6859      	ldr	r1, [r3, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	440b      	add	r3, r1
 8003a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf0c      	ite	eq
 8003a64:	2301      	moveq	r3, #1
 8003a66:	2300      	movne	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	e012      	b.n	8003a92 <HAL_I2C_Init+0x18e>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1e58      	subs	r0, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	0099      	lsls	r1, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a82:	3301      	adds	r3, #1
 8003a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_I2C_Init+0x196>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e022      	b.n	8003ae0 <HAL_I2C_Init+0x1dc>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10e      	bne.n	8003ac0 <HAL_I2C_Init+0x1bc>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1e58      	subs	r0, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6859      	ldr	r1, [r3, #4]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	440b      	add	r3, r1
 8003ab0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003abe:	e00f      	b.n	8003ae0 <HAL_I2C_Init+0x1dc>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	1e58      	subs	r0, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6859      	ldr	r1, [r3, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	0099      	lsls	r1, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003adc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	6809      	ldr	r1, [r1, #0]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6911      	ldr	r1, [r2, #16]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68d2      	ldr	r2, [r2, #12]
 8003b1a:	4311      	orrs	r1, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	430b      	orrs	r3, r1
 8003b22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	000186a0 	.word	0x000186a0
 8003b7c:	001e847f 	.word	0x001e847f
 8003b80:	003d08ff 	.word	0x003d08ff
 8003b84:	431bde83 	.word	0x431bde83
 8003b88:	10624dd3 	.word	0x10624dd3

08003b8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e128      	b.n	8003df0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a90      	ldr	r2, [pc, #576]	@ (8003df8 <HAL_I2S_Init+0x26c>)
 8003bb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7fd f85d 	bl	8000c78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bd4:	f023 030f 	bic.w	r3, r3, #15
 8003bd8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2202      	movs	r2, #2
 8003be0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d060      	beq.n	8003cac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d102      	bne.n	8003bf8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003bf2:	2310      	movs	r3, #16
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e001      	b.n	8003bfc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d802      	bhi.n	8003c0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	f001 fa0a 	bl	8005024 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c10:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c1a:	d125      	bne.n	8003c68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d010      	beq.n	8003c46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	461a      	mov	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	3305      	adds	r3, #5
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	e01f      	b.n	8003c86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	461a      	mov	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	3305      	adds	r3, #5
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	e00e      	b.n	8003c86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	461a      	mov	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c82:	3305      	adds	r3, #5
 8003c84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4a5c      	ldr	r2, [pc, #368]	@ (8003dfc <HAL_I2S_Init+0x270>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	08db      	lsrs	r3, r3, #3
 8003c90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e003      	b.n	8003cb4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003cac:	2302      	movs	r3, #2
 8003cae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d902      	bls.n	8003cc0 <HAL_I2S_Init+0x134>
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	2bff      	cmp	r3, #255	@ 0xff
 8003cbe:	d907      	bls.n	8003cd0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc4:	f043 0210 	orr.w	r2, r3, #16
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e08f      	b.n	8003df0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	ea42 0103 	orr.w	r1, r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003cee:	f023 030f 	bic.w	r3, r3, #15
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6851      	ldr	r1, [r2, #4]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6892      	ldr	r2, [r2, #8]
 8003cfa:	4311      	orrs	r1, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68d2      	ldr	r2, [r2, #12]
 8003d00:	4311      	orrs	r1, r2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6992      	ldr	r2, [r2, #24]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d12:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d161      	bne.n	8003de0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a38      	ldr	r2, [pc, #224]	@ (8003e00 <HAL_I2S_Init+0x274>)
 8003d20:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a37      	ldr	r2, [pc, #220]	@ (8003e04 <HAL_I2S_Init+0x278>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d101      	bne.n	8003d30 <HAL_I2S_Init+0x1a4>
 8003d2c:	4b36      	ldr	r3, [pc, #216]	@ (8003e08 <HAL_I2S_Init+0x27c>)
 8003d2e:	e001      	b.n	8003d34 <HAL_I2S_Init+0x1a8>
 8003d30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	4932      	ldr	r1, [pc, #200]	@ (8003e04 <HAL_I2S_Init+0x278>)
 8003d3c:	428a      	cmp	r2, r1
 8003d3e:	d101      	bne.n	8003d44 <HAL_I2S_Init+0x1b8>
 8003d40:	4a31      	ldr	r2, [pc, #196]	@ (8003e08 <HAL_I2S_Init+0x27c>)
 8003d42:	e001      	b.n	8003d48 <HAL_I2S_Init+0x1bc>
 8003d44:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003d48:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d4c:	f023 030f 	bic.w	r3, r3, #15
 8003d50:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2b      	ldr	r2, [pc, #172]	@ (8003e04 <HAL_I2S_Init+0x278>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d101      	bne.n	8003d60 <HAL_I2S_Init+0x1d4>
 8003d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8003e08 <HAL_I2S_Init+0x27c>)
 8003d5e:	e001      	b.n	8003d64 <HAL_I2S_Init+0x1d8>
 8003d60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d64:	2202      	movs	r2, #2
 8003d66:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a25      	ldr	r2, [pc, #148]	@ (8003e04 <HAL_I2S_Init+0x278>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d101      	bne.n	8003d76 <HAL_I2S_Init+0x1ea>
 8003d72:	4b25      	ldr	r3, [pc, #148]	@ (8003e08 <HAL_I2S_Init+0x27c>)
 8003d74:	e001      	b.n	8003d7a <HAL_I2S_Init+0x1ee>
 8003d76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d86:	d003      	beq.n	8003d90 <HAL_I2S_Init+0x204>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d103      	bne.n	8003d98 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	e001      	b.n	8003d9c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003db0:	4313      	orrs	r3, r2
 8003db2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	897b      	ldrh	r3, [r7, #10]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003dc8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a0d      	ldr	r2, [pc, #52]	@ (8003e04 <HAL_I2S_Init+0x278>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <HAL_I2S_Init+0x24c>
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e08 <HAL_I2S_Init+0x27c>)
 8003dd6:	e001      	b.n	8003ddc <HAL_I2S_Init+0x250>
 8003dd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ddc:	897a      	ldrh	r2, [r7, #10]
 8003dde:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	08003f03 	.word	0x08003f03
 8003dfc:	cccccccd 	.word	0xcccccccd
 8003e00:	08004019 	.word	0x08004019
 8003e04:	40003800 	.word	0x40003800
 8003e08:	40003400 	.word	0x40003400

08003e0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	881a      	ldrh	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	1c9a      	adds	r2, r3, #2
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10e      	bne.n	8003e9c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff ffb8 	bl	8003e0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	b292      	uxth	r2, r2
 8003eb8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebe:	1c9a      	adds	r2, r3, #2
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10e      	bne.n	8003efa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003eea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff ff93 	bl	8003e20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b086      	sub	sp, #24
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d13a      	bne.n	8003f94 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d109      	bne.n	8003f3c <I2S_IRQHandler+0x3a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f32:	2b40      	cmp	r3, #64	@ 0x40
 8003f34:	d102      	bne.n	8003f3c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff ffb4 	bl	8003ea4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f42:	2b40      	cmp	r3, #64	@ 0x40
 8003f44:	d126      	bne.n	8003f94 <I2S_IRQHandler+0x92>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d11f      	bne.n	8003f94 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f64:	2300      	movs	r3, #0
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	f043 0202 	orr.w	r2, r3, #2
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ff50 	bl	8003e34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d136      	bne.n	800400e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d109      	bne.n	8003fbe <I2S_IRQHandler+0xbc>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb4:	2b80      	cmp	r3, #128	@ 0x80
 8003fb6:	d102      	bne.n	8003fbe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ff45 	bl	8003e48 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d122      	bne.n	800400e <I2S_IRQHandler+0x10c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d11b      	bne.n	800400e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fe4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004000:	f043 0204 	orr.w	r2, r3, #4
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff ff13 	bl	8003e34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800400e:	bf00      	nop
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a92      	ldr	r2, [pc, #584]	@ (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d101      	bne.n	8004036 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004032:	4b92      	ldr	r3, [pc, #584]	@ (800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004034:	e001      	b.n	800403a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004036:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a8b      	ldr	r2, [pc, #556]	@ (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d101      	bne.n	8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004050:	4b8a      	ldr	r3, [pc, #552]	@ (800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004052:	e001      	b.n	8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004054:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004064:	d004      	beq.n	8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	f040 8099 	bne.w	80041a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b02      	cmp	r3, #2
 8004078:	d107      	bne.n	800408a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f925 	bl	80042d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b01      	cmp	r3, #1
 8004092:	d107      	bne.n	80040a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f9c8 	bl	8004434 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040aa:	2b40      	cmp	r3, #64	@ 0x40
 80040ac:	d13a      	bne.n	8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d035      	beq.n	8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d101      	bne.n	80040c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80040c2:	4b6e      	ldr	r3, [pc, #440]	@ (800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040c4:	e001      	b.n	80040ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80040c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4969      	ldr	r1, [pc, #420]	@ (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040d2:	428b      	cmp	r3, r1
 80040d4:	d101      	bne.n	80040da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80040d6:	4b69      	ldr	r3, [pc, #420]	@ (800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040d8:	e001      	b.n	80040de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80040da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004116:	f043 0202 	orr.w	r2, r3, #2
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff fe88 	bl	8003e34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b08      	cmp	r3, #8
 800412c:	f040 80c3 	bne.w	80042b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80bd 	beq.w	80042b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800414a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a49      	ldr	r2, [pc, #292]	@ (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d101      	bne.n	800415a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004156:	4b49      	ldr	r3, [pc, #292]	@ (800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004158:	e001      	b.n	800415e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800415a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4944      	ldr	r1, [pc, #272]	@ (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004166:	428b      	cmp	r3, r1
 8004168:	d101      	bne.n	800416e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800416a:	4b44      	ldr	r3, [pc, #272]	@ (800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800416c:	e001      	b.n	8004172 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800416e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004172:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004176:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004178:	2300      	movs	r3, #0
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004192:	f043 0204 	orr.w	r2, r3, #4
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff fe4a 	bl	8003e34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041a0:	e089      	b.n	80042b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d107      	bne.n	80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f8be 	bl	8004338 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f8fd 	bl	80043d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041dc:	2b40      	cmp	r3, #64	@ 0x40
 80041de:	d12f      	bne.n	8004240 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d02a      	beq.n	8004240 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d101      	bne.n	8004208 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004204:	4b1d      	ldr	r3, [pc, #116]	@ (800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004206:	e001      	b.n	800420c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004208:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4919      	ldr	r1, [pc, #100]	@ (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004214:	428b      	cmp	r3, r1
 8004216:	d101      	bne.n	800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004218:	4b18      	ldr	r3, [pc, #96]	@ (800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800421a:	e001      	b.n	8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800421c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004220:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004224:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004232:	f043 0202 	orr.w	r2, r3, #2
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fdfa 	bl	8003e34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b08      	cmp	r3, #8
 8004248:	d136      	bne.n	80042b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d031      	beq.n	80042b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a07      	ldr	r2, [pc, #28]	@ (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800425e:	4b07      	ldr	r3, [pc, #28]	@ (800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004260:	e001      	b.n	8004266 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004262:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4902      	ldr	r1, [pc, #8]	@ (8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800426e:	428b      	cmp	r3, r1
 8004270:	d106      	bne.n	8004280 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004272:	4b02      	ldr	r3, [pc, #8]	@ (800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004274:	e006      	b.n	8004284 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004276:	bf00      	nop
 8004278:	40003800 	.word	0x40003800
 800427c:	40003400 	.word	0x40003400
 8004280:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004284:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004288:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004298:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	f043 0204 	orr.w	r2, r3, #4
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff fdc0 	bl	8003e34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042b4:	e000      	b.n	80042b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042b6:	bf00      	nop
}
 80042b8:	bf00      	nop
 80042ba:	3720      	adds	r7, #32
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	1c99      	adds	r1, r3, #2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6251      	str	r1, [r2, #36]	@ 0x24
 80042e6:	881a      	ldrh	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d113      	bne.n	800432e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004314:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ffc9 	bl	80042c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	1c99      	adds	r1, r3, #2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6251      	str	r1, [r2, #36]	@ 0x24
 800434a:	8819      	ldrh	r1, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1d      	ldr	r2, [pc, #116]	@ (80043c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <I2SEx_TxISR_I2SExt+0x22>
 8004356:	4b1d      	ldr	r3, [pc, #116]	@ (80043cc <I2SEx_TxISR_I2SExt+0x94>)
 8004358:	e001      	b.n	800435e <I2SEx_TxISR_I2SExt+0x26>
 800435a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800435e:	460a      	mov	r2, r1
 8004360:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d121      	bne.n	80043be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a12      	ldr	r2, [pc, #72]	@ (80043c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d101      	bne.n	8004388 <I2SEx_TxISR_I2SExt+0x50>
 8004384:	4b11      	ldr	r3, [pc, #68]	@ (80043cc <I2SEx_TxISR_I2SExt+0x94>)
 8004386:	e001      	b.n	800438c <I2SEx_TxISR_I2SExt+0x54>
 8004388:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	490d      	ldr	r1, [pc, #52]	@ (80043c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004394:	428b      	cmp	r3, r1
 8004396:	d101      	bne.n	800439c <I2SEx_TxISR_I2SExt+0x64>
 8004398:	4b0c      	ldr	r3, [pc, #48]	@ (80043cc <I2SEx_TxISR_I2SExt+0x94>)
 800439a:	e001      	b.n	80043a0 <I2SEx_TxISR_I2SExt+0x68>
 800439c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d106      	bne.n	80043be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff ff81 	bl	80042c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40003800 	.word	0x40003800
 80043cc:	40003400 	.word	0x40003400

080043d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68d8      	ldr	r0, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e2:	1c99      	adds	r1, r3, #2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80043e8:	b282      	uxth	r2, r0
 80043ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d113      	bne.n	800442c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004412:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ff4a 	bl	80042c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800442c:	bf00      	nop
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a20      	ldr	r2, [pc, #128]	@ (80044c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d101      	bne.n	800444a <I2SEx_RxISR_I2SExt+0x16>
 8004446:	4b20      	ldr	r3, [pc, #128]	@ (80044c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004448:	e001      	b.n	800444e <I2SEx_RxISR_I2SExt+0x1a>
 800444a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800444e:	68d8      	ldr	r0, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	1c99      	adds	r1, r3, #2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800445a:	b282      	uxth	r2, r0
 800445c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d121      	bne.n	80044ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a12      	ldr	r2, [pc, #72]	@ (80044c4 <I2SEx_RxISR_I2SExt+0x90>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d101      	bne.n	8004484 <I2SEx_RxISR_I2SExt+0x50>
 8004480:	4b11      	ldr	r3, [pc, #68]	@ (80044c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004482:	e001      	b.n	8004488 <I2SEx_RxISR_I2SExt+0x54>
 8004484:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	490d      	ldr	r1, [pc, #52]	@ (80044c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004490:	428b      	cmp	r3, r1
 8004492:	d101      	bne.n	8004498 <I2SEx_RxISR_I2SExt+0x64>
 8004494:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004496:	e001      	b.n	800449c <I2SEx_RxISR_I2SExt+0x68>
 8004498:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800449c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff ff03 	bl	80042c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40003800 	.word	0x40003800
 80044c8:	40003400 	.word	0x40003400

080044cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e267      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d075      	beq.n	80045d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ea:	4b88      	ldr	r3, [pc, #544]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d00c      	beq.n	8004510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f6:	4b85      	ldr	r3, [pc, #532]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d112      	bne.n	8004528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004502:	4b82      	ldr	r3, [pc, #520]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800450a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800450e:	d10b      	bne.n	8004528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004510:	4b7e      	ldr	r3, [pc, #504]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d05b      	beq.n	80045d4 <HAL_RCC_OscConfig+0x108>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d157      	bne.n	80045d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e242      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004530:	d106      	bne.n	8004540 <HAL_RCC_OscConfig+0x74>
 8004532:	4b76      	ldr	r3, [pc, #472]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a75      	ldr	r2, [pc, #468]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e01d      	b.n	800457c <HAL_RCC_OscConfig+0xb0>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004548:	d10c      	bne.n	8004564 <HAL_RCC_OscConfig+0x98>
 800454a:	4b70      	ldr	r3, [pc, #448]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a6f      	ldr	r2, [pc, #444]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 8004550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	4b6d      	ldr	r3, [pc, #436]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a6c      	ldr	r2, [pc, #432]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 800455c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e00b      	b.n	800457c <HAL_RCC_OscConfig+0xb0>
 8004564:	4b69      	ldr	r3, [pc, #420]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a68      	ldr	r2, [pc, #416]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 800456a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	4b66      	ldr	r3, [pc, #408]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a65      	ldr	r2, [pc, #404]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 8004576:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800457a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d013      	beq.n	80045ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7fc fddc 	bl	8001140 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800458c:	f7fc fdd8 	bl	8001140 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	@ 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e207      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459e:	4b5b      	ldr	r3, [pc, #364]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0f0      	beq.n	800458c <HAL_RCC_OscConfig+0xc0>
 80045aa:	e014      	b.n	80045d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ac:	f7fc fdc8 	bl	8001140 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b4:	f7fc fdc4 	bl	8001140 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b64      	cmp	r3, #100	@ 0x64
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e1f3      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c6:	4b51      	ldr	r3, [pc, #324]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0xe8>
 80045d2:	e000      	b.n	80045d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d063      	beq.n	80046aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045e2:	4b4a      	ldr	r3, [pc, #296]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ee:	4b47      	ldr	r3, [pc, #284]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d11c      	bne.n	8004634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045fa:	4b44      	ldr	r3, [pc, #272]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d116      	bne.n	8004634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004606:	4b41      	ldr	r3, [pc, #260]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_RCC_OscConfig+0x152>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d001      	beq.n	800461e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e1c7      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461e:	4b3b      	ldr	r3, [pc, #236]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4937      	ldr	r1, [pc, #220]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 800462e:	4313      	orrs	r3, r2
 8004630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004632:	e03a      	b.n	80046aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d020      	beq.n	800467e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800463c:	4b34      	ldr	r3, [pc, #208]	@ (8004710 <HAL_RCC_OscConfig+0x244>)
 800463e:	2201      	movs	r2, #1
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004642:	f7fc fd7d 	bl	8001140 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800464a:	f7fc fd79 	bl	8001140 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e1a8      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465c:	4b2b      	ldr	r3, [pc, #172]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004668:	4b28      	ldr	r3, [pc, #160]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4925      	ldr	r1, [pc, #148]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 8004678:	4313      	orrs	r3, r2
 800467a:	600b      	str	r3, [r1, #0]
 800467c:	e015      	b.n	80046aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800467e:	4b24      	ldr	r3, [pc, #144]	@ (8004710 <HAL_RCC_OscConfig+0x244>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fc fd5c 	bl	8001140 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800468c:	f7fc fd58 	bl	8001140 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e187      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469e:	4b1b      	ldr	r3, [pc, #108]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d036      	beq.n	8004724 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d016      	beq.n	80046ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046be:	4b15      	ldr	r3, [pc, #84]	@ (8004714 <HAL_RCC_OscConfig+0x248>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fc fd3c 	bl	8001140 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046cc:	f7fc fd38 	bl	8001140 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e167      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046de:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <HAL_RCC_OscConfig+0x240>)
 80046e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x200>
 80046ea:	e01b      	b.n	8004724 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ec:	4b09      	ldr	r3, [pc, #36]	@ (8004714 <HAL_RCC_OscConfig+0x248>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f2:	f7fc fd25 	bl	8001140 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f8:	e00e      	b.n	8004718 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046fa:	f7fc fd21 	bl	8001140 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d907      	bls.n	8004718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e150      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
 800470c:	40023800 	.word	0x40023800
 8004710:	42470000 	.word	0x42470000
 8004714:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004718:	4b88      	ldr	r3, [pc, #544]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 800471a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1ea      	bne.n	80046fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8097 	beq.w	8004860 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004732:	2300      	movs	r3, #0
 8004734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004736:	4b81      	ldr	r3, [pc, #516]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10f      	bne.n	8004762 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	4b7d      	ldr	r3, [pc, #500]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	4a7c      	ldr	r2, [pc, #496]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 800474c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004750:	6413      	str	r3, [r2, #64]	@ 0x40
 8004752:	4b7a      	ldr	r3, [pc, #488]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475e:	2301      	movs	r3, #1
 8004760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004762:	4b77      	ldr	r3, [pc, #476]	@ (8004940 <HAL_RCC_OscConfig+0x474>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476a:	2b00      	cmp	r3, #0
 800476c:	d118      	bne.n	80047a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800476e:	4b74      	ldr	r3, [pc, #464]	@ (8004940 <HAL_RCC_OscConfig+0x474>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a73      	ldr	r2, [pc, #460]	@ (8004940 <HAL_RCC_OscConfig+0x474>)
 8004774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800477a:	f7fc fce1 	bl	8001140 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004782:	f7fc fcdd 	bl	8001140 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e10c      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004794:	4b6a      	ldr	r3, [pc, #424]	@ (8004940 <HAL_RCC_OscConfig+0x474>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d106      	bne.n	80047b6 <HAL_RCC_OscConfig+0x2ea>
 80047a8:	4b64      	ldr	r3, [pc, #400]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ac:	4a63      	ldr	r2, [pc, #396]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b4:	e01c      	b.n	80047f0 <HAL_RCC_OscConfig+0x324>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b05      	cmp	r3, #5
 80047bc:	d10c      	bne.n	80047d8 <HAL_RCC_OscConfig+0x30c>
 80047be:	4b5f      	ldr	r3, [pc, #380]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c2:	4a5e      	ldr	r2, [pc, #376]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 80047c4:	f043 0304 	orr.w	r3, r3, #4
 80047c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ca:	4b5c      	ldr	r3, [pc, #368]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ce:	4a5b      	ldr	r2, [pc, #364]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d6:	e00b      	b.n	80047f0 <HAL_RCC_OscConfig+0x324>
 80047d8:	4b58      	ldr	r3, [pc, #352]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047dc:	4a57      	ldr	r2, [pc, #348]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e4:	4b55      	ldr	r3, [pc, #340]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e8:	4a54      	ldr	r2, [pc, #336]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 80047ea:	f023 0304 	bic.w	r3, r3, #4
 80047ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d015      	beq.n	8004824 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f8:	f7fc fca2 	bl	8001140 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004800:	f7fc fc9e 	bl	8001140 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0cb      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004816:	4b49      	ldr	r3, [pc, #292]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0ee      	beq.n	8004800 <HAL_RCC_OscConfig+0x334>
 8004822:	e014      	b.n	800484e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004824:	f7fc fc8c 	bl	8001140 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482a:	e00a      	b.n	8004842 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482c:	f7fc fc88 	bl	8001140 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e0b5      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004842:	4b3e      	ldr	r3, [pc, #248]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1ee      	bne.n	800482c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d105      	bne.n	8004860 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004854:	4b39      	ldr	r3, [pc, #228]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	4a38      	ldr	r2, [pc, #224]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 800485a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800485e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 80a1 	beq.w	80049ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800486a:	4b34      	ldr	r3, [pc, #208]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b08      	cmp	r3, #8
 8004874:	d05c      	beq.n	8004930 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d141      	bne.n	8004902 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487e:	4b31      	ldr	r3, [pc, #196]	@ (8004944 <HAL_RCC_OscConfig+0x478>)
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004884:	f7fc fc5c 	bl	8001140 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800488c:	f7fc fc58 	bl	8001140 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e087      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489e:	4b27      	ldr	r3, [pc, #156]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69da      	ldr	r2, [r3, #28]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	019b      	lsls	r3, r3, #6
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	3b01      	subs	r3, #1
 80048c4:	041b      	lsls	r3, r3, #16
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	061b      	lsls	r3, r3, #24
 80048ce:	491b      	ldr	r1, [pc, #108]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004944 <HAL_RCC_OscConfig+0x478>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048da:	f7fc fc31 	bl	8001140 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e2:	f7fc fc2d 	bl	8001140 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e05c      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f4:	4b11      	ldr	r3, [pc, #68]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <HAL_RCC_OscConfig+0x416>
 8004900:	e054      	b.n	80049ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004902:	4b10      	ldr	r3, [pc, #64]	@ (8004944 <HAL_RCC_OscConfig+0x478>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004908:	f7fc fc1a 	bl	8001140 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004910:	f7fc fc16 	bl	8001140 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e045      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004922:	4b06      	ldr	r3, [pc, #24]	@ (800493c <HAL_RCC_OscConfig+0x470>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x444>
 800492e:	e03d      	b.n	80049ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d107      	bne.n	8004948 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e038      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
 800493c:	40023800 	.word	0x40023800
 8004940:	40007000 	.word	0x40007000
 8004944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004948:	4b1b      	ldr	r3, [pc, #108]	@ (80049b8 <HAL_RCC_OscConfig+0x4ec>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d028      	beq.n	80049a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d121      	bne.n	80049a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d11a      	bne.n	80049a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004978:	4013      	ands	r3, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800497e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004980:	4293      	cmp	r3, r2
 8004982:	d111      	bne.n	80049a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498e:	085b      	lsrs	r3, r3, #1
 8004990:	3b01      	subs	r3, #1
 8004992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d107      	bne.n	80049a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800

080049bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0cc      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049d0:	4b68      	ldr	r3, [pc, #416]	@ (8004b74 <HAL_RCC_ClockConfig+0x1b8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d90c      	bls.n	80049f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049de:	4b65      	ldr	r3, [pc, #404]	@ (8004b74 <HAL_RCC_ClockConfig+0x1b8>)
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	4b63      	ldr	r3, [pc, #396]	@ (8004b74 <HAL_RCC_ClockConfig+0x1b8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0b8      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d020      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a10:	4b59      	ldr	r3, [pc, #356]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	4a58      	ldr	r2, [pc, #352]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a28:	4b53      	ldr	r3, [pc, #332]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	4a52      	ldr	r2, [pc, #328]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a34:	4b50      	ldr	r3, [pc, #320]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	494d      	ldr	r1, [pc, #308]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d044      	beq.n	8004adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d107      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	4b47      	ldr	r3, [pc, #284]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d119      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e07f      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d003      	beq.n	8004a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d107      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e06f      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e067      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a9a:	4b37      	ldr	r3, [pc, #220]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f023 0203 	bic.w	r2, r3, #3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	4934      	ldr	r1, [pc, #208]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aac:	f7fc fb48 	bl	8001140 <HAL_GetTick>
 8004ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab2:	e00a      	b.n	8004aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab4:	f7fc fb44 	bl	8001140 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e04f      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aca:	4b2b      	ldr	r3, [pc, #172]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 020c 	and.w	r2, r3, #12
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d1eb      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004adc:	4b25      	ldr	r3, [pc, #148]	@ (8004b74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d20c      	bcs.n	8004b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aea:	4b22      	ldr	r3, [pc, #136]	@ (8004b74 <HAL_RCC_ClockConfig+0x1b8>)
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af2:	4b20      	ldr	r3, [pc, #128]	@ (8004b74 <HAL_RCC_ClockConfig+0x1b8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e032      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b10:	4b19      	ldr	r3, [pc, #100]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4916      	ldr	r1, [pc, #88]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b2e:	4b12      	ldr	r3, [pc, #72]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	490e      	ldr	r1, [pc, #56]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b42:	f000 f821 	bl	8004b88 <HAL_RCC_GetSysClockFreq>
 8004b46:	4602      	mov	r2, r0
 8004b48:	4b0b      	ldr	r3, [pc, #44]	@ (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	091b      	lsrs	r3, r3, #4
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	490a      	ldr	r1, [pc, #40]	@ (8004b7c <HAL_RCC_ClockConfig+0x1c0>)
 8004b54:	5ccb      	ldrb	r3, [r1, r3]
 8004b56:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5a:	4a09      	ldr	r2, [pc, #36]	@ (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b5e:	4b09      	ldr	r3, [pc, #36]	@ (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fc f998 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40023c00 	.word	0x40023c00
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	0800d880 	.word	0x0800d880
 8004b80:	20000000 	.word	0x20000000
 8004b84:	20000004 	.word	0x20000004

08004b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b8c:	b094      	sub	sp, #80	@ 0x50
 8004b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b94:	2300      	movs	r3, #0
 8004b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b98:	2300      	movs	r3, #0
 8004b9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ba0:	4b79      	ldr	r3, [pc, #484]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 030c 	and.w	r3, r3, #12
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d00d      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	f200 80e1 	bhi.w	8004d74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0x34>
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d003      	beq.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bba:	e0db      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bbc:	4b73      	ldr	r3, [pc, #460]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004bc0:	e0db      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bc2:	4b73      	ldr	r3, [pc, #460]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bc6:	e0d8      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d063      	beq.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bde:	4b6a      	ldr	r3, [pc, #424]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	099b      	lsrs	r3, r3, #6
 8004be4:	2200      	movs	r2, #0
 8004be6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004be8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	462b      	mov	r3, r5
 8004bfe:	f04f 0000 	mov.w	r0, #0
 8004c02:	f04f 0100 	mov.w	r1, #0
 8004c06:	0159      	lsls	r1, r3, #5
 8004c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c0c:	0150      	lsls	r0, r2, #5
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4621      	mov	r1, r4
 8004c14:	1a51      	subs	r1, r2, r1
 8004c16:	6139      	str	r1, [r7, #16]
 8004c18:	4629      	mov	r1, r5
 8004c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c2c:	4659      	mov	r1, fp
 8004c2e:	018b      	lsls	r3, r1, #6
 8004c30:	4651      	mov	r1, sl
 8004c32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c36:	4651      	mov	r1, sl
 8004c38:	018a      	lsls	r2, r1, #6
 8004c3a:	4651      	mov	r1, sl
 8004c3c:	ebb2 0801 	subs.w	r8, r2, r1
 8004c40:	4659      	mov	r1, fp
 8004c42:	eb63 0901 	sbc.w	r9, r3, r1
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c5a:	4690      	mov	r8, r2
 8004c5c:	4699      	mov	r9, r3
 8004c5e:	4623      	mov	r3, r4
 8004c60:	eb18 0303 	adds.w	r3, r8, r3
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	462b      	mov	r3, r5
 8004c68:	eb49 0303 	adc.w	r3, r9, r3
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	024b      	lsls	r3, r1, #9
 8004c7e:	4621      	mov	r1, r4
 8004c80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c84:	4621      	mov	r1, r4
 8004c86:	024a      	lsls	r2, r1, #9
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8e:	2200      	movs	r2, #0
 8004c90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c98:	f7fb faf2 	bl	8000280 <__aeabi_uldivmod>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ca4:	e058      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca6:	4b38      	ldr	r3, [pc, #224]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	099b      	lsrs	r3, r3, #6
 8004cac:	2200      	movs	r2, #0
 8004cae:	4618      	mov	r0, r3
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cb6:	623b      	str	r3, [r7, #32]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	f04f 0000 	mov.w	r0, #0
 8004cc8:	f04f 0100 	mov.w	r1, #0
 8004ccc:	0159      	lsls	r1, r3, #5
 8004cce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd2:	0150      	lsls	r0, r2, #5
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4641      	mov	r1, r8
 8004cda:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cde:	4649      	mov	r1, r9
 8004ce0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cf8:	ebb2 040a 	subs.w	r4, r2, sl
 8004cfc:	eb63 050b 	sbc.w	r5, r3, fp
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	00eb      	lsls	r3, r5, #3
 8004d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d0e:	00e2      	lsls	r2, r4, #3
 8004d10:	4614      	mov	r4, r2
 8004d12:	461d      	mov	r5, r3
 8004d14:	4643      	mov	r3, r8
 8004d16:	18e3      	adds	r3, r4, r3
 8004d18:	603b      	str	r3, [r7, #0]
 8004d1a:	464b      	mov	r3, r9
 8004d1c:	eb45 0303 	adc.w	r3, r5, r3
 8004d20:	607b      	str	r3, [r7, #4]
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d2e:	4629      	mov	r1, r5
 8004d30:	028b      	lsls	r3, r1, #10
 8004d32:	4621      	mov	r1, r4
 8004d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d38:	4621      	mov	r1, r4
 8004d3a:	028a      	lsls	r2, r1, #10
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d42:	2200      	movs	r2, #0
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	61fa      	str	r2, [r7, #28]
 8004d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d4c:	f7fb fa98 	bl	8000280 <__aeabi_uldivmod>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4613      	mov	r3, r2
 8004d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d58:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	3301      	adds	r3, #1
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004d68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d72:	e002      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d74:	4b05      	ldr	r3, [pc, #20]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3750      	adds	r7, #80	@ 0x50
 8004d80:	46bd      	mov	sp, r7
 8004d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	00f42400 	.word	0x00f42400
 8004d90:	007a1200 	.word	0x007a1200

08004d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d98:	4b03      	ldr	r3, [pc, #12]	@ (8004da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000000 	.word	0x20000000

08004dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004db0:	f7ff fff0 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	0a9b      	lsrs	r3, r3, #10
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4903      	ldr	r1, [pc, #12]	@ (8004dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	0800d890 	.word	0x0800d890

08004dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dd8:	f7ff ffdc 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	0b5b      	lsrs	r3, r3, #13
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	4903      	ldr	r1, [pc, #12]	@ (8004df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dea:	5ccb      	ldrb	r3, [r1, r3]
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40023800 	.word	0x40023800
 8004df8:	0800d890 	.word	0x0800d890

08004dfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	220f      	movs	r2, #15
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e0c:	4b12      	ldr	r3, [pc, #72]	@ (8004e58 <HAL_RCC_GetClockConfig+0x5c>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 0203 	and.w	r2, r3, #3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e18:	4b0f      	ldr	r3, [pc, #60]	@ (8004e58 <HAL_RCC_GetClockConfig+0x5c>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e24:	4b0c      	ldr	r3, [pc, #48]	@ (8004e58 <HAL_RCC_GetClockConfig+0x5c>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e30:	4b09      	ldr	r3, [pc, #36]	@ (8004e58 <HAL_RCC_GetClockConfig+0x5c>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	08db      	lsrs	r3, r3, #3
 8004e36:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e3e:	4b07      	ldr	r3, [pc, #28]	@ (8004e5c <HAL_RCC_GetClockConfig+0x60>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0207 	and.w	r2, r3, #7
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	601a      	str	r2, [r3, #0]
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	40023c00 	.word	0x40023c00

08004e60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d105      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d035      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e88:	4b62      	ldr	r3, [pc, #392]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e8e:	f7fc f957 	bl	8001140 <HAL_GetTick>
 8004e92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e96:	f7fc f953 	bl	8001140 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e0b0      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ea8:	4b5b      	ldr	r3, [pc, #364]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1f0      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	019a      	lsls	r2, r3, #6
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	071b      	lsls	r3, r3, #28
 8004ec0:	4955      	ldr	r1, [pc, #340]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ec8:	4b52      	ldr	r3, [pc, #328]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ece:	f7fc f937 	bl	8001140 <HAL_GetTick>
 8004ed2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ed6:	f7fc f933 	bl	8001140 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e090      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ee8:	4b4b      	ldr	r3, [pc, #300]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0f0      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8083 	beq.w	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	4b44      	ldr	r3, [pc, #272]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	4a43      	ldr	r2, [pc, #268]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f12:	4b41      	ldr	r3, [pc, #260]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a3e      	ldr	r2, [pc, #248]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f28:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f2a:	f7fc f909 	bl	8001140 <HAL_GetTick>
 8004f2e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f30:	e008      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f32:	f7fc f905 	bl	8001140 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e062      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f44:	4b35      	ldr	r3, [pc, #212]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f50:	4b31      	ldr	r3, [pc, #196]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f58:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d02f      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d028      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f76:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f78:	4b29      	ldr	r3, [pc, #164]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f7e:	4b28      	ldr	r3, [pc, #160]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f84:	4a24      	ldr	r2, [pc, #144]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f8a:	4b23      	ldr	r3, [pc, #140]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d114      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f96:	f7fc f8d3 	bl	8001140 <HAL_GetTick>
 8004f9a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9c:	e00a      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f9e:	f7fc f8cf 	bl	8001140 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e02a      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb4:	4b18      	ldr	r3, [pc, #96]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0ee      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fcc:	d10d      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004fce:	4b12      	ldr	r3, [pc, #72]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fe2:	490d      	ldr	r1, [pc, #52]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	608b      	str	r3, [r1, #8]
 8004fe8:	e005      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004fea:	4b0b      	ldr	r3, [pc, #44]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	4a0a      	ldr	r2, [pc, #40]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ff4:	6093      	str	r3, [r2, #8]
 8004ff6:	4b08      	ldr	r3, [pc, #32]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005002:	4905      	ldr	r1, [pc, #20]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005004:	4313      	orrs	r3, r2
 8005006:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	42470068 	.word	0x42470068
 8005018:	40023800 	.word	0x40023800
 800501c:	40007000 	.word	0x40007000
 8005020:	42470e40 	.word	0x42470e40

08005024 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d13f      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005042:	4b24      	ldr	r3, [pc, #144]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d006      	beq.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005058:	d12f      	bne.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800505a:	4b1f      	ldr	r3, [pc, #124]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800505c:	617b      	str	r3, [r7, #20]
          break;
 800505e:	e02f      	b.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005060:	4b1c      	ldr	r3, [pc, #112]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005068:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800506c:	d108      	bne.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800506e:	4b19      	ldr	r3, [pc, #100]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005076:	4a19      	ldr	r2, [pc, #100]	@ (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	e007      	b.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005080:	4b14      	ldr	r3, [pc, #80]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005088:	4a15      	ldr	r2, [pc, #84]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800508a:	fbb2 f3f3 	udiv	r3, r2, r3
 800508e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005090:	4b10      	ldr	r3, [pc, #64]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005096:	099b      	lsrs	r3, r3, #6
 8005098:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80050a4:	4b0b      	ldr	r3, [pc, #44]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050aa:	0f1b      	lsrs	r3, r3, #28
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b6:	617b      	str	r3, [r7, #20]
          break;
 80050b8:	e002      	b.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
          break;
 80050be:	bf00      	nop
        }
      }
      break;
 80050c0:	e000      	b.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80050c2:	bf00      	nop
    }
  }
  return frequency;
 80050c4:	697b      	ldr	r3, [r7, #20]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40023800 	.word	0x40023800
 80050d8:	00bb8000 	.word	0x00bb8000
 80050dc:	007a1200 	.word	0x007a1200
 80050e0:	00f42400 	.word	0x00f42400

080050e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e07b      	b.n	80051ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d108      	bne.n	8005110 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005106:	d009      	beq.n	800511c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	61da      	str	r2, [r3, #28]
 800510e:	e005      	b.n	800511c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fb fe1e 	bl	8000d78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005152:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a0:	ea42 0103 	orr.w	r1, r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	0c1b      	lsrs	r3, r3, #16
 80051ba:	f003 0104 	and.w	r1, r3, #4
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	f003 0210 	and.w	r2, r3, #16
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e041      	b.n	800528c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d106      	bne.n	8005222 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f839 	bl	8005294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2202      	movs	r2, #2
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3304      	adds	r3, #4
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f000 f9bf 	bl	80055b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d001      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e04e      	b.n	800535e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a23      	ldr	r2, [pc, #140]	@ (800536c <HAL_TIM_Base_Start_IT+0xc4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d022      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0x80>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ea:	d01d      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0x80>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005370 <HAL_TIM_Base_Start_IT+0xc8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d018      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0x80>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005374 <HAL_TIM_Base_Start_IT+0xcc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d013      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0x80>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a1c      	ldr	r2, [pc, #112]	@ (8005378 <HAL_TIM_Base_Start_IT+0xd0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00e      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0x80>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a1b      	ldr	r2, [pc, #108]	@ (800537c <HAL_TIM_Base_Start_IT+0xd4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d009      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0x80>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a19      	ldr	r2, [pc, #100]	@ (8005380 <HAL_TIM_Base_Start_IT+0xd8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d004      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0x80>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a18      	ldr	r2, [pc, #96]	@ (8005384 <HAL_TIM_Base_Start_IT+0xdc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d111      	bne.n	800534c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b06      	cmp	r3, #6
 8005338:	d010      	beq.n	800535c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534a:	e007      	b.n	800535c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40010000 	.word	0x40010000
 8005370:	40000400 	.word	0x40000400
 8005374:	40000800 	.word	0x40000800
 8005378:	40000c00 	.word	0x40000c00
 800537c:	40010400 	.word	0x40010400
 8005380:	40014000 	.word	0x40014000
 8005384:	40001800 	.word	0x40001800

08005388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d020      	beq.n	80053ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01b      	beq.n	80053ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0202 	mvn.w	r2, #2
 80053bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f8d2 	bl	800557c <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8c4 	bl	8005568 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f8d5 	bl	8005590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d020      	beq.n	8005438 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d01b      	beq.n	8005438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0204 	mvn.w	r2, #4
 8005408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2202      	movs	r2, #2
 800540e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f8ac 	bl	800557c <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f89e 	bl	8005568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f8af 	bl	8005590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d020      	beq.n	8005484 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01b      	beq.n	8005484 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0208 	mvn.w	r2, #8
 8005454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2204      	movs	r2, #4
 800545a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f886 	bl	800557c <HAL_TIM_IC_CaptureCallback>
 8005470:	e005      	b.n	800547e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f878 	bl	8005568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f889 	bl	8005590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f003 0310 	and.w	r3, r3, #16
 800548a:	2b00      	cmp	r3, #0
 800548c:	d020      	beq.n	80054d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 0310 	and.w	r3, r3, #16
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01b      	beq.n	80054d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0210 	mvn.w	r2, #16
 80054a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2208      	movs	r2, #8
 80054a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f860 	bl	800557c <HAL_TIM_IC_CaptureCallback>
 80054bc:	e005      	b.n	80054ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f852 	bl	8005568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f863 	bl	8005590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00c      	beq.n	80054f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d007      	beq.n	80054f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0201 	mvn.w	r2, #1
 80054ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fb fb36 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00c      	beq.n	8005518 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f906 	bl	8005724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00c      	beq.n	800553c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d007      	beq.n	800553c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f834 	bl	80055a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00c      	beq.n	8005560 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b00      	cmp	r3, #0
 800554e:	d007      	beq.n	8005560 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0220 	mvn.w	r2, #32
 8005558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f8d8 	bl	8005710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005560:	bf00      	nop
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a46      	ldr	r2, [pc, #280]	@ (80056e4 <TIM_Base_SetConfig+0x12c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055d6:	d00f      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a43      	ldr	r2, [pc, #268]	@ (80056e8 <TIM_Base_SetConfig+0x130>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00b      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a42      	ldr	r2, [pc, #264]	@ (80056ec <TIM_Base_SetConfig+0x134>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a41      	ldr	r2, [pc, #260]	@ (80056f0 <TIM_Base_SetConfig+0x138>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a40      	ldr	r2, [pc, #256]	@ (80056f4 <TIM_Base_SetConfig+0x13c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d108      	bne.n	800560a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a35      	ldr	r2, [pc, #212]	@ (80056e4 <TIM_Base_SetConfig+0x12c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d02b      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005618:	d027      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a32      	ldr	r2, [pc, #200]	@ (80056e8 <TIM_Base_SetConfig+0x130>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d023      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a31      	ldr	r2, [pc, #196]	@ (80056ec <TIM_Base_SetConfig+0x134>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01f      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a30      	ldr	r2, [pc, #192]	@ (80056f0 <TIM_Base_SetConfig+0x138>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01b      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a2f      	ldr	r2, [pc, #188]	@ (80056f4 <TIM_Base_SetConfig+0x13c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d017      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a2e      	ldr	r2, [pc, #184]	@ (80056f8 <TIM_Base_SetConfig+0x140>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d013      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a2d      	ldr	r2, [pc, #180]	@ (80056fc <TIM_Base_SetConfig+0x144>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00f      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2c      	ldr	r2, [pc, #176]	@ (8005700 <TIM_Base_SetConfig+0x148>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00b      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a2b      	ldr	r2, [pc, #172]	@ (8005704 <TIM_Base_SetConfig+0x14c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d007      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a2a      	ldr	r2, [pc, #168]	@ (8005708 <TIM_Base_SetConfig+0x150>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a29      	ldr	r2, [pc, #164]	@ (800570c <TIM_Base_SetConfig+0x154>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d108      	bne.n	800567c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a10      	ldr	r2, [pc, #64]	@ (80056e4 <TIM_Base_SetConfig+0x12c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_Base_SetConfig+0xf8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a12      	ldr	r2, [pc, #72]	@ (80056f4 <TIM_Base_SetConfig+0x13c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d103      	bne.n	80056b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d105      	bne.n	80056d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f023 0201 	bic.w	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	611a      	str	r2, [r3, #16]
  }
}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800
 80056f0:	40000c00 	.word	0x40000c00
 80056f4:	40010400 	.word	0x40010400
 80056f8:	40014000 	.word	0x40014000
 80056fc:	40014400 	.word	0x40014400
 8005700:	40014800 	.word	0x40014800
 8005704:	40001800 	.word	0x40001800
 8005708:	40001c00 	.word	0x40001c00
 800570c:	40002000 	.word	0x40002000

08005710 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e042      	b.n	80057d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fb fb52 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2224      	movs	r2, #36	@ 0x24
 8005768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800577a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f973 	bl	8005a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695a      	ldr	r2, [r3, #20]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	@ 0x28
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	4613      	mov	r3, r2
 80057e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d175      	bne.n	80058e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_UART_Transmit+0x2c>
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e06e      	b.n	80058e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2221      	movs	r2, #33	@ 0x21
 8005812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005816:	f7fb fc93 	bl	8001140 <HAL_GetTick>
 800581a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	88fa      	ldrh	r2, [r7, #6]
 8005820:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	88fa      	ldrh	r2, [r7, #6]
 8005826:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005830:	d108      	bne.n	8005844 <HAL_UART_Transmit+0x6c>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d104      	bne.n	8005844 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	e003      	b.n	800584c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005848:	2300      	movs	r3, #0
 800584a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800584c:	e02e      	b.n	80058ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2200      	movs	r2, #0
 8005856:	2180      	movs	r1, #128	@ 0x80
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f848 	bl	80058ee <UART_WaitOnFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e03a      	b.n	80058e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10b      	bne.n	800588e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005884:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	3302      	adds	r3, #2
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	e007      	b.n	800589e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	781a      	ldrb	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	3301      	adds	r3, #1
 800589c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1cb      	bne.n	800584e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2200      	movs	r2, #0
 80058be:	2140      	movs	r1, #64	@ 0x40
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 f814 	bl	80058ee <UART_WaitOnFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e006      	b.n	80058e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	e000      	b.n	80058e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80058e4:	2302      	movs	r3, #2
  }
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3720      	adds	r7, #32
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b086      	sub	sp, #24
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	603b      	str	r3, [r7, #0]
 80058fa:	4613      	mov	r3, r2
 80058fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fe:	e03b      	b.n	8005978 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005906:	d037      	beq.n	8005978 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005908:	f7fb fc1a 	bl	8001140 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	429a      	cmp	r2, r3
 8005916:	d302      	bcc.n	800591e <UART_WaitOnFlagUntilTimeout+0x30>
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e03a      	b.n	8005998 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d023      	beq.n	8005978 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b80      	cmp	r3, #128	@ 0x80
 8005934:	d020      	beq.n	8005978 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b40      	cmp	r3, #64	@ 0x40
 800593a:	d01d      	beq.n	8005978 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	2b08      	cmp	r3, #8
 8005948:	d116      	bne.n	8005978 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f81d 	bl	80059a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2208      	movs	r2, #8
 800596a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e00f      	b.n	8005998 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4013      	ands	r3, r2
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	429a      	cmp	r2, r3
 8005986:	bf0c      	ite	eq
 8005988:	2301      	moveq	r3, #1
 800598a:	2300      	movne	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	429a      	cmp	r2, r3
 8005994:	d0b4      	beq.n	8005900 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b095      	sub	sp, #84	@ 0x54
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	330c      	adds	r3, #12
 80059ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	330c      	adds	r3, #12
 80059c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80059ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e5      	bne.n	80059a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3314      	adds	r3, #20
 80059e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3314      	adds	r3, #20
 80059fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e5      	bne.n	80059dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d119      	bne.n	8005a4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	330c      	adds	r3, #12
 8005a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f023 0310 	bic.w	r3, r3, #16
 8005a2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	330c      	adds	r3, #12
 8005a36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a38:	61ba      	str	r2, [r7, #24]
 8005a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6979      	ldr	r1, [r7, #20]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	613b      	str	r3, [r7, #16]
   return(result);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e5      	bne.n	8005a18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a5a:	bf00      	nop
 8005a5c:	3754      	adds	r7, #84	@ 0x54
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
	...

08005a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a6c:	b0c0      	sub	sp, #256	@ 0x100
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a84:	68d9      	ldr	r1, [r3, #12]
 8005a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	ea40 0301 	orr.w	r3, r0, r1
 8005a90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ac0:	f021 010c 	bic.w	r1, r1, #12
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae2:	6999      	ldr	r1, [r3, #24]
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	ea40 0301 	orr.w	r3, r0, r1
 8005aee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b8f      	ldr	r3, [pc, #572]	@ (8005d34 <UART_SetConfig+0x2cc>)
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d005      	beq.n	8005b08 <UART_SetConfig+0xa0>
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b8d      	ldr	r3, [pc, #564]	@ (8005d38 <UART_SetConfig+0x2d0>)
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d104      	bne.n	8005b12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b08:	f7ff f964 	bl	8004dd4 <HAL_RCC_GetPCLK2Freq>
 8005b0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b10:	e003      	b.n	8005b1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b12:	f7ff f94b 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8005b16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b24:	f040 810c 	bne.w	8005d40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	462b      	mov	r3, r5
 8005b3e:	1891      	adds	r1, r2, r2
 8005b40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b42:	415b      	adcs	r3, r3
 8005b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	eb12 0801 	adds.w	r8, r2, r1
 8005b50:	4629      	mov	r1, r5
 8005b52:	eb43 0901 	adc.w	r9, r3, r1
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b6a:	4690      	mov	r8, r2
 8005b6c:	4699      	mov	r9, r3
 8005b6e:	4623      	mov	r3, r4
 8005b70:	eb18 0303 	adds.w	r3, r8, r3
 8005b74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b78:	462b      	mov	r3, r5
 8005b7a:	eb49 0303 	adc.w	r3, r9, r3
 8005b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b96:	460b      	mov	r3, r1
 8005b98:	18db      	adds	r3, r3, r3
 8005b9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	eb42 0303 	adc.w	r3, r2, r3
 8005ba2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ba4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ba8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005bac:	f7fa fb68 	bl	8000280 <__aeabi_uldivmod>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4b61      	ldr	r3, [pc, #388]	@ (8005d3c <UART_SetConfig+0x2d4>)
 8005bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	011c      	lsls	r4, r3, #4
 8005bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bc8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005bcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	1891      	adds	r1, r2, r2
 8005bd6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005bd8:	415b      	adcs	r3, r3
 8005bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005be0:	4641      	mov	r1, r8
 8005be2:	eb12 0a01 	adds.w	sl, r2, r1
 8005be6:	4649      	mov	r1, r9
 8005be8:	eb43 0b01 	adc.w	fp, r3, r1
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c00:	4692      	mov	sl, r2
 8005c02:	469b      	mov	fp, r3
 8005c04:	4643      	mov	r3, r8
 8005c06:	eb1a 0303 	adds.w	r3, sl, r3
 8005c0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c0e:	464b      	mov	r3, r9
 8005c10:	eb4b 0303 	adc.w	r3, fp, r3
 8005c14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	18db      	adds	r3, r3, r3
 8005c30:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c32:	4613      	mov	r3, r2
 8005c34:	eb42 0303 	adc.w	r3, r2, r3
 8005c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c42:	f7fa fb1d 	bl	8000280 <__aeabi_uldivmod>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d3c <UART_SetConfig+0x2d4>)
 8005c4e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	2264      	movs	r2, #100	@ 0x64
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	1acb      	subs	r3, r1, r3
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c62:	4b36      	ldr	r3, [pc, #216]	@ (8005d3c <UART_SetConfig+0x2d4>)
 8005c64:	fba3 2302 	umull	r2, r3, r3, r2
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c70:	441c      	add	r4, r3
 8005c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c84:	4642      	mov	r2, r8
 8005c86:	464b      	mov	r3, r9
 8005c88:	1891      	adds	r1, r2, r2
 8005c8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c8c:	415b      	adcs	r3, r3
 8005c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c94:	4641      	mov	r1, r8
 8005c96:	1851      	adds	r1, r2, r1
 8005c98:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	414b      	adcs	r3, r1
 8005c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005cac:	4659      	mov	r1, fp
 8005cae:	00cb      	lsls	r3, r1, #3
 8005cb0:	4651      	mov	r1, sl
 8005cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cb6:	4651      	mov	r1, sl
 8005cb8:	00ca      	lsls	r2, r1, #3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4642      	mov	r2, r8
 8005cc2:	189b      	adds	r3, r3, r2
 8005cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cc8:	464b      	mov	r3, r9
 8005cca:	460a      	mov	r2, r1
 8005ccc:	eb42 0303 	adc.w	r3, r2, r3
 8005cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ce0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ce4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ce8:	460b      	mov	r3, r1
 8005cea:	18db      	adds	r3, r3, r3
 8005cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cee:	4613      	mov	r3, r2
 8005cf0:	eb42 0303 	adc.w	r3, r2, r3
 8005cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005cfe:	f7fa fabf 	bl	8000280 <__aeabi_uldivmod>
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	4b0d      	ldr	r3, [pc, #52]	@ (8005d3c <UART_SetConfig+0x2d4>)
 8005d08:	fba3 1302 	umull	r1, r3, r3, r2
 8005d0c:	095b      	lsrs	r3, r3, #5
 8005d0e:	2164      	movs	r1, #100	@ 0x64
 8005d10:	fb01 f303 	mul.w	r3, r1, r3
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	3332      	adds	r3, #50	@ 0x32
 8005d1a:	4a08      	ldr	r2, [pc, #32]	@ (8005d3c <UART_SetConfig+0x2d4>)
 8005d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d20:	095b      	lsrs	r3, r3, #5
 8005d22:	f003 0207 	and.w	r2, r3, #7
 8005d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4422      	add	r2, r4
 8005d2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d30:	e106      	b.n	8005f40 <UART_SetConfig+0x4d8>
 8005d32:	bf00      	nop
 8005d34:	40011000 	.word	0x40011000
 8005d38:	40011400 	.word	0x40011400
 8005d3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d44:	2200      	movs	r2, #0
 8005d46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d52:	4642      	mov	r2, r8
 8005d54:	464b      	mov	r3, r9
 8005d56:	1891      	adds	r1, r2, r2
 8005d58:	6239      	str	r1, [r7, #32]
 8005d5a:	415b      	adcs	r3, r3
 8005d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d62:	4641      	mov	r1, r8
 8005d64:	1854      	adds	r4, r2, r1
 8005d66:	4649      	mov	r1, r9
 8005d68:	eb43 0501 	adc.w	r5, r3, r1
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	00eb      	lsls	r3, r5, #3
 8005d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d7a:	00e2      	lsls	r2, r4, #3
 8005d7c:	4614      	mov	r4, r2
 8005d7e:	461d      	mov	r5, r3
 8005d80:	4643      	mov	r3, r8
 8005d82:	18e3      	adds	r3, r4, r3
 8005d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d88:	464b      	mov	r3, r9
 8005d8a:	eb45 0303 	adc.w	r3, r5, r3
 8005d8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005da2:	f04f 0200 	mov.w	r2, #0
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005dae:	4629      	mov	r1, r5
 8005db0:	008b      	lsls	r3, r1, #2
 8005db2:	4621      	mov	r1, r4
 8005db4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005db8:	4621      	mov	r1, r4
 8005dba:	008a      	lsls	r2, r1, #2
 8005dbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005dc0:	f7fa fa5e 	bl	8000280 <__aeabi_uldivmod>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4b60      	ldr	r3, [pc, #384]	@ (8005f4c <UART_SetConfig+0x4e4>)
 8005dca:	fba3 2302 	umull	r2, r3, r3, r2
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	011c      	lsls	r4, r3, #4
 8005dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ddc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005de0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005de4:	4642      	mov	r2, r8
 8005de6:	464b      	mov	r3, r9
 8005de8:	1891      	adds	r1, r2, r2
 8005dea:	61b9      	str	r1, [r7, #24]
 8005dec:	415b      	adcs	r3, r3
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005df4:	4641      	mov	r1, r8
 8005df6:	1851      	adds	r1, r2, r1
 8005df8:	6139      	str	r1, [r7, #16]
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	414b      	adcs	r3, r1
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e0c:	4659      	mov	r1, fp
 8005e0e:	00cb      	lsls	r3, r1, #3
 8005e10:	4651      	mov	r1, sl
 8005e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e16:	4651      	mov	r1, sl
 8005e18:	00ca      	lsls	r2, r1, #3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4603      	mov	r3, r0
 8005e20:	4642      	mov	r2, r8
 8005e22:	189b      	adds	r3, r3, r2
 8005e24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e28:	464b      	mov	r3, r9
 8005e2a:	460a      	mov	r2, r1
 8005e2c:	eb42 0303 	adc.w	r3, r2, r3
 8005e30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e40:	f04f 0200 	mov.w	r2, #0
 8005e44:	f04f 0300 	mov.w	r3, #0
 8005e48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	008b      	lsls	r3, r1, #2
 8005e50:	4641      	mov	r1, r8
 8005e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e56:	4641      	mov	r1, r8
 8005e58:	008a      	lsls	r2, r1, #2
 8005e5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e5e:	f7fa fa0f 	bl	8000280 <__aeabi_uldivmod>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4611      	mov	r1, r2
 8005e68:	4b38      	ldr	r3, [pc, #224]	@ (8005f4c <UART_SetConfig+0x4e4>)
 8005e6a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	2264      	movs	r2, #100	@ 0x64
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
 8005e76:	1acb      	subs	r3, r1, r3
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	3332      	adds	r3, #50	@ 0x32
 8005e7c:	4a33      	ldr	r2, [pc, #204]	@ (8005f4c <UART_SetConfig+0x4e4>)
 8005e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e88:	441c      	add	r4, r3
 8005e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e8e:	2200      	movs	r2, #0
 8005e90:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e92:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e98:	4642      	mov	r2, r8
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	1891      	adds	r1, r2, r2
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	415b      	adcs	r3, r3
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ea8:	4641      	mov	r1, r8
 8005eaa:	1851      	adds	r1, r2, r1
 8005eac:	6039      	str	r1, [r7, #0]
 8005eae:	4649      	mov	r1, r9
 8005eb0:	414b      	adcs	r3, r1
 8005eb2:	607b      	str	r3, [r7, #4]
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	f04f 0300 	mov.w	r3, #0
 8005ebc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ec0:	4659      	mov	r1, fp
 8005ec2:	00cb      	lsls	r3, r1, #3
 8005ec4:	4651      	mov	r1, sl
 8005ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eca:	4651      	mov	r1, sl
 8005ecc:	00ca      	lsls	r2, r1, #3
 8005ece:	4610      	mov	r0, r2
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	189b      	adds	r3, r3, r2
 8005ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eda:	464b      	mov	r3, r9
 8005edc:	460a      	mov	r2, r1
 8005ede:	eb42 0303 	adc.w	r3, r2, r3
 8005ee2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	663b      	str	r3, [r7, #96]	@ 0x60
 8005eee:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005efc:	4649      	mov	r1, r9
 8005efe:	008b      	lsls	r3, r1, #2
 8005f00:	4641      	mov	r1, r8
 8005f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f06:	4641      	mov	r1, r8
 8005f08:	008a      	lsls	r2, r1, #2
 8005f0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f0e:	f7fa f9b7 	bl	8000280 <__aeabi_uldivmod>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4b0d      	ldr	r3, [pc, #52]	@ (8005f4c <UART_SetConfig+0x4e4>)
 8005f18:	fba3 1302 	umull	r1, r3, r3, r2
 8005f1c:	095b      	lsrs	r3, r3, #5
 8005f1e:	2164      	movs	r1, #100	@ 0x64
 8005f20:	fb01 f303 	mul.w	r3, r1, r3
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	3332      	adds	r3, #50	@ 0x32
 8005f2a:	4a08      	ldr	r2, [pc, #32]	@ (8005f4c <UART_SetConfig+0x4e4>)
 8005f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f30:	095b      	lsrs	r3, r3, #5
 8005f32:	f003 020f 	and.w	r2, r3, #15
 8005f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4422      	add	r2, r4
 8005f3e:	609a      	str	r2, [r3, #8]
}
 8005f40:	bf00      	nop
 8005f42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f46:	46bd      	mov	sp, r7
 8005f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f4c:	51eb851f 	.word	0x51eb851f

08005f50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f50:	b084      	sub	sp, #16
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	f107 001c 	add.w	r0, r7, #28
 8005f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f62:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d123      	bne.n	8005fb2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d105      	bne.n	8005fa6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f9dc 	bl	8006364 <USB_CoreReset>
 8005fac:	4603      	mov	r3, r0
 8005fae:	73fb      	strb	r3, [r7, #15]
 8005fb0:	e01b      	b.n	8005fea <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f9d0 	bl	8006364 <USB_CoreReset>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fc8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d106      	bne.n	8005fde <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	639a      	str	r2, [r3, #56]	@ 0x38
 8005fdc:	e005      	b.n	8005fea <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005fea:	7fbb      	ldrb	r3, [r7, #30]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d10b      	bne.n	8006008 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f043 0206 	orr.w	r2, r3, #6
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f043 0220 	orr.w	r2, r3, #32
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006014:	b004      	add	sp, #16
 8006016:	4770      	bx	lr

08006018 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f043 0201 	orr.w	r2, r3, #1
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f023 0201 	bic.w	r2, r3, #1
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d115      	bne.n	80060aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800608a:	200a      	movs	r0, #10
 800608c:	f7fb f864 	bl	8001158 <HAL_Delay>
      ms += 10U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	330a      	adds	r3, #10
 8006094:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f956 	bl	8006348 <USB_GetMode>
 800609c:	4603      	mov	r3, r0
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d01e      	beq.n	80060e0 <USB_SetCurrentMode+0x84>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80060a6:	d9f0      	bls.n	800608a <USB_SetCurrentMode+0x2e>
 80060a8:	e01a      	b.n	80060e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d115      	bne.n	80060dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060bc:	200a      	movs	r0, #10
 80060be:	f7fb f84b 	bl	8001158 <HAL_Delay>
      ms += 10U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	330a      	adds	r3, #10
 80060c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f93d 	bl	8006348 <USB_GetMode>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <USB_SetCurrentMode+0x84>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80060d8:	d9f0      	bls.n	80060bc <USB_SetCurrentMode+0x60>
 80060da:	e001      	b.n	80060e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e005      	b.n	80060ec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2bc8      	cmp	r3, #200	@ 0xc8
 80060e4:	d101      	bne.n	80060ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	3301      	adds	r3, #1
 8006106:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800610e:	d901      	bls.n	8006114 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e01b      	b.n	800614c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	daf2      	bge.n	8006102 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	019b      	lsls	r3, r3, #6
 8006124:	f043 0220 	orr.w	r2, r3, #32
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3301      	adds	r3, #1
 8006130:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006138:	d901      	bls.n	800613e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e006      	b.n	800614c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b20      	cmp	r3, #32
 8006148:	d0f0      	beq.n	800612c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3301      	adds	r3, #1
 8006168:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006170:	d901      	bls.n	8006176 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e018      	b.n	80061a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	daf2      	bge.n	8006164 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2210      	movs	r2, #16
 8006186:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3301      	adds	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006194:	d901      	bls.n	800619a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e006      	b.n	80061a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0310 	and.w	r3, r3, #16
 80061a2:	2b10      	cmp	r3, #16
 80061a4:	d0f0      	beq.n	8006188 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b089      	sub	sp, #36	@ 0x24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	4611      	mov	r1, r2
 80061c0:	461a      	mov	r2, r3
 80061c2:	460b      	mov	r3, r1
 80061c4:	71fb      	strb	r3, [r7, #7]
 80061c6:	4613      	mov	r3, r2
 80061c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80061d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d123      	bne.n	8006222 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80061da:	88bb      	ldrh	r3, [r7, #4]
 80061dc:	3303      	adds	r3, #3
 80061de:	089b      	lsrs	r3, r3, #2
 80061e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80061e2:	2300      	movs	r3, #0
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	e018      	b.n	800621a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80061e8:	79fb      	ldrb	r3, [r7, #7]
 80061ea:	031a      	lsls	r2, r3, #12
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061f4:	461a      	mov	r2, r3
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	3301      	adds	r3, #1
 8006200:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	3301      	adds	r3, #1
 8006206:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	3301      	adds	r3, #1
 800620c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	3301      	adds	r3, #1
 8006212:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	3301      	adds	r3, #1
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	429a      	cmp	r2, r3
 8006220:	d3e2      	bcc.n	80061e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3724      	adds	r7, #36	@ 0x24
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006230:	b480      	push	{r7}
 8006232:	b08b      	sub	sp, #44	@ 0x2c
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006246:	88fb      	ldrh	r3, [r7, #6]
 8006248:	089b      	lsrs	r3, r3, #2
 800624a:	b29b      	uxth	r3, r3
 800624c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800624e:	88fb      	ldrh	r3, [r7, #6]
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006256:	2300      	movs	r3, #0
 8006258:	623b      	str	r3, [r7, #32]
 800625a:	e014      	b.n	8006286 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	601a      	str	r2, [r3, #0]
    pDest++;
 8006268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626a:	3301      	adds	r3, #1
 800626c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	3301      	adds	r3, #1
 8006272:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	3301      	adds	r3, #1
 8006278:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	3301      	adds	r3, #1
 800627e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	3301      	adds	r3, #1
 8006284:	623b      	str	r3, [r7, #32]
 8006286:	6a3a      	ldr	r2, [r7, #32]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	429a      	cmp	r2, r3
 800628c:	d3e6      	bcc.n	800625c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800628e:	8bfb      	ldrh	r3, [r7, #30]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01e      	beq.n	80062d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800629e:	461a      	mov	r2, r3
 80062a0:	f107 0310 	add.w	r3, r7, #16
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	701a      	strb	r2, [r3, #0]
      i++;
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	3301      	adds	r3, #1
 80062be:	623b      	str	r3, [r7, #32]
      pDest++;
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	3301      	adds	r3, #1
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80062c6:	8bfb      	ldrh	r3, [r7, #30]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062cc:	8bfb      	ldrh	r3, [r7, #30]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1ea      	bne.n	80062a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	372c      	adds	r7, #44	@ 0x2c
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4013      	ands	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062f8:	68fb      	ldr	r3, [r7, #12]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	460b      	mov	r3, r1
 8006310:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006326:	78fb      	ldrb	r3, [r7, #3]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	4013      	ands	r3, r2
 8006338:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800633a:	68bb      	ldr	r3, [r7, #8]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	f003 0301 	and.w	r3, r3, #1
}
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3301      	adds	r3, #1
 8006374:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800637c:	d901      	bls.n	8006382 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e01b      	b.n	80063ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	daf2      	bge.n	8006370 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f043 0201 	orr.w	r2, r3, #1
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3301      	adds	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063a6:	d901      	bls.n	80063ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e006      	b.n	80063ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d0f0      	beq.n	800639a <USB_CoreReset+0x36>

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
	...

080063c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063c8:	b084      	sub	sp, #16
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b086      	sub	sp, #24
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80063d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063e8:	461a      	mov	r2, r3
 80063ea:	2300      	movs	r3, #0
 80063ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d119      	bne.n	8006452 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800641e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006422:	2b01      	cmp	r3, #1
 8006424:	d10a      	bne.n	800643c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006434:	f043 0304 	orr.w	r3, r3, #4
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	e014      	b.n	8006466 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800644a:	f023 0304 	bic.w	r3, r3, #4
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	e009      	b.n	8006466 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006460:	f023 0304 	bic.w	r3, r3, #4
 8006464:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006466:	2110      	movs	r1, #16
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff fe43 	bl	80060f4 <USB_FlushTxFifo>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff fe6d 	bl	8006158 <USB_FlushRxFifo>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006488:	2300      	movs	r3, #0
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	e015      	b.n	80064ba <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4413      	add	r3, r2
 8006496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800649a:	461a      	mov	r2, r3
 800649c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064a0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ae:	461a      	mov	r2, r3
 80064b0:	2300      	movs	r3, #0
 80064b2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	3301      	adds	r3, #1
 80064b8:	613b      	str	r3, [r7, #16]
 80064ba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064be:	461a      	mov	r2, r3
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d3e3      	bcc.n	800648e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064d2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a18      	ldr	r2, [pc, #96]	@ (8006538 <USB_HostInit+0x170>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d10b      	bne.n	80064f4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064e2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a15      	ldr	r2, [pc, #84]	@ (800653c <USB_HostInit+0x174>)
 80064e8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a14      	ldr	r2, [pc, #80]	@ (8006540 <USB_HostInit+0x178>)
 80064ee:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80064f2:	e009      	b.n	8006508 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2280      	movs	r2, #128	@ 0x80
 80064f8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a11      	ldr	r2, [pc, #68]	@ (8006544 <USB_HostInit+0x17c>)
 80064fe:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a11      	ldr	r2, [pc, #68]	@ (8006548 <USB_HostInit+0x180>)
 8006504:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006508:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800650c:	2b00      	cmp	r3, #0
 800650e:	d105      	bne.n	800651c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	f043 0210 	orr.w	r2, r3, #16
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	699a      	ldr	r2, [r3, #24]
 8006520:	4b0a      	ldr	r3, [pc, #40]	@ (800654c <USB_HostInit+0x184>)
 8006522:	4313      	orrs	r3, r2
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006528:	7dfb      	ldrb	r3, [r7, #23]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006534:	b004      	add	sp, #16
 8006536:	4770      	bx	lr
 8006538:	40040000 	.word	0x40040000
 800653c:	01000200 	.word	0x01000200
 8006540:	00e00300 	.word	0x00e00300
 8006544:	00600080 	.word	0x00600080
 8006548:	004000e0 	.word	0x004000e0
 800654c:	a3200008 	.word	0xa3200008

08006550 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	68f9      	ldr	r1, [r7, #12]
 8006584:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006588:	4313      	orrs	r3, r2
 800658a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d107      	bne.n	80065a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006598:	461a      	mov	r2, r3
 800659a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800659e:	6053      	str	r3, [r2, #4]
 80065a0:	e00c      	b.n	80065bc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80065a2:	78fb      	ldrb	r3, [r7, #3]
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d107      	bne.n	80065b8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065ae:	461a      	mov	r2, r3
 80065b0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80065b4:	6053      	str	r3, [r2, #4]
 80065b6:	e001      	b.n	80065bc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80065ea:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80065f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065f8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80065fa:	2064      	movs	r0, #100	@ 0x64
 80065fc:	f7fa fdac 	bl	8001158 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800660c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800660e:	200a      	movs	r0, #10
 8006610:	f7fa fda2 	bl	8001158 <HAL_Delay>

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800661e:	b480      	push	{r7}
 8006620:	b085      	sub	sp, #20
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	460b      	mov	r3, r1
 8006628:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006642:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d109      	bne.n	8006662 <USB_DriveVbus+0x44>
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d106      	bne.n	8006662 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800665c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006660:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800666c:	d109      	bne.n	8006682 <USB_DriveVbus+0x64>
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d106      	bne.n	8006682 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800667c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006680:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	0c5b      	lsrs	r3, r3, #17
 80066ae:	f003 0303 	and.w	r3, r3, #3
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	b29b      	uxth	r3, r3
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	4608      	mov	r0, r1
 80066ea:	4611      	mov	r1, r2
 80066ec:	461a      	mov	r2, r3
 80066ee:	4603      	mov	r3, r0
 80066f0:	70fb      	strb	r3, [r7, #3]
 80066f2:	460b      	mov	r3, r1
 80066f4:	70bb      	strb	r3, [r7, #2]
 80066f6:	4613      	mov	r3, r2
 80066f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	4413      	add	r3, r2
 800670a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800670e:	461a      	mov	r2, r3
 8006710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006714:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006716:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800671a:	2b03      	cmp	r3, #3
 800671c:	d87c      	bhi.n	8006818 <USB_HC_Init+0x138>
 800671e:	a201      	add	r2, pc, #4	@ (adr r2, 8006724 <USB_HC_Init+0x44>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	08006735 	.word	0x08006735
 8006728:	080067db 	.word	0x080067db
 800672c:	08006735 	.word	0x08006735
 8006730:	0800679d 	.word	0x0800679d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	4413      	add	r3, r2
 800673c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006740:	461a      	mov	r2, r3
 8006742:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006746:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006748:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800674c:	2b00      	cmp	r3, #0
 800674e:	da10      	bge.n	8006772 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	4413      	add	r3, r2
 8006758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	78fa      	ldrb	r2, [r7, #3]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	440a      	add	r2, r1
 8006766:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800676a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800676e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006770:	e055      	b.n	800681e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a6f      	ldr	r2, [pc, #444]	@ (8006934 <USB_HC_Init+0x254>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d151      	bne.n	800681e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	4413      	add	r3, r2
 8006782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	78fa      	ldrb	r2, [r7, #3]
 800678a:	0151      	lsls	r1, r2, #5
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	440a      	add	r2, r1
 8006790:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006794:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006798:	60d3      	str	r3, [r2, #12]
      break;
 800679a:	e040      	b.n	800681e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a8:	461a      	mov	r2, r3
 80067aa:	f240 639d 	movw	r3, #1693	@ 0x69d
 80067ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80067b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	da34      	bge.n	8006822 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067b8:	78fb      	ldrb	r3, [r7, #3]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	78fa      	ldrb	r2, [r7, #3]
 80067c8:	0151      	lsls	r1, r2, #5
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	440a      	add	r2, r1
 80067ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80067d8:	e023      	b.n	8006822 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067e6:	461a      	mov	r2, r3
 80067e8:	f240 2325 	movw	r3, #549	@ 0x225
 80067ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80067ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	da17      	bge.n	8006826 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	78fa      	ldrb	r2, [r7, #3]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	440a      	add	r2, r1
 800680c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006810:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006814:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006816:	e006      	b.n	8006826 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	77fb      	strb	r3, [r7, #31]
      break;
 800681c:	e004      	b.n	8006828 <USB_HC_Init+0x148>
      break;
 800681e:	bf00      	nop
 8006820:	e002      	b.n	8006828 <USB_HC_Init+0x148>
      break;
 8006822:	bf00      	nop
 8006824:	e000      	b.n	8006828 <USB_HC_Init+0x148>
      break;
 8006826:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006828:	78fb      	ldrb	r3, [r7, #3]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	4413      	add	r3, r2
 8006830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006834:	461a      	mov	r2, r3
 8006836:	2300      	movs	r3, #0
 8006838:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	4413      	add	r3, r2
 8006842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	78fa      	ldrb	r2, [r7, #3]
 800684a:	0151      	lsls	r1, r2, #5
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	440a      	add	r2, r1
 8006850:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006854:	f043 0302 	orr.w	r3, r3, #2
 8006858:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	2101      	movs	r1, #1
 800686a:	fa01 f303 	lsl.w	r3, r1, r3
 800686e:	6939      	ldr	r1, [r7, #16]
 8006870:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006874:	4313      	orrs	r3, r2
 8006876:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006884:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006888:	2b00      	cmp	r3, #0
 800688a:	da03      	bge.n	8006894 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800688c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	e001      	b.n	8006898 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff fef9 	bl	8006690 <USB_GetHostSpeed>
 800689e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80068a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d106      	bne.n	80068b6 <USB_HC_Init+0x1d6>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d003      	beq.n	80068b6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80068ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	e001      	b.n	80068ba <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068ba:	787b      	ldrb	r3, [r7, #1]
 80068bc:	059b      	lsls	r3, r3, #22
 80068be:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80068c2:	78bb      	ldrb	r3, [r7, #2]
 80068c4:	02db      	lsls	r3, r3, #11
 80068c6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068ca:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80068cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80068d0:	049b      	lsls	r3, r3, #18
 80068d2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80068d6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80068d8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80068da:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80068de:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068e8:	78fa      	ldrb	r2, [r7, #3]
 80068ea:	0151      	lsls	r1, r2, #5
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	440a      	add	r2, r1
 80068f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80068f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068f8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80068fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d003      	beq.n	800690a <USB_HC_Init+0x22a>
 8006902:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006906:	2b01      	cmp	r3, #1
 8006908:	d10f      	bne.n	800692a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4413      	add	r3, r2
 8006912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	78fa      	ldrb	r2, [r7, #3]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	440a      	add	r2, r1
 8006920:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006924:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006928:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800692a:	7ffb      	ldrb	r3, [r7, #31]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3720      	adds	r7, #32
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40040000 	.word	0x40040000

08006938 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08c      	sub	sp, #48	@ 0x30
 800693c:	af02      	add	r7, sp, #8
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	4613      	mov	r3, r2
 8006944:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	785b      	ldrb	r3, [r3, #1]
 800694e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006950:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006954:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4a5d      	ldr	r2, [pc, #372]	@ (8006ad0 <USB_HC_StartXfer+0x198>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d12f      	bne.n	80069be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d11c      	bne.n	800699e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	7c9b      	ldrb	r3, [r3, #18]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <USB_HC_StartXfer+0x3c>
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	7c9b      	ldrb	r3, [r3, #18]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d124      	bne.n	80069be <USB_HC_StartXfer+0x86>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	799b      	ldrb	r3, [r3, #6]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d120      	bne.n	80069be <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	4413      	add	r3, r2
 8006984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	6a3a      	ldr	r2, [r7, #32]
 8006990:	440a      	add	r2, r1
 8006992:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699a:	60d3      	str	r3, [r2, #12]
 800699c:	e00f      	b.n	80069be <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	791b      	ldrb	r3, [r3, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10b      	bne.n	80069be <USB_HC_StartXfer+0x86>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	795b      	ldrb	r3, [r3, #5]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d107      	bne.n	80069be <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	785b      	ldrb	r3, [r3, #1]
 80069b2:	4619      	mov	r1, r3
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 fb6b 	bl	8007090 <USB_DoPing>
        return HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e232      	b.n	8006e24 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	799b      	ldrb	r3, [r3, #6]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d158      	bne.n	8006a78 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80069c6:	2301      	movs	r3, #1
 80069c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	78db      	ldrb	r3, [r3, #3]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d007      	beq.n	80069e2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80069d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	8a92      	ldrh	r2, [r2, #20]
 80069d8:	fb03 f202 	mul.w	r2, r3, r2
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	61da      	str	r2, [r3, #28]
 80069e0:	e07c      	b.n	8006adc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	7c9b      	ldrb	r3, [r3, #18]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d130      	bne.n	8006a4c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	2bbc      	cmp	r3, #188	@ 0xbc
 80069f0:	d918      	bls.n	8006a24 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	8a9b      	ldrh	r3, [r3, #20]
 80069f6:	461a      	mov	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d003      	beq.n	8006a14 <USB_HC_StartXfer+0xdc>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d103      	bne.n	8006a1c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2202      	movs	r2, #2
 8006a18:	60da      	str	r2, [r3, #12]
 8006a1a:	e05f      	b.n	8006adc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	60da      	str	r2, [r3, #12]
 8006a22:	e05b      	b.n	8006adc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	6a1a      	ldr	r2, [r3, #32]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d007      	beq.n	8006a44 <USB_HC_StartXfer+0x10c>
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d003      	beq.n	8006a44 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2204      	movs	r2, #4
 8006a40:	60da      	str	r2, [r3, #12]
 8006a42:	e04b      	b.n	8006adc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2203      	movs	r2, #3
 8006a48:	60da      	str	r2, [r3, #12]
 8006a4a:	e047      	b.n	8006adc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006a4c:	79fb      	ldrb	r3, [r7, #7]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d10d      	bne.n	8006a6e <USB_HC_StartXfer+0x136>
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	8a92      	ldrh	r2, [r2, #20]
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d907      	bls.n	8006a6e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	8a92      	ldrh	r2, [r2, #20]
 8006a64:	fb03 f202 	mul.w	r2, r3, r2
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	61da      	str	r2, [r3, #28]
 8006a6c:	e036      	b.n	8006adc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6a1a      	ldr	r2, [r3, #32]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	61da      	str	r2, [r3, #28]
 8006a76:	e031      	b.n	8006adc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d018      	beq.n	8006ab2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	8a92      	ldrh	r2, [r2, #20]
 8006a88:	4413      	add	r3, r2
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	8a92      	ldrh	r2, [r2, #20]
 8006a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a94:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006a96:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006a98:	8b7b      	ldrh	r3, [r7, #26]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d90b      	bls.n	8006ab6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006a9e:	8b7b      	ldrh	r3, [r7, #26]
 8006aa0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006aa2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	8a92      	ldrh	r2, [r2, #20]
 8006aa8:	fb03 f202 	mul.w	r2, r3, r2
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	61da      	str	r2, [r3, #28]
 8006ab0:	e001      	b.n	8006ab6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	78db      	ldrb	r3, [r3, #3]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006abe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	8a92      	ldrh	r2, [r2, #20]
 8006ac4:	fb03 f202 	mul.w	r2, r3, r2
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	61da      	str	r2, [r3, #28]
 8006acc:	e006      	b.n	8006adc <USB_HC_StartXfer+0x1a4>
 8006ace:	bf00      	nop
 8006ad0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	6a1a      	ldr	r2, [r3, #32]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ae4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ae6:	04d9      	lsls	r1, r3, #19
 8006ae8:	4ba3      	ldr	r3, [pc, #652]	@ (8006d78 <USB_HC_StartXfer+0x440>)
 8006aea:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006aec:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	7d9b      	ldrb	r3, [r3, #22]
 8006af2:	075b      	lsls	r3, r3, #29
 8006af4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006af8:	69f9      	ldr	r1, [r7, #28]
 8006afa:	0148      	lsls	r0, r1, #5
 8006afc:	6a39      	ldr	r1, [r7, #32]
 8006afe:	4401      	add	r1, r0
 8006b00:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b04:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b06:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006b08:	79fb      	ldrb	r3, [r7, #7]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d009      	beq.n	8006b22 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6999      	ldr	r1, [r3, #24]
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b1e:	460a      	mov	r2, r1
 8006b20:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	bf0c      	ite	eq
 8006b32:	2301      	moveq	r3, #1
 8006b34:	2300      	movne	r3, #0
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	6a3a      	ldr	r2, [r7, #32]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b54:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b58:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	7e7b      	ldrb	r3, [r7, #25]
 8006b6a:	075b      	lsls	r3, r3, #29
 8006b6c:	69f9      	ldr	r1, [r7, #28]
 8006b6e:	0148      	lsls	r0, r1, #5
 8006b70:	6a39      	ldr	r1, [r7, #32]
 8006b72:	4401      	add	r1, r0
 8006b74:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	799b      	ldrb	r3, [r3, #6]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	f040 80c3 	bne.w	8006d0c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	7c5b      	ldrb	r3, [r3, #17]
 8006b8a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006b90:	4313      	orrs	r3, r2
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	0151      	lsls	r1, r2, #5
 8006b96:	6a3a      	ldr	r2, [r7, #32]
 8006b98:	440a      	add	r2, r1
 8006b9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006b9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006ba2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	69fa      	ldr	r2, [r7, #28]
 8006bb4:	0151      	lsls	r1, r2, #5
 8006bb6:	6a3a      	ldr	r2, [r7, #32]
 8006bb8:	440a      	add	r2, r1
 8006bba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bbe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006bc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	79db      	ldrb	r3, [r3, #7]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d123      	bne.n	8006c14 <USB_HC_StartXfer+0x2dc>
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	78db      	ldrb	r3, [r3, #3]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d11f      	bne.n	8006c14 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	6a3a      	ldr	r2, [r7, #32]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bf2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	6a3a      	ldr	r2, [r7, #32]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c12:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	7c9b      	ldrb	r3, [r3, #18]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d003      	beq.n	8006c24 <USB_HC_StartXfer+0x2ec>
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	7c9b      	ldrb	r3, [r3, #18]
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d117      	bne.n	8006c54 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d113      	bne.n	8006c54 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	78db      	ldrb	r3, [r3, #3]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d10f      	bne.n	8006c54 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	69fa      	ldr	r2, [r7, #28]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	6a3a      	ldr	r2, [r7, #32]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c52:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	7c9b      	ldrb	r3, [r3, #18]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d162      	bne.n	8006d22 <USB_HC_StartXfer+0x3ea>
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	78db      	ldrb	r3, [r3, #3]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d15e      	bne.n	8006d22 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d858      	bhi.n	8006d20 <USB_HC_StartXfer+0x3e8>
 8006c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c74 <USB_HC_StartXfer+0x33c>)
 8006c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c74:	08006c85 	.word	0x08006c85
 8006c78:	08006ca7 	.word	0x08006ca7
 8006c7c:	08006cc9 	.word	0x08006cc9
 8006c80:	08006ceb 	.word	0x08006ceb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	6a3a      	ldr	r2, [r7, #32]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ca2:	6053      	str	r3, [r2, #4]
          break;
 8006ca4:	e03d      	b.n	8006d22 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	0151      	lsls	r1, r2, #5
 8006cb8:	6a3a      	ldr	r2, [r7, #32]
 8006cba:	440a      	add	r2, r1
 8006cbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cc0:	f043 030e 	orr.w	r3, r3, #14
 8006cc4:	6053      	str	r3, [r2, #4]
          break;
 8006cc6:	e02c      	b.n	8006d22 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	0151      	lsls	r1, r2, #5
 8006cda:	6a3a      	ldr	r2, [r7, #32]
 8006cdc:	440a      	add	r2, r1
 8006cde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ce2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ce6:	6053      	str	r3, [r2, #4]
          break;
 8006ce8:	e01b      	b.n	8006d22 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	69fa      	ldr	r2, [r7, #28]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	6a3a      	ldr	r2, [r7, #32]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d08:	6053      	str	r3, [r2, #4]
          break;
 8006d0a:	e00a      	b.n	8006d22 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d18:	461a      	mov	r2, r3
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	6053      	str	r3, [r2, #4]
 8006d1e:	e000      	b.n	8006d22 <USB_HC_StartXfer+0x3ea>
          break;
 8006d20:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d38:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	78db      	ldrb	r3, [r3, #3]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	e003      	b.n	8006d54 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d52:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d5a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d68:	461a      	mov	r2, r3
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006d6e:	79fb      	ldrb	r3, [r7, #7]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	e055      	b.n	8006e24 <USB_HC_StartXfer+0x4ec>
 8006d78:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	78db      	ldrb	r3, [r3, #3]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d14e      	bne.n	8006e22 <USB_HC_StartXfer+0x4ea>
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d04a      	beq.n	8006e22 <USB_HC_StartXfer+0x4ea>
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	79db      	ldrb	r3, [r3, #7]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d146      	bne.n	8006e22 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	7c9b      	ldrb	r3, [r3, #18]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d831      	bhi.n	8006e00 <USB_HC_StartXfer+0x4c8>
 8006d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006da4 <USB_HC_StartXfer+0x46c>)
 8006d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da2:	bf00      	nop
 8006da4:	08006db5 	.word	0x08006db5
 8006da8:	08006dd9 	.word	0x08006dd9
 8006dac:	08006db5 	.word	0x08006db5
 8006db0:	08006dd9 	.word	0x08006dd9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	3303      	adds	r3, #3
 8006dba:	089b      	lsrs	r3, r3, #2
 8006dbc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006dbe:	8afa      	ldrh	r2, [r7, #22]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d91c      	bls.n	8006e04 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	f043 0220 	orr.w	r2, r3, #32
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006dd6:	e015      	b.n	8006e04 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	3303      	adds	r3, #3
 8006dde:	089b      	lsrs	r3, r3, #2
 8006de0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006de2:	8afa      	ldrh	r2, [r7, #22]
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d90a      	bls.n	8006e08 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006dfe:	e003      	b.n	8006e08 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006e00:	bf00      	nop
 8006e02:	e002      	b.n	8006e0a <USB_HC_StartXfer+0x4d2>
        break;
 8006e04:	bf00      	nop
 8006e06:	e000      	b.n	8006e0a <USB_HC_StartXfer+0x4d2>
        break;
 8006e08:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	6999      	ldr	r1, [r3, #24]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	785a      	ldrb	r2, [r3, #1]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	2000      	movs	r0, #0
 8006e1a:	9000      	str	r0, [sp, #0]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7ff f9c9 	bl	80061b4 <USB_WritePacket>
  }

  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3728      	adds	r7, #40	@ 0x28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	b29b      	uxth	r3, r3
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b089      	sub	sp, #36	@ 0x24
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006e5e:	78fb      	ldrb	r3, [r7, #3]
 8006e60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	0c9b      	lsrs	r3, r3, #18
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	0fdb      	lsrs	r3, r3, #31
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	0fdb      	lsrs	r3, r3, #31
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f003 0320 	and.w	r3, r3, #32
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	d10d      	bne.n	8006ed0 <USB_HC_Halt+0x82>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <USB_HC_Halt+0x82>
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d002      	beq.n	8006ecc <USB_HC_Halt+0x7e>
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d101      	bne.n	8006ed0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e0d8      	b.n	8007082 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <USB_HC_Halt+0x8e>
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d173      	bne.n	8006fc4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	69fa      	ldr	r2, [r7, #28]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ef6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006efa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d14a      	bne.n	8006f9e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d133      	bne.n	8006f7c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	0151      	lsls	r1, r2, #5
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	440a      	add	r2, r1
 8006f2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f32:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	0151      	lsls	r1, r2, #5
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	440a      	add	r2, r1
 8006f4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f52:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	3301      	adds	r3, #1
 8006f58:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f60:	d82e      	bhi.n	8006fc0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f78:	d0ec      	beq.n	8006f54 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f7a:	e081      	b.n	8007080 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	0151      	lsls	r1, r2, #5
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	440a      	add	r2, r1
 8006f92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f9a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f9c:	e070      	b.n	8007080 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fbc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fbe:	e05f      	b.n	8007080 <USB_HC_Halt+0x232>
            break;
 8006fc0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fc2:	e05d      	b.n	8007080 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	0151      	lsls	r1, r2, #5
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	440a      	add	r2, r1
 8006fda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fe2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d133      	bne.n	800705c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	0151      	lsls	r1, r2, #5
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	440a      	add	r2, r1
 800700a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800700e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007012:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	440a      	add	r2, r1
 800702a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800702e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007032:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	3301      	adds	r3, #1
 8007038:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007040:	d81d      	bhi.n	800707e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	4413      	add	r3, r2
 800704a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007054:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007058:	d0ec      	beq.n	8007034 <USB_HC_Halt+0x1e6>
 800705a:	e011      	b.n	8007080 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	4413      	add	r3, r2
 8007064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	0151      	lsls	r1, r2, #5
 800706e:	69fa      	ldr	r2, [r7, #28]
 8007070:	440a      	add	r2, r1
 8007072:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007076:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	e000      	b.n	8007080 <USB_HC_Halt+0x232>
          break;
 800707e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3724      	adds	r7, #36	@ 0x24
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
	...

08007090 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	460b      	mov	r3, r1
 800709a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80070a4:	2301      	movs	r3, #1
 80070a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	04da      	lsls	r2, r3, #19
 80070ac:	4b15      	ldr	r3, [pc, #84]	@ (8007104 <USB_DoPing+0x74>)
 80070ae:	4013      	ands	r3, r2
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070ee:	461a      	mov	r2, r3
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	1ff80000 	.word	0x1ff80000

08007108 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7fe ff8c 	bl	800603a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007122:	2110      	movs	r1, #16
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7fe ffe5 	bl	80060f4 <USB_FlushTxFifo>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff f80f 	bl	8006158 <USB_FlushRxFifo>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007144:	2300      	movs	r3, #0
 8007146:	61bb      	str	r3, [r7, #24]
 8007148:	e01f      	b.n	800718a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	4413      	add	r3, r2
 8007152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007160:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007168:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007170:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	4413      	add	r3, r2
 800717a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800717e:	461a      	mov	r2, r3
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	3301      	adds	r3, #1
 8007188:	61bb      	str	r3, [r7, #24]
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	2b0f      	cmp	r3, #15
 800718e:	d9dc      	bls.n	800714a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007190:	2300      	movs	r3, #0
 8007192:	61bb      	str	r3, [r7, #24]
 8007194:	e034      	b.n	8007200 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	4413      	add	r3, r2
 800719e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071ac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ca:	461a      	mov	r2, r3
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071dc:	d80c      	bhi.n	80071f8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	015a      	lsls	r2, r3, #5
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	4413      	add	r3, r2
 80071e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071f4:	d0ec      	beq.n	80071d0 <USB_StopHost+0xc8>
 80071f6:	e000      	b.n	80071fa <USB_StopHost+0xf2>
        break;
 80071f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	3301      	adds	r3, #1
 80071fe:	61bb      	str	r3, [r7, #24]
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	2b0f      	cmp	r3, #15
 8007204:	d9c7      	bls.n	8007196 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800720c:	461a      	mov	r2, r3
 800720e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007212:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800721a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7fe fefb 	bl	8006018 <USB_EnableGlobalInt>

  return ret;
 8007222:	7ffb      	ldrb	r3, [r7, #31]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3720      	adds	r7, #32
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800722c:	b590      	push	{r4, r7, lr}
 800722e:	b089      	sub	sp, #36	@ 0x24
 8007230:	af04      	add	r7, sp, #16
 8007232:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007234:	2301      	movs	r3, #1
 8007236:	2202      	movs	r2, #2
 8007238:	2102      	movs	r1, #2
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fcd1 	bl	8007be2 <USBH_FindInterface>
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	2bff      	cmp	r3, #255	@ 0xff
 8007248:	d002      	beq.n	8007250 <USBH_CDC_InterfaceInit+0x24>
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d901      	bls.n	8007254 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007250:	2302      	movs	r3, #2
 8007252:	e13d      	b.n	80074d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fca6 	bl	8007baa <USBH_SelectInterface>
 800725e:	4603      	mov	r3, r0
 8007260:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007268:	2302      	movs	r3, #2
 800726a:	e131      	b.n	80074d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007272:	2050      	movs	r0, #80	@ 0x50
 8007274:	f005 fd9c 	bl	800cdb0 <malloc>
 8007278:	4603      	mov	r3, r0
 800727a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007282:	69db      	ldr	r3, [r3, #28]
 8007284:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800728c:	2302      	movs	r3, #2
 800728e:	e11f      	b.n	80074d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007290:	2250      	movs	r2, #80	@ 0x50
 8007292:	2100      	movs	r1, #0
 8007294:	68b8      	ldr	r0, [r7, #8]
 8007296:	f005 fe69 	bl	800cf6c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800729a:	7bfb      	ldrb	r3, [r7, #15]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	211a      	movs	r1, #26
 80072a0:	fb01 f303 	mul.w	r3, r1, r3
 80072a4:	4413      	add	r3, r2
 80072a6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	b25b      	sxtb	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	da15      	bge.n	80072de <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	211a      	movs	r1, #26
 80072b8:	fb01 f303 	mul.w	r3, r1, r3
 80072bc:	4413      	add	r3, r2
 80072be:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072c2:	781a      	ldrb	r2, [r3, #0]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	211a      	movs	r1, #26
 80072ce:	fb01 f303 	mul.w	r3, r1, r3
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80072d8:	881a      	ldrh	r2, [r3, #0]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	785b      	ldrb	r3, [r3, #1]
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f002 fa18 	bl	800971a <USBH_AllocPipe>
 80072ea:	4603      	mov	r3, r0
 80072ec:	461a      	mov	r2, r3
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	7819      	ldrb	r1, [r3, #0]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	7858      	ldrb	r0, [r3, #1]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	8952      	ldrh	r2, [r2, #10]
 800730a:	9202      	str	r2, [sp, #8]
 800730c:	2203      	movs	r2, #3
 800730e:	9201      	str	r2, [sp, #4]
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	4623      	mov	r3, r4
 8007314:	4602      	mov	r2, r0
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f002 f9d0 	bl	80096bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2200      	movs	r2, #0
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f005 fcbd 	bl	800cca4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800732a:	2300      	movs	r3, #0
 800732c:	2200      	movs	r2, #0
 800732e:	210a      	movs	r1, #10
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fc56 	bl	8007be2 <USBH_FindInterface>
 8007336:	4603      	mov	r3, r0
 8007338:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800733a:	7bfb      	ldrb	r3, [r7, #15]
 800733c:	2bff      	cmp	r3, #255	@ 0xff
 800733e:	d002      	beq.n	8007346 <USBH_CDC_InterfaceInit+0x11a>
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d901      	bls.n	800734a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007346:	2302      	movs	r3, #2
 8007348:	e0c2      	b.n	80074d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	211a      	movs	r1, #26
 8007350:	fb01 f303 	mul.w	r3, r1, r3
 8007354:	4413      	add	r3, r2
 8007356:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	b25b      	sxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	da16      	bge.n	8007390 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	211a      	movs	r1, #26
 8007368:	fb01 f303 	mul.w	r3, r1, r3
 800736c:	4413      	add	r3, r2
 800736e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007372:	781a      	ldrb	r2, [r3, #0]
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	211a      	movs	r1, #26
 800737e:	fb01 f303 	mul.w	r3, r1, r3
 8007382:	4413      	add	r3, r2
 8007384:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007388:	881a      	ldrh	r2, [r3, #0]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	835a      	strh	r2, [r3, #26]
 800738e:	e015      	b.n	80073bc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	211a      	movs	r1, #26
 8007396:	fb01 f303 	mul.w	r3, r1, r3
 800739a:	4413      	add	r3, r2
 800739c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073a0:	781a      	ldrb	r2, [r3, #0]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	211a      	movs	r1, #26
 80073ac:	fb01 f303 	mul.w	r3, r1, r3
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073b6:	881a      	ldrh	r2, [r3, #0]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	211a      	movs	r1, #26
 80073c2:	fb01 f303 	mul.w	r3, r1, r3
 80073c6:	4413      	add	r3, r2
 80073c8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b25b      	sxtb	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	da16      	bge.n	8007402 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	211a      	movs	r1, #26
 80073da:	fb01 f303 	mul.w	r3, r1, r3
 80073de:	4413      	add	r3, r2
 80073e0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80073e4:	781a      	ldrb	r2, [r3, #0]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	211a      	movs	r1, #26
 80073f0:	fb01 f303 	mul.w	r3, r1, r3
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80073fa:	881a      	ldrh	r2, [r3, #0]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	835a      	strh	r2, [r3, #26]
 8007400:	e015      	b.n	800742e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	211a      	movs	r1, #26
 8007408:	fb01 f303 	mul.w	r3, r1, r3
 800740c:	4413      	add	r3, r2
 800740e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007412:	781a      	ldrb	r2, [r3, #0]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	211a      	movs	r1, #26
 800741e:	fb01 f303 	mul.w	r3, r1, r3
 8007422:	4413      	add	r3, r2
 8007424:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007428:	881a      	ldrh	r2, [r3, #0]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	7b9b      	ldrb	r3, [r3, #14]
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f002 f970 	bl	800971a <USBH_AllocPipe>
 800743a:	4603      	mov	r3, r0
 800743c:	461a      	mov	r2, r3
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	7bdb      	ldrb	r3, [r3, #15]
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f002 f966 	bl	800971a <USBH_AllocPipe>
 800744e:	4603      	mov	r3, r0
 8007450:	461a      	mov	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	7b59      	ldrb	r1, [r3, #13]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	7b98      	ldrb	r0, [r3, #14]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	8b12      	ldrh	r2, [r2, #24]
 800746e:	9202      	str	r2, [sp, #8]
 8007470:	2202      	movs	r2, #2
 8007472:	9201      	str	r2, [sp, #4]
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	4623      	mov	r3, r4
 8007478:	4602      	mov	r2, r0
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f002 f91e 	bl	80096bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	7b19      	ldrb	r1, [r3, #12]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	7bd8      	ldrb	r0, [r3, #15]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	8b52      	ldrh	r2, [r2, #26]
 8007498:	9202      	str	r2, [sp, #8]
 800749a:	2202      	movs	r2, #2
 800749c:	9201      	str	r2, [sp, #4]
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	4623      	mov	r3, r4
 80074a2:	4602      	mov	r2, r0
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f002 f909 	bl	80096bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	7b5b      	ldrb	r3, [r3, #13]
 80074b6:	2200      	movs	r2, #0
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f005 fbf2 	bl	800cca4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	7b1b      	ldrb	r3, [r3, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f005 fbeb 	bl	800cca4 <USBH_LL_SetToggle>

  return USBH_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd90      	pop	{r4, r7, pc}

080074d8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00e      	beq.n	8007510 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f002 f8fe 	bl	80096fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f002 f929 	bl	800975c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	7b1b      	ldrb	r3, [r3, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00e      	beq.n	8007536 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	7b1b      	ldrb	r3, [r3, #12]
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f002 f8eb 	bl	80096fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	7b1b      	ldrb	r3, [r3, #12]
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f002 f916 	bl	800975c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	7b5b      	ldrb	r3, [r3, #13]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00e      	beq.n	800755c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	7b5b      	ldrb	r3, [r3, #13]
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f002 f8d8 	bl	80096fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	7b5b      	ldrb	r3, [r3, #13]
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f002 f903 	bl	800975c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00b      	beq.n	8007580 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	4618      	mov	r0, r3
 8007572:	f005 fc25 	bl	800cdc0 <free>
    phost->pActiveClass->pData = 0U;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800757c:	2200      	movs	r2, #0
 800757e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3340      	adds	r3, #64	@ 0x40
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f8b1 	bl	800770a <GetLineCoding>
 80075a8:	4603      	mov	r3, r0
 80075aa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80075ac:	7afb      	ldrb	r3, [r7, #11]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d105      	bne.n	80075be <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075b8:	2102      	movs	r1, #2
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80075be:	7afb      	ldrb	r3, [r7, #11]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80075d0:	2301      	movs	r3, #1
 80075d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d877      	bhi.n	80076dc <USBH_CDC_Process+0x114>
 80075ec:	a201      	add	r2, pc, #4	@ (adr r2, 80075f4 <USBH_CDC_Process+0x2c>)
 80075ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f2:	bf00      	nop
 80075f4:	08007609 	.word	0x08007609
 80075f8:	0800760f 	.word	0x0800760f
 80075fc:	0800763f 	.word	0x0800763f
 8007600:	080076b3 	.word	0x080076b3
 8007604:	080076c1 	.word	0x080076c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	73fb      	strb	r3, [r7, #15]
      break;
 800760c:	e06d      	b.n	80076ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f897 	bl	8007748 <SetLineCoding>
 800761a:	4603      	mov	r3, r0
 800761c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800761e:	7bbb      	ldrb	r3, [r7, #14]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d104      	bne.n	800762e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800762c:	e058      	b.n	80076e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d055      	beq.n	80076e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2204      	movs	r2, #4
 8007638:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800763c:	e050      	b.n	80076e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	3340      	adds	r3, #64	@ 0x40
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f860 	bl	800770a <GetLineCoding>
 800764a:	4603      	mov	r3, r0
 800764c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800764e:	7bbb      	ldrb	r3, [r7, #14]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d126      	bne.n	80076a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007666:	791b      	ldrb	r3, [r3, #4]
 8007668:	429a      	cmp	r2, r3
 800766a:	d13b      	bne.n	80076e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007676:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007678:	429a      	cmp	r2, r3
 800767a:	d133      	bne.n	80076e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007686:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007688:	429a      	cmp	r2, r3
 800768a:	d12b      	bne.n	80076e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007694:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007696:	429a      	cmp	r2, r3
 8007698:	d124      	bne.n	80076e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f982 	bl	80079a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80076a0:	e020      	b.n	80076e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d01d      	beq.n	80076e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2204      	movs	r2, #4
 80076ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80076b0:	e018      	b.n	80076e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f867 	bl	8007786 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f8f6 	bl	80078aa <CDC_ProcessReception>
      break;
 80076be:	e014      	b.n	80076ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80076c0:	2100      	movs	r1, #0
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 f984 	bl	80089d0 <USBH_ClrFeature>
 80076c8:	4603      	mov	r3, r0
 80076ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10a      	bne.n	80076e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80076da:	e005      	b.n	80076e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80076dc:	bf00      	nop
 80076de:	e004      	b.n	80076ea <USBH_CDC_Process+0x122>
      break;
 80076e0:	bf00      	nop
 80076e2:	e002      	b.n	80076ea <USBH_CDC_Process+0x122>
      break;
 80076e4:	bf00      	nop
 80076e6:	e000      	b.n	80076ea <USBH_CDC_Process+0x122>
      break;
 80076e8:	bf00      	nop

  }

  return status;
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	22a1      	movs	r2, #161	@ 0xa1
 8007718:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2221      	movs	r2, #33	@ 0x21
 800771e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2207      	movs	r2, #7
 8007730:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2207      	movs	r2, #7
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 fc7e 	bl	800903a <USBH_CtlReq>
 800773e:	4603      	mov	r3, r0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2221      	movs	r2, #33	@ 0x21
 8007756:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2220      	movs	r2, #32
 800775c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2207      	movs	r2, #7
 800776e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2207      	movs	r2, #7
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f001 fc5f 	bl	800903a <USBH_CtlReq>
 800777c:	4603      	mov	r3, r0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b086      	sub	sp, #24
 800778a:	af02      	add	r7, sp, #8
 800778c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007798:	2300      	movs	r3, #0
 800779a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d002      	beq.n	80077ac <CDC_ProcessTransmission+0x26>
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d023      	beq.n	80077f2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80077aa:	e07a      	b.n	80078a2 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	8b12      	ldrh	r2, [r2, #24]
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d90b      	bls.n	80077d0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	69d9      	ldr	r1, [r3, #28]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8b1a      	ldrh	r2, [r3, #24]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	7b5b      	ldrb	r3, [r3, #13]
 80077c4:	2001      	movs	r0, #1
 80077c6:	9000      	str	r0, [sp, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 ff34 	bl	8009636 <USBH_BulkSendData>
 80077ce:	e00b      	b.n	80077e8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80077d8:	b29a      	uxth	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	7b5b      	ldrb	r3, [r3, #13]
 80077de:	2001      	movs	r0, #1
 80077e0:	9000      	str	r0, [sp, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f001 ff27 	bl	8009636 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80077f0:	e057      	b.n	80078a2 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	7b5b      	ldrb	r3, [r3, #13]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f005 fa29 	bl	800cc50 <USBH_LL_GetURBState>
 80077fe:	4603      	mov	r3, r0
 8007800:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d136      	bne.n	8007876 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	8b12      	ldrh	r2, [r2, #24]
 8007810:	4293      	cmp	r3, r2
 8007812:	d90e      	bls.n	8007832 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	8b12      	ldrh	r2, [r2, #24]
 800781c:	1a9a      	subs	r2, r3, r2
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	8b12      	ldrh	r2, [r2, #24]
 800782a:	441a      	add	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	61da      	str	r2, [r3, #28]
 8007830:	e002      	b.n	8007838 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8007848:	e006      	b.n	8007858 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f892 	bl	800797c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2204      	movs	r2, #4
 800785c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800786c:	2300      	movs	r3, #0
 800786e:	2200      	movs	r2, #0
 8007870:	f002 f964 	bl	8009b3c <osMessageQueuePut>
      break;
 8007874:	e014      	b.n	80078a0 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007876:	7afb      	ldrb	r3, [r7, #11]
 8007878:	2b02      	cmp	r3, #2
 800787a:	d111      	bne.n	80078a0 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2204      	movs	r2, #4
 8007888:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007898:	2300      	movs	r3, #0
 800789a:	2200      	movs	r2, #0
 800789c:	f002 f94e 	bl	8009b3c <osMessageQueuePut>
      break;
 80078a0:	bf00      	nop
  }
}
 80078a2:	bf00      	nop
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b086      	sub	sp, #24
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078bc:	2300      	movs	r3, #0
 80078be:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	d002      	beq.n	80078d0 <CDC_ProcessReception+0x26>
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d00e      	beq.n	80078ec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80078ce:	e051      	b.n	8007974 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	6a19      	ldr	r1, [r3, #32]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	8b5a      	ldrh	r2, [r3, #26]
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	7b1b      	ldrb	r3, [r3, #12]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 fecf 	bl	8009680 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2204      	movs	r2, #4
 80078e6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80078ea:	e043      	b.n	8007974 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	7b1b      	ldrb	r3, [r3, #12]
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f005 f9ac 	bl	800cc50 <USBH_LL_GetURBState>
 80078f8:	4603      	mov	r3, r0
 80078fa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80078fc:	7cfb      	ldrb	r3, [r7, #19]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d137      	bne.n	8007972 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	7b1b      	ldrb	r3, [r3, #12]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f005 f90f 	bl	800cb2c <USBH_LL_GetLastXferSize>
 800790e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	429a      	cmp	r2, r3
 8007918:	d016      	beq.n	8007948 <CDC_ProcessReception+0x9e>
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	8b5b      	ldrh	r3, [r3, #26]
 800791e:	461a      	mov	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4293      	cmp	r3, r2
 8007924:	d910      	bls.n	8007948 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	1ad2      	subs	r2, r2, r3
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	6a1a      	ldr	r2, [r3, #32]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	441a      	add	r2, r3
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2203      	movs	r2, #3
 8007942:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8007946:	e006      	b.n	8007956 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f81d 	bl	8007990 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2204      	movs	r2, #4
 800795a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800796a:	2300      	movs	r3, #0
 800796c:	2200      	movs	r2, #0
 800796e:	f002 f8e5 	bl	8009b3c <osMessageQueuePut>
      break;
 8007972:	bf00      	nop
  }
}
 8007974:	bf00      	nop
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	4613      	mov	r3, r2
 80079c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80079cc:	2302      	movs	r3, #2
 80079ce:	e044      	b.n	8007a5a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	79fa      	ldrb	r2, [r7, #7]
 80079d4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f841 	bl	8007a70 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2104      	movs	r1, #4
 8007a20:	2010      	movs	r0, #16
 8007a22:	f002 f818 	bl	8009a56 <osMessageQueueNew>
 8007a26:	4602      	mov	r2, r0
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a64 <USBH_Init+0xac>)
 8007a30:	4a0d      	ldr	r2, [pc, #52]	@ (8007a68 <USBH_Init+0xb0>)
 8007a32:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8007a34:	4b0b      	ldr	r3, [pc, #44]	@ (8007a64 <USBH_Init+0xac>)
 8007a36:	2280      	movs	r2, #128	@ 0x80
 8007a38:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8007a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007a64 <USBH_Init+0xac>)
 8007a3c:	2218      	movs	r2, #24
 8007a3e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8007a40:	4a08      	ldr	r2, [pc, #32]	@ (8007a64 <USBH_Init+0xac>)
 8007a42:	68f9      	ldr	r1, [r7, #12]
 8007a44:	4809      	ldr	r0, [pc, #36]	@ (8007a6c <USBH_Init+0xb4>)
 8007a46:	f001 ff59 	bl	80098fc <osThreadNew>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f004 ffb6 	bl	800c9c4 <USBH_LL_Init>

  return USBH_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000238 	.word	0x20000238
 8007a68:	0800d838 	.word	0x0800d838
 8007a6c:	08008721 	.word	0x08008721

08007a70 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	e009      	b.n	8007a96 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	33e0      	adds	r3, #224	@ 0xe0
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b0f      	cmp	r3, #15
 8007a9a:	d9f2      	bls.n	8007a82 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	e009      	b.n	8007ab6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007aac:	2200      	movs	r2, #0
 8007aae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007abc:	d3f1      	bcc.n	8007aa2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2240      	movs	r2, #64	@ 0x40
 8007ae2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	331c      	adds	r3, #28
 8007b0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b12:	2100      	movs	r1, #0
 8007b14:	4618      	mov	r0, r3
 8007b16:	f005 fa29 	bl	800cf6c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b24:	2100      	movs	r1, #0
 8007b26:	4618      	mov	r0, r3
 8007b28:	f005 fa20 	bl	800cf6c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007b32:	2212      	movs	r2, #18
 8007b34:	2100      	movs	r1, #0
 8007b36:	4618      	mov	r0, r3
 8007b38:	f005 fa18 	bl	800cf6c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007b42:	223e      	movs	r2, #62	@ 0x3e
 8007b44:	2100      	movs	r1, #0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f005 fa10 	bl	800cf6c <memset>

  return USBH_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b085      	sub	sp, #20
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d016      	beq.n	8007b98 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10e      	bne.n	8007b92 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007b7a:	1c59      	adds	r1, r3, #1
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	33de      	adds	r3, #222	@ 0xde
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	73fb      	strb	r3, [r7, #15]
 8007b90:	e004      	b.n	8007b9c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007b92:	2302      	movs	r3, #2
 8007b94:	73fb      	strb	r3, [r7, #15]
 8007b96:	e001      	b.n	8007b9c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007b98:	2302      	movs	r3, #2
 8007b9a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b085      	sub	sp, #20
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007bc0:	78fa      	ldrb	r2, [r7, #3]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d204      	bcs.n	8007bd0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	78fa      	ldrb	r2, [r7, #3]
 8007bca:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007bce:	e001      	b.n	8007bd4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b087      	sub	sp, #28
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	4608      	mov	r0, r1
 8007bec:	4611      	mov	r1, r2
 8007bee:	461a      	mov	r2, r3
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	70fb      	strb	r3, [r7, #3]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	70bb      	strb	r3, [r7, #2]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007c0a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c0c:	e025      	b.n	8007c5a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	221a      	movs	r2, #26
 8007c12:	fb02 f303 	mul.w	r3, r2, r3
 8007c16:	3308      	adds	r3, #8
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	3302      	adds	r3, #2
 8007c1e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	795b      	ldrb	r3, [r3, #5]
 8007c24:	78fa      	ldrb	r2, [r7, #3]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d002      	beq.n	8007c30 <USBH_FindInterface+0x4e>
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	2bff      	cmp	r3, #255	@ 0xff
 8007c2e:	d111      	bne.n	8007c54 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c34:	78ba      	ldrb	r2, [r7, #2]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d002      	beq.n	8007c40 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c3a:	78bb      	ldrb	r3, [r7, #2]
 8007c3c:	2bff      	cmp	r3, #255	@ 0xff
 8007c3e:	d109      	bne.n	8007c54 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c44:	787a      	ldrb	r2, [r7, #1]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d002      	beq.n	8007c50 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c4a:	787b      	ldrb	r3, [r7, #1]
 8007c4c:	2bff      	cmp	r3, #255	@ 0xff
 8007c4e:	d101      	bne.n	8007c54 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	e006      	b.n	8007c62 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
 8007c56:	3301      	adds	r3, #1
 8007c58:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d9d6      	bls.n	8007c0e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007c60:	23ff      	movs	r3, #255	@ 0xff
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	371c      	adds	r7, #28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b082      	sub	sp, #8
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f004 fee0 	bl	800ca3c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f004 fff9 	bl	800cc76 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
	...

08007c90 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b088      	sub	sp, #32
 8007c94:	af04      	add	r7, sp, #16
 8007c96:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007c98:	2302      	movs	r3, #2
 8007c9a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d102      	bne.n	8007cb2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2203      	movs	r2, #3
 8007cb0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b0b      	cmp	r3, #11
 8007cba:	f200 8244 	bhi.w	8008146 <USBH_Process+0x4b6>
 8007cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc4 <USBH_Process+0x34>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007cf5 	.word	0x08007cf5
 8007cc8:	08007d43 	.word	0x08007d43
 8007ccc:	08007dc7 	.word	0x08007dc7
 8007cd0:	080080c5 	.word	0x080080c5
 8007cd4:	08008147 	.word	0x08008147
 8007cd8:	08007e83 	.word	0x08007e83
 8007cdc:	0800804f 	.word	0x0800804f
 8007ce0:	08007ed5 	.word	0x08007ed5
 8007ce4:	08007f11 	.word	0x08007f11
 8007ce8:	08007f49 	.word	0x08007f49
 8007cec:	08007fa7 	.word	0x08007fa7
 8007cf0:	080080ad 	.word	0x080080ad
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 8224 	beq.w	800814a <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007d08:	20c8      	movs	r0, #200	@ 0xc8
 8007d0a:	f004 fffe 	bl	800cd0a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f004 fef1 	bl	800caf6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007d38:	2300      	movs	r3, #0
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f001 fefe 	bl	8009b3c <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007d40:	e203      	b.n	800814a <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d107      	bne.n	8007d5c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2202      	movs	r2, #2
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	e025      	b.n	8007da8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d66:	d914      	bls.n	8007d92 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007d6e:	3301      	adds	r3, #1
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d903      	bls.n	8007d8a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	220d      	movs	r2, #13
 8007d86:	701a      	strb	r2, [r3, #0]
 8007d88:	e00e      	b.n	8007da8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	e00a      	b.n	8007da8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d98:	f103 020a 	add.w	r2, r3, #10
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007da2:	200a      	movs	r0, #10
 8007da4:	f004 ffb1 	bl	800cd0a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f001 febc 	bl	8009b3c <osMessageQueuePut>
#endif
#endif
      break;
 8007dc4:	e1c8      	b.n	8008158 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d005      	beq.n	8007ddc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007dd6:	2104      	movs	r1, #4
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007ddc:	2064      	movs	r0, #100	@ 0x64
 8007dde:	f004 ff94 	bl	800cd0a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f004 fe60 	bl	800caa8 <USBH_LL_GetSpeed>
 8007de8:	4603      	mov	r3, r0
 8007dea:	461a      	mov	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2205      	movs	r2, #5
 8007df6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007df8:	2100      	movs	r1, #0
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 fc8d 	bl	800971a <USBH_AllocPipe>
 8007e00:	4603      	mov	r3, r0
 8007e02:	461a      	mov	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007e08:	2180      	movs	r1, #128	@ 0x80
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f001 fc85 	bl	800971a <USBH_AllocPipe>
 8007e10:	4603      	mov	r3, r0
 8007e12:	461a      	mov	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	7919      	ldrb	r1, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e2c:	9202      	str	r2, [sp, #8]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	9201      	str	r2, [sp, #4]
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	4603      	mov	r3, r0
 8007e36:	2280      	movs	r2, #128	@ 0x80
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 fc3f 	bl	80096bc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	7959      	ldrb	r1, [r3, #5]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e52:	9202      	str	r2, [sp, #8]
 8007e54:	2200      	movs	r2, #0
 8007e56:	9201      	str	r2, [sp, #4]
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 fc2c 	bl	80096bc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007e78:	2300      	movs	r3, #0
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f001 fe5e 	bl	8009b3c <osMessageQueuePut>
#endif
#endif
      break;
 8007e80:	e16a      	b.n	8008158 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f96e 	bl	8008164 <USBH_HandleEnum>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f040 815c 	bne.w	800814e <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d103      	bne.n	8007eb0 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2208      	movs	r2, #8
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	e002      	b.n	8007eb6 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2207      	movs	r2, #7
 8007eb4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2205      	movs	r2, #5
 8007eba:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f001 fe35 	bl	8009b3c <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007ed2:	e13c      	b.n	800814e <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 8139 	beq.w	8008152 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2208      	movs	r2, #8
 8007ef0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2205      	movs	r2, #5
 8007ef6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007f06:	2300      	movs	r3, #0
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f001 fe17 	bl	8009b3c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8007f0e:	e120      	b.n	8008152 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fd12 	bl	8008942 <USBH_SetCfg>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d102      	bne.n	8007f2a <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2209      	movs	r2, #9
 8007f28:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007f3e:	2300      	movs	r3, #0
 8007f40:	2200      	movs	r2, #0
 8007f42:	f001 fdfb 	bl	8009b3c <osMessageQueuePut>
#endif
#endif
      break;
 8007f46:	e107      	b.n	8008158 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007f4e:	f003 0320 	and.w	r3, r3, #32
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d015      	beq.n	8007f82 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007f56:	2101      	movs	r1, #1
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fd15 	bl	8008988 <USBH_SetFeature>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d103      	bne.n	8007f72 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	220a      	movs	r2, #10
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	e00a      	b.n	8007f88 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d106      	bne.n	8007f88 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	220a      	movs	r2, #10
 8007f7e:	701a      	strb	r2, [r3, #0]
 8007f80:	e002      	b.n	8007f88 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	220a      	movs	r2, #10
 8007f86:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f001 fdcc 	bl	8009b3c <osMessageQueuePut>
#endif
#endif
      break;
 8007fa4:	e0d8      	b.n	8008158 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d03f      	beq.n	8008030 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73fb      	strb	r3, [r7, #15]
 8007fbc:	e016      	b.n	8007fec <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007fbe:	7bfa      	ldrb	r2, [r7, #15]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	32de      	adds	r2, #222	@ 0xde
 8007fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc8:	791a      	ldrb	r2, [r3, #4]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d108      	bne.n	8007fe6 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007fd4:	7bfa      	ldrb	r2, [r7, #15]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	32de      	adds	r2, #222	@ 0xde
 8007fda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007fe4:	e005      	b.n	8007ff2 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	73fb      	strb	r3, [r7, #15]
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0e5      	beq.n	8007fbe <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d016      	beq.n	800802a <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	4798      	blx	r3
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d109      	bne.n	8008022 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2206      	movs	r2, #6
 8008012:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800801a:	2103      	movs	r1, #3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	4798      	blx	r3
 8008020:	e006      	b.n	8008030 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	220d      	movs	r2, #13
 8008026:	701a      	strb	r2, [r3, #0]
 8008028:	e002      	b.n	8008030 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	220d      	movs	r2, #13
 800802e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2205      	movs	r2, #5
 8008034:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008044:	2300      	movs	r3, #0
 8008046:	2200      	movs	r2, #0
 8008048:	f001 fd78 	bl	8009b3c <osMessageQueuePut>
#endif
#endif
      break;
 800804c:	e084      	b.n	8008158 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008054:	2b00      	cmp	r3, #0
 8008056:	d017      	beq.n	8008088 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	4798      	blx	r3
 8008064:	4603      	mov	r3, r0
 8008066:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d103      	bne.n	8008078 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	220b      	movs	r2, #11
 8008074:	701a      	strb	r2, [r3, #0]
 8008076:	e00a      	b.n	800808e <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b02      	cmp	r3, #2
 800807e:	d106      	bne.n	800808e <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	220d      	movs	r2, #13
 8008084:	701a      	strb	r2, [r3, #0]
 8008086:	e002      	b.n	800808e <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	220d      	movs	r2, #13
 800808c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2205      	movs	r2, #5
 8008092:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80080a2:	2300      	movs	r3, #0
 80080a4:	2200      	movs	r2, #0
 80080a6:	f001 fd49 	bl	8009b3c <osMessageQueuePut>
#endif
#endif
      break;
 80080aa:	e055      	b.n	8008158 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d04f      	beq.n	8008156 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	4798      	blx	r3
      }
      break;
 80080c2:	e048      	b.n	8008156 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff fccf 	bl	8007a70 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d009      	beq.n	80080f0 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d005      	beq.n	8008106 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008100:	2105      	movs	r1, #5
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b01      	cmp	r3, #1
 8008110:	d107      	bne.n	8008122 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff fda7 	bl	8007c6e <USBH_Start>
 8008120:	e002      	b.n	8008128 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f004 fc8a 	bl	800ca3c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800813c:	2300      	movs	r3, #0
 800813e:	2200      	movs	r2, #0
 8008140:	f001 fcfc 	bl	8009b3c <osMessageQueuePut>
#endif
#endif
      break;
 8008144:	e008      	b.n	8008158 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8008146:	bf00      	nop
 8008148:	e006      	b.n	8008158 <USBH_Process+0x4c8>
      break;
 800814a:	bf00      	nop
 800814c:	e004      	b.n	8008158 <USBH_Process+0x4c8>
      break;
 800814e:	bf00      	nop
 8008150:	e002      	b.n	8008158 <USBH_Process+0x4c8>
    break;
 8008152:	bf00      	nop
 8008154:	e000      	b.n	8008158 <USBH_Process+0x4c8>
      break;
 8008156:	bf00      	nop
  }
  return USBH_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop

08008164 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af04      	add	r7, sp, #16
 800816a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800816c:	2301      	movs	r3, #1
 800816e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008170:	2301      	movs	r3, #1
 8008172:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	785b      	ldrb	r3, [r3, #1]
 8008178:	2b07      	cmp	r3, #7
 800817a:	f200 8204 	bhi.w	8008586 <USBH_HandleEnum+0x422>
 800817e:	a201      	add	r2, pc, #4	@ (adr r2, 8008184 <USBH_HandleEnum+0x20>)
 8008180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008184:	080081a5 	.word	0x080081a5
 8008188:	0800825f 	.word	0x0800825f
 800818c:	080082c9 	.word	0x080082c9
 8008190:	08008353 	.word	0x08008353
 8008194:	080083bd 	.word	0x080083bd
 8008198:	0800842d 	.word	0x0800842d
 800819c:	080084c9 	.word	0x080084c9
 80081a0:	08008547 	.word	0x08008547
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80081a4:	2108      	movs	r1, #8
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fae8 	bl	800877c <USBH_Get_DevDesc>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d12e      	bne.n	8008214 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	7919      	ldrb	r1, [r3, #4]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081da:	9202      	str	r2, [sp, #8]
 80081dc:	2200      	movs	r2, #0
 80081de:	9201      	str	r2, [sp, #4]
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	4603      	mov	r3, r0
 80081e4:	2280      	movs	r2, #128	@ 0x80
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f001 fa68 	bl	80096bc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	7959      	ldrb	r1, [r3, #5]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008200:	9202      	str	r2, [sp, #8]
 8008202:	2200      	movs	r2, #0
 8008204:	9201      	str	r2, [sp, #4]
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	4603      	mov	r3, r0
 800820a:	2200      	movs	r2, #0
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 fa55 	bl	80096bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008212:	e1ba      	b.n	800858a <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b03      	cmp	r3, #3
 8008218:	f040 81b7 	bne.w	800858a <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008222:	3301      	adds	r3, #1
 8008224:	b2da      	uxtb	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008232:	2b03      	cmp	r3, #3
 8008234:	d903      	bls.n	800823e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	220d      	movs	r2, #13
 800823a:	701a      	strb	r2, [r3, #0]
      break;
 800823c:	e1a5      	b.n	800858a <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	795b      	ldrb	r3, [r3, #5]
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 fa89 	bl	800975c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	791b      	ldrb	r3, [r3, #4]
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 fa83 	bl	800975c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	701a      	strb	r2, [r3, #0]
      break;
 800825c:	e195      	b.n	800858a <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800825e:	2112      	movs	r1, #18
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fa8b 	bl	800877c <USBH_Get_DevDesc>
 8008266:	4603      	mov	r3, r0
 8008268:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800826a:	7bbb      	ldrb	r3, [r7, #14]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d103      	bne.n	8008278 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2202      	movs	r2, #2
 8008274:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008276:	e18a      	b.n	800858e <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	2b03      	cmp	r3, #3
 800827c:	f040 8187 	bne.w	800858e <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008286:	3301      	adds	r3, #1
 8008288:	b2da      	uxtb	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008296:	2b03      	cmp	r3, #3
 8008298:	d903      	bls.n	80082a2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	220d      	movs	r2, #13
 800829e:	701a      	strb	r2, [r3, #0]
      break;
 80082a0:	e175      	b.n	800858e <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	795b      	ldrb	r3, [r3, #5]
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 fa57 	bl	800975c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	791b      	ldrb	r3, [r3, #4]
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f001 fa51 	bl	800975c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	701a      	strb	r2, [r3, #0]
      break;
 80082c6:	e162      	b.n	800858e <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80082c8:	2101      	movs	r1, #1
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fb15 	bl	80088fa <USBH_SetAddress>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d130      	bne.n	800833c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80082da:	2002      	movs	r0, #2
 80082dc:	f004 fd15 	bl	800cd0a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2203      	movs	r2, #3
 80082ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	7919      	ldrb	r1, [r3, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008302:	9202      	str	r2, [sp, #8]
 8008304:	2200      	movs	r2, #0
 8008306:	9201      	str	r2, [sp, #4]
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	4603      	mov	r3, r0
 800830c:	2280      	movs	r2, #128	@ 0x80
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 f9d4 	bl	80096bc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	7959      	ldrb	r1, [r3, #5]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008328:	9202      	str	r2, [sp, #8]
 800832a:	2200      	movs	r2, #0
 800832c:	9201      	str	r2, [sp, #4]
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	4603      	mov	r3, r0
 8008332:	2200      	movs	r2, #0
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 f9c1 	bl	80096bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800833a:	e12a      	b.n	8008592 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	2b03      	cmp	r3, #3
 8008340:	f040 8127 	bne.w	8008592 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	220d      	movs	r2, #13
 8008348:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	705a      	strb	r2, [r3, #1]
      break;
 8008350:	e11f      	b.n	8008592 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008352:	2109      	movs	r1, #9
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fa3d 	bl	80087d4 <USBH_Get_CfgDesc>
 800835a:	4603      	mov	r3, r0
 800835c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d103      	bne.n	800836c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2204      	movs	r2, #4
 8008368:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800836a:	e114      	b.n	8008596 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2b03      	cmp	r3, #3
 8008370:	f040 8111 	bne.w	8008596 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800837a:	3301      	adds	r3, #1
 800837c:	b2da      	uxtb	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800838a:	2b03      	cmp	r3, #3
 800838c:	d903      	bls.n	8008396 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	220d      	movs	r2, #13
 8008392:	701a      	strb	r2, [r3, #0]
      break;
 8008394:	e0ff      	b.n	8008596 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	795b      	ldrb	r3, [r3, #5]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f001 f9dd 	bl	800975c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	791b      	ldrb	r3, [r3, #4]
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f001 f9d7 	bl	800975c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	701a      	strb	r2, [r3, #0]
      break;
 80083ba:	e0ec      	b.n	8008596 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fa05 	bl	80087d4 <USBH_Get_CfgDesc>
 80083ca:	4603      	mov	r3, r0
 80083cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d103      	bne.n	80083dc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2205      	movs	r2, #5
 80083d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083da:	e0de      	b.n	800859a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	2b03      	cmp	r3, #3
 80083e0:	f040 80db 	bne.w	800859a <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80083ea:	3301      	adds	r3, #1
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d903      	bls.n	8008406 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	220d      	movs	r2, #13
 8008402:	701a      	strb	r2, [r3, #0]
      break;
 8008404:	e0c9      	b.n	800859a <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	795b      	ldrb	r3, [r3, #5]
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 f9a5 	bl	800975c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	791b      	ldrb	r3, [r3, #4]
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f001 f99f 	bl	800975c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	701a      	strb	r2, [r3, #0]
      break;
 800842a:	e0b6      	b.n	800859a <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008432:	2b00      	cmp	r3, #0
 8008434:	d036      	beq.n	80084a4 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008442:	23ff      	movs	r3, #255	@ 0xff
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f9ef 	bl	8008828 <USBH_Get_StringDesc>
 800844a:	4603      	mov	r3, r0
 800844c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d111      	bne.n	8008478 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2206      	movs	r2, #6
 8008458:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2205      	movs	r2, #5
 800845e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800846e:	2300      	movs	r3, #0
 8008470:	2200      	movs	r2, #0
 8008472:	f001 fb63 	bl	8009b3c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008476:	e092      	b.n	800859e <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008478:	7bbb      	ldrb	r3, [r7, #14]
 800847a:	2b03      	cmp	r3, #3
 800847c:	f040 808f 	bne.w	800859e <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2206      	movs	r2, #6
 8008484:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2205      	movs	r2, #5
 800848a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800849a:	2300      	movs	r3, #0
 800849c:	2200      	movs	r2, #0
 800849e:	f001 fb4d 	bl	8009b3c <osMessageQueuePut>
      break;
 80084a2:	e07c      	b.n	800859e <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2206      	movs	r2, #6
 80084a8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2205      	movs	r2, #5
 80084ae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80084be:	2300      	movs	r3, #0
 80084c0:	2200      	movs	r2, #0
 80084c2:	f001 fb3b 	bl	8009b3c <osMessageQueuePut>
      break;
 80084c6:	e06a      	b.n	800859e <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d027      	beq.n	8008522 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80084de:	23ff      	movs	r3, #255	@ 0xff
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f9a1 	bl	8008828 <USBH_Get_StringDesc>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d103      	bne.n	80084f8 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2207      	movs	r2, #7
 80084f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80084f6:	e054      	b.n	80085a2 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d151      	bne.n	80085a2 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2207      	movs	r2, #7
 8008502:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2205      	movs	r2, #5
 8008508:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008518:	2300      	movs	r3, #0
 800851a:	2200      	movs	r2, #0
 800851c:	f001 fb0e 	bl	8009b3c <osMessageQueuePut>
      break;
 8008520:	e03f      	b.n	80085a2 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2207      	movs	r2, #7
 8008526:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2205      	movs	r2, #5
 800852c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800853c:	2300      	movs	r3, #0
 800853e:	2200      	movs	r2, #0
 8008540:	f001 fafc 	bl	8009b3c <osMessageQueuePut>
      break;
 8008544:	e02d      	b.n	80085a2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800854c:	2b00      	cmp	r3, #0
 800854e:	d017      	beq.n	8008580 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800855c:	23ff      	movs	r3, #255	@ 0xff
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f962 	bl	8008828 <USBH_Get_StringDesc>
 8008564:	4603      	mov	r3, r0
 8008566:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d102      	bne.n	8008574 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008572:	e018      	b.n	80085a6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	2b03      	cmp	r3, #3
 8008578:	d115      	bne.n	80085a6 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	73fb      	strb	r3, [r7, #15]
      break;
 800857e:	e012      	b.n	80085a6 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73fb      	strb	r3, [r7, #15]
      break;
 8008584:	e00f      	b.n	80085a6 <USBH_HandleEnum+0x442>

    default:
      break;
 8008586:	bf00      	nop
 8008588:	e00e      	b.n	80085a8 <USBH_HandleEnum+0x444>
      break;
 800858a:	bf00      	nop
 800858c:	e00c      	b.n	80085a8 <USBH_HandleEnum+0x444>
      break;
 800858e:	bf00      	nop
 8008590:	e00a      	b.n	80085a8 <USBH_HandleEnum+0x444>
      break;
 8008592:	bf00      	nop
 8008594:	e008      	b.n	80085a8 <USBH_HandleEnum+0x444>
      break;
 8008596:	bf00      	nop
 8008598:	e006      	b.n	80085a8 <USBH_HandleEnum+0x444>
      break;
 800859a:	bf00      	nop
 800859c:	e004      	b.n	80085a8 <USBH_HandleEnum+0x444>
      break;
 800859e:	bf00      	nop
 80085a0:	e002      	b.n	80085a8 <USBH_HandleEnum+0x444>
      break;
 80085a2:	bf00      	nop
 80085a4:	e000      	b.n	80085a8 <USBH_HandleEnum+0x444>
      break;
 80085a6:	bf00      	nop
  }
  return Status;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop

080085b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80085c6:	bf00      	nop
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f804 	bl	80085f6 <USBH_HandleSof>
}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b082      	sub	sp, #8
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b0b      	cmp	r3, #11
 8008606:	d10a      	bne.n	800861e <USBH_HandleSof+0x28>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d005      	beq.n	800861e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	4798      	blx	r3
  }
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800864a:	2300      	movs	r3, #0
 800864c:	2200      	movs	r2, #0
 800864e:	f001 fa75 	bl	8009b3c <osMessageQueuePut>
#endif
#endif

  return;
 8008652:	bf00      	nop
}
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800866a:	bf00      	nop
}
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b082      	sub	sp, #8
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80086aa:	2300      	movs	r3, #0
 80086ac:	2200      	movs	r2, #0
 80086ae:	f001 fa45 	bl	8009b3c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f004 f9c8 	bl	800ca72 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	791b      	ldrb	r3, [r3, #4]
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 f837 	bl	800975c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	795b      	ldrb	r3, [r3, #5]
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 f831 	bl	800975c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800870e:	2300      	movs	r3, #0
 8008710:	2200      	movs	r2, #0
 8008712:	f001 fa13 	bl	8009b3c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008738:	2200      	movs	r2, #0
 800873a:	f001 fa5f 	bl	8009bfc <osMessageQueueGet>
 800873e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1f0      	bne.n	8008728 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7ff faa2 	bl	8007c90 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800874c:	e7ec      	b.n	8008728 <USBH_Process_OS+0x8>

0800874e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800876a:	2300      	movs	r3, #0
 800876c:	2200      	movs	r2, #0
 800876e:	f001 f9e5 	bl	8009b3c <osMessageQueuePut>
#endif

  return USBH_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af02      	add	r7, sp, #8
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008788:	887b      	ldrh	r3, [r7, #2]
 800878a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800878e:	d901      	bls.n	8008794 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008790:	2303      	movs	r3, #3
 8008792:	e01b      	b.n	80087cc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800879a:	887b      	ldrh	r3, [r7, #2]
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	4613      	mov	r3, r2
 80087a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80087a4:	2100      	movs	r1, #0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f872 	bl	8008890 <USBH_GetDescriptor>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d109      	bne.n	80087ca <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80087bc:	887a      	ldrh	r2, [r7, #2]
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f929 	bl	8008a18 <USBH_ParseDevDesc>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af02      	add	r7, sp, #8
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	331c      	adds	r3, #28
 80087e4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80087e6:	887b      	ldrh	r3, [r7, #2]
 80087e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087ec:	d901      	bls.n	80087f2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e016      	b.n	8008820 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80087f2:	887b      	ldrh	r3, [r7, #2]
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087fc:	2100      	movs	r1, #0
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f846 	bl	8008890 <USBH_GetDescriptor>
 8008804:	4603      	mov	r3, r0
 8008806:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d107      	bne.n	800881e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800880e:	887b      	ldrh	r3, [r7, #2]
 8008810:	461a      	mov	r2, r3
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f9af 	bl	8008b78 <USBH_ParseCfgDesc>
 800881a:	4603      	mov	r3, r0
 800881c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800881e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b088      	sub	sp, #32
 800882c:	af02      	add	r7, sp, #8
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	607a      	str	r2, [r7, #4]
 8008832:	461a      	mov	r2, r3
 8008834:	460b      	mov	r3, r1
 8008836:	72fb      	strb	r3, [r7, #11]
 8008838:	4613      	mov	r3, r2
 800883a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800883c:	893b      	ldrh	r3, [r7, #8]
 800883e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008842:	d802      	bhi.n	800884a <USBH_Get_StringDesc+0x22>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800884a:	2303      	movs	r3, #3
 800884c:	e01c      	b.n	8008888 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800884e:	7afb      	ldrb	r3, [r7, #11]
 8008850:	b29b      	uxth	r3, r3
 8008852:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008856:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800885e:	893b      	ldrh	r3, [r7, #8]
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	460b      	mov	r3, r1
 8008864:	2100      	movs	r1, #0
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f000 f812 	bl	8008890 <USBH_GetDescriptor>
 800886c:	4603      	mov	r3, r0
 800886e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008870:	7dfb      	ldrb	r3, [r7, #23]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d107      	bne.n	8008886 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800887c:	893a      	ldrh	r2, [r7, #8]
 800887e:	6879      	ldr	r1, [r7, #4]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 fb8d 	bl	8008fa0 <USBH_ParseStringDesc>
  }

  return status;
 8008886:	7dfb      	ldrb	r3, [r7, #23]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	607b      	str	r3, [r7, #4]
 800889a:	460b      	mov	r3, r1
 800889c:	72fb      	strb	r3, [r7, #11]
 800889e:	4613      	mov	r3, r2
 80088a0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	789b      	ldrb	r3, [r3, #2]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d11c      	bne.n	80088e4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80088aa:	7afb      	ldrb	r3, [r7, #11]
 80088ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2206      	movs	r2, #6
 80088ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	893a      	ldrh	r2, [r7, #8]
 80088c0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80088c2:	893b      	ldrh	r3, [r7, #8]
 80088c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80088c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088cc:	d104      	bne.n	80088d8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f240 4209 	movw	r2, #1033	@ 0x409
 80088d4:	829a      	strh	r2, [r3, #20]
 80088d6:	e002      	b.n	80088de <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	8b3a      	ldrh	r2, [r7, #24]
 80088e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80088e4:	8b3b      	ldrh	r3, [r7, #24]
 80088e6:	461a      	mov	r2, r3
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fba5 	bl	800903a <USBH_CtlReq>
 80088f0:	4603      	mov	r3, r0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	460b      	mov	r3, r1
 8008904:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	789b      	ldrb	r3, [r3, #2]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d10f      	bne.n	800892e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2205      	movs	r2, #5
 8008918:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800891a:	78fb      	ldrb	r3, [r7, #3]
 800891c:	b29a      	uxth	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800892e:	2200      	movs	r2, #0
 8008930:	2100      	movs	r1, #0
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fb81 	bl	800903a <USBH_CtlReq>
 8008938:	4603      	mov	r3, r0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b082      	sub	sp, #8
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	460b      	mov	r3, r1
 800894c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	789b      	ldrb	r3, [r3, #2]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d10e      	bne.n	8008974 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2209      	movs	r2, #9
 8008960:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	887a      	ldrh	r2, [r7, #2]
 8008966:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008974:	2200      	movs	r2, #0
 8008976:	2100      	movs	r1, #0
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fb5e 	bl	800903a <USBH_CtlReq>
 800897e:	4603      	mov	r3, r0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	789b      	ldrb	r3, [r3, #2]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d10f      	bne.n	80089bc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2203      	movs	r2, #3
 80089a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80089bc:	2200      	movs	r2, #0
 80089be:	2100      	movs	r1, #0
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fb3a 	bl	800903a <USBH_CtlReq>
 80089c6:	4603      	mov	r3, r0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	789b      	ldrb	r3, [r3, #2]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d10f      	bne.n	8008a04 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80089f6:	78fb      	ldrb	r3, [r7, #3]
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a04:	2200      	movs	r2, #0
 8008a06:	2100      	movs	r1, #0
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fb16 	bl	800903a <USBH_CtlReq>
 8008a0e:	4603      	mov	r3, r0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	4613      	mov	r3, r2
 8008a24:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008a2c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e094      	b.n	8008b66 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	781a      	ldrb	r2, [r3, #0]
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	785a      	ldrb	r2, [r3, #1]
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	3302      	adds	r3, #2
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	3303      	adds	r3, #3
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	021b      	lsls	r3, r3, #8
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	791a      	ldrb	r2, [r3, #4]
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	795a      	ldrb	r2, [r3, #5]
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	799a      	ldrb	r2, [r3, #6]
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	79da      	ldrb	r2, [r3, #7]
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d004      	beq.n	8008a9a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d11b      	bne.n	8008ad2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	79db      	ldrb	r3, [r3, #7]
 8008a9e:	2b20      	cmp	r3, #32
 8008aa0:	dc0f      	bgt.n	8008ac2 <USBH_ParseDevDesc+0xaa>
 8008aa2:	2b08      	cmp	r3, #8
 8008aa4:	db0f      	blt.n	8008ac6 <USBH_ParseDevDesc+0xae>
 8008aa6:	3b08      	subs	r3, #8
 8008aa8:	4a32      	ldr	r2, [pc, #200]	@ (8008b74 <USBH_ParseDevDesc+0x15c>)
 8008aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8008aae:	f003 0301 	and.w	r3, r3, #1
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	bf14      	ite	ne
 8008ab6:	2301      	movne	r3, #1
 8008ab8:	2300      	moveq	r3, #0
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d106      	bne.n	8008ace <USBH_ParseDevDesc+0xb6>
 8008ac0:	e001      	b.n	8008ac6 <USBH_ParseDevDesc+0xae>
 8008ac2:	2b40      	cmp	r3, #64	@ 0x40
 8008ac4:	d003      	beq.n	8008ace <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	2208      	movs	r2, #8
 8008aca:	71da      	strb	r2, [r3, #7]
        break;
 8008acc:	e000      	b.n	8008ad0 <USBH_ParseDevDesc+0xb8>
        break;
 8008ace:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008ad0:	e00e      	b.n	8008af0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d107      	bne.n	8008aec <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	79db      	ldrb	r3, [r3, #7]
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d005      	beq.n	8008af0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	2208      	movs	r2, #8
 8008ae8:	71da      	strb	r2, [r3, #7]
 8008aea:	e001      	b.n	8008af0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008aec:	2303      	movs	r3, #3
 8008aee:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008af0:	88fb      	ldrh	r3, [r7, #6]
 8008af2:	2b08      	cmp	r3, #8
 8008af4:	d936      	bls.n	8008b64 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	3308      	adds	r3, #8
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	461a      	mov	r2, r3
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	3309      	adds	r3, #9
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	021b      	lsls	r3, r3, #8
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	330a      	adds	r3, #10
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	330b      	adds	r3, #11
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	021b      	lsls	r3, r3, #8
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	4313      	orrs	r3, r2
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	330c      	adds	r3, #12
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	461a      	mov	r2, r3
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	330d      	adds	r3, #13
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	021b      	lsls	r3, r3, #8
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	7b9a      	ldrb	r2, [r3, #14]
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	7bda      	ldrb	r2, [r3, #15]
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	7c1a      	ldrb	r2, [r3, #16]
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	7c5a      	ldrb	r2, [r3, #17]
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	01000101 	.word	0x01000101

08008b78 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08c      	sub	sp, #48	@ 0x30
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	4613      	mov	r3, r2
 8008b84:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008b8c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008b94:	2300      	movs	r3, #0
 8008b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e0da      	b.n	8008d60 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	781a      	ldrb	r2, [r3, #0]
 8008bb2:	6a3b      	ldr	r3, [r7, #32]
 8008bb4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	785a      	ldrb	r2, [r3, #1]
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	3302      	adds	r3, #2
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	3303      	adds	r3, #3
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	021b      	lsls	r3, r3, #8
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bd8:	bf28      	it	cs
 8008bda:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	791a      	ldrb	r2, [r3, #4]
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	795a      	ldrb	r2, [r3, #5]
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	799a      	ldrb	r2, [r3, #6]
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	79da      	ldrb	r2, [r3, #7]
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	7a1a      	ldrb	r2, [r3, #8]
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	2b09      	cmp	r3, #9
 8008c12:	d002      	beq.n	8008c1a <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	2209      	movs	r2, #9
 8008c18:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008c1a:	88fb      	ldrh	r3, [r7, #6]
 8008c1c:	2b09      	cmp	r3, #9
 8008c1e:	f240 809d 	bls.w	8008d5c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008c22:	2309      	movs	r3, #9
 8008c24:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008c26:	2300      	movs	r3, #0
 8008c28:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c2a:	e081      	b.n	8008d30 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c2c:	f107 0316 	add.w	r3, r7, #22
 8008c30:	4619      	mov	r1, r3
 8008c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c34:	f000 f9e7 	bl	8009006 <USBH_GetNextDesc>
 8008c38:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c3c:	785b      	ldrb	r3, [r3, #1]
 8008c3e:	2b04      	cmp	r3, #4
 8008c40:	d176      	bne.n	8008d30 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b09      	cmp	r3, #9
 8008c48:	d002      	beq.n	8008c50 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4c:	2209      	movs	r2, #9
 8008c4e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c54:	221a      	movs	r2, #26
 8008c56:	fb02 f303 	mul.w	r3, r2, r3
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	6a3a      	ldr	r2, [r7, #32]
 8008c5e:	4413      	add	r3, r2
 8008c60:	3302      	adds	r3, #2
 8008c62:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008c64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c66:	69f8      	ldr	r0, [r7, #28]
 8008c68:	f000 f87e 	bl	8008d68 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008c76:	e043      	b.n	8008d00 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c78:	f107 0316 	add.w	r3, r7, #22
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c80:	f000 f9c1 	bl	8009006 <USBH_GetNextDesc>
 8008c84:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c88:	785b      	ldrb	r3, [r3, #1]
 8008c8a:	2b05      	cmp	r3, #5
 8008c8c:	d138      	bne.n	8008d00 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	795b      	ldrb	r3, [r3, #5]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d113      	bne.n	8008cbe <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d003      	beq.n	8008ca6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	799b      	ldrb	r3, [r3, #6]
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d10b      	bne.n	8008cbe <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	79db      	ldrb	r3, [r3, #7]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10b      	bne.n	8008cc6 <USBH_ParseCfgDesc+0x14e>
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	2b09      	cmp	r3, #9
 8008cb4:	d007      	beq.n	8008cc6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb8:	2209      	movs	r2, #9
 8008cba:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cbc:	e003      	b.n	8008cc6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc0:	2207      	movs	r2, #7
 8008cc2:	701a      	strb	r2, [r3, #0]
 8008cc4:	e000      	b.n	8008cc8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cc6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ccc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008cd0:	3201      	adds	r2, #1
 8008cd2:	00d2      	lsls	r2, r2, #3
 8008cd4:	211a      	movs	r1, #26
 8008cd6:	fb01 f303 	mul.w	r3, r1, r3
 8008cda:	4413      	add	r3, r2
 8008cdc:	3308      	adds	r3, #8
 8008cde:	6a3a      	ldr	r2, [r7, #32]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008ce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ce8:	69b9      	ldr	r1, [r7, #24]
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f000 f870 	bl	8008dd0 <USBH_ParseEPDesc>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008cf6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	791b      	ldrb	r3, [r3, #4]
 8008d04:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d204      	bcs.n	8008d16 <USBH_ParseCfgDesc+0x19e>
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	885a      	ldrh	r2, [r3, #2]
 8008d10:	8afb      	ldrh	r3, [r7, #22]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d8b0      	bhi.n	8008c78 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	791b      	ldrb	r3, [r3, #4]
 8008d1a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d201      	bcs.n	8008d26 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e01c      	b.n	8008d60 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008d26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d805      	bhi.n	8008d44 <USBH_ParseCfgDesc+0x1cc>
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	885a      	ldrh	r2, [r3, #2]
 8008d3c:	8afb      	ldrh	r3, [r7, #22]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	f63f af74 	bhi.w	8008c2c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008d44:	6a3b      	ldr	r3, [r7, #32]
 8008d46:	791b      	ldrb	r3, [r3, #4]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	bf28      	it	cs
 8008d4c:	2302      	movcs	r3, #2
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d201      	bcs.n	8008d5c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e001      	b.n	8008d60 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3730      	adds	r7, #48	@ 0x30
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781a      	ldrb	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	785a      	ldrb	r2, [r3, #1]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	789a      	ldrb	r2, [r3, #2]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	78da      	ldrb	r2, [r3, #3]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	3304      	adds	r3, #4
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	bf28      	it	cs
 8008d9c:	2302      	movcs	r3, #2
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	795a      	ldrb	r2, [r3, #5]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	799a      	ldrb	r2, [r3, #6]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	79da      	ldrb	r2, [r3, #7]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	7a1a      	ldrb	r2, [r3, #8]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	721a      	strb	r2, [r3, #8]
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	781a      	ldrb	r2, [r3, #0]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	785a      	ldrb	r2, [r3, #1]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	789a      	ldrb	r2, [r3, #2]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	78da      	ldrb	r2, [r3, #3]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3304      	adds	r3, #4
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	3305      	adds	r3, #5
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	021b      	lsls	r3, r3, #8
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	4313      	orrs	r3, r2
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	799a      	ldrb	r2, [r3, #6]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	889b      	ldrh	r3, [r3, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d009      	beq.n	8008e3e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e32:	d804      	bhi.n	8008e3e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e3c:	d901      	bls.n	8008e42 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d136      	bne.n	8008eba <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	78db      	ldrb	r3, [r3, #3]
 8008e50:	f003 0303 	and.w	r3, r3, #3
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d108      	bne.n	8008e6a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	889b      	ldrh	r3, [r3, #4]
 8008e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e60:	f240 8097 	bls.w	8008f92 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e64:	2303      	movs	r3, #3
 8008e66:	75fb      	strb	r3, [r7, #23]
 8008e68:	e093      	b.n	8008f92 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	78db      	ldrb	r3, [r3, #3]
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d107      	bne.n	8008e86 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	889b      	ldrh	r3, [r3, #4]
 8008e7a:	2b40      	cmp	r3, #64	@ 0x40
 8008e7c:	f240 8089 	bls.w	8008f92 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e80:	2303      	movs	r3, #3
 8008e82:	75fb      	strb	r3, [r7, #23]
 8008e84:	e085      	b.n	8008f92 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	78db      	ldrb	r3, [r3, #3]
 8008e8a:	f003 0303 	and.w	r3, r3, #3
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d005      	beq.n	8008e9e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	78db      	ldrb	r3, [r3, #3]
 8008e96:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d10a      	bne.n	8008eb4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	799b      	ldrb	r3, [r3, #6]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <USBH_ParseEPDesc+0xde>
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	799b      	ldrb	r3, [r3, #6]
 8008eaa:	2b10      	cmp	r3, #16
 8008eac:	d970      	bls.n	8008f90 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008eb2:	e06d      	b.n	8008f90 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	75fb      	strb	r3, [r7, #23]
 8008eb8:	e06b      	b.n	8008f92 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d13c      	bne.n	8008f3e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	78db      	ldrb	r3, [r3, #3]
 8008ec8:	f003 0303 	and.w	r3, r3, #3
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d005      	beq.n	8008edc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	78db      	ldrb	r3, [r3, #3]
 8008ed4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d106      	bne.n	8008eea <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	889b      	ldrh	r3, [r3, #4]
 8008ee0:	2b40      	cmp	r3, #64	@ 0x40
 8008ee2:	d956      	bls.n	8008f92 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008ee8:	e053      	b.n	8008f92 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	78db      	ldrb	r3, [r3, #3]
 8008eee:	f003 0303 	and.w	r3, r3, #3
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d10e      	bne.n	8008f14 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	799b      	ldrb	r3, [r3, #6]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d007      	beq.n	8008f0e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008f02:	2b10      	cmp	r3, #16
 8008f04:	d803      	bhi.n	8008f0e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008f0a:	2b40      	cmp	r3, #64	@ 0x40
 8008f0c:	d941      	bls.n	8008f92 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	75fb      	strb	r3, [r7, #23]
 8008f12:	e03e      	b.n	8008f92 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	78db      	ldrb	r3, [r3, #3]
 8008f18:	f003 0303 	and.w	r3, r3, #3
 8008f1c:	2b03      	cmp	r3, #3
 8008f1e:	d10b      	bne.n	8008f38 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	799b      	ldrb	r3, [r3, #6]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d004      	beq.n	8008f32 <USBH_ParseEPDesc+0x162>
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	889b      	ldrh	r3, [r3, #4]
 8008f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f30:	d32f      	bcc.n	8008f92 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008f32:	2303      	movs	r3, #3
 8008f34:	75fb      	strb	r3, [r7, #23]
 8008f36:	e02c      	b.n	8008f92 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	75fb      	strb	r3, [r7, #23]
 8008f3c:	e029      	b.n	8008f92 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d120      	bne.n	8008f8a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	78db      	ldrb	r3, [r3, #3]
 8008f4c:	f003 0303 	and.w	r3, r3, #3
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d106      	bne.n	8008f62 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	889b      	ldrh	r3, [r3, #4]
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	d01a      	beq.n	8008f92 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	75fb      	strb	r3, [r7, #23]
 8008f60:	e017      	b.n	8008f92 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	78db      	ldrb	r3, [r3, #3]
 8008f66:	f003 0303 	and.w	r3, r3, #3
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d10a      	bne.n	8008f84 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	799b      	ldrb	r3, [r3, #6]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <USBH_ParseEPDesc+0x1ae>
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	889b      	ldrh	r3, [r3, #4]
 8008f7a:	2b08      	cmp	r3, #8
 8008f7c:	d909      	bls.n	8008f92 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	75fb      	strb	r3, [r7, #23]
 8008f82:	e006      	b.n	8008f92 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008f84:	2303      	movs	r3, #3
 8008f86:	75fb      	strb	r3, [r7, #23]
 8008f88:	e003      	b.n	8008f92 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	75fb      	strb	r3, [r7, #23]
 8008f8e:	e000      	b.n	8008f92 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008f90:	bf00      	nop
  }

  return status;
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	371c      	adds	r7, #28
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	4613      	mov	r3, r2
 8008fac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	d120      	bne.n	8008ffa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	1e9a      	subs	r2, r3, #2
 8008fbe:	88fb      	ldrh	r3, [r7, #6]
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	bf28      	it	cs
 8008fc4:	4613      	movcs	r3, r2
 8008fc6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	3302      	adds	r3, #2
 8008fcc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008fce:	2300      	movs	r3, #0
 8008fd0:	82fb      	strh	r3, [r7, #22]
 8008fd2:	e00b      	b.n	8008fec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008fd4:	8afb      	ldrh	r3, [r7, #22]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	4413      	add	r3, r2
 8008fda:	781a      	ldrb	r2, [r3, #0]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008fe6:	8afb      	ldrh	r3, [r7, #22]
 8008fe8:	3302      	adds	r3, #2
 8008fea:	82fb      	strh	r3, [r7, #22]
 8008fec:	8afa      	ldrh	r2, [r7, #22]
 8008fee:	8abb      	ldrh	r3, [r7, #20]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d3ef      	bcc.n	8008fd4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	701a      	strb	r2, [r3, #0]
  }
}
 8008ffa:	bf00      	nop
 8008ffc:	371c      	adds	r7, #28
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009006:	b480      	push	{r7}
 8009008:	b085      	sub	sp, #20
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	7812      	ldrb	r2, [r2, #0]
 8009018:	4413      	add	r3, r2
 800901a:	b29a      	uxth	r2, r3
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4413      	add	r3, r2
 800902a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800902c:	68fb      	ldr	r3, [r7, #12]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b086      	sub	sp, #24
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	4613      	mov	r3, r2
 8009046:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009048:	2301      	movs	r3, #1
 800904a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	789b      	ldrb	r3, [r3, #2]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d002      	beq.n	800905a <USBH_CtlReq+0x20>
 8009054:	2b02      	cmp	r3, #2
 8009056:	d01d      	beq.n	8009094 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009058:	e043      	b.n	80090e2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	88fa      	ldrh	r2, [r7, #6]
 8009064:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2201      	movs	r2, #1
 800906a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2202      	movs	r2, #2
 8009070:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009072:	2301      	movs	r3, #1
 8009074:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2203      	movs	r2, #3
 800907a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800908a:	2300      	movs	r3, #0
 800908c:	2200      	movs	r2, #0
 800908e:	f000 fd55 	bl	8009b3c <osMessageQueuePut>
      break;
 8009092:	e026      	b.n	80090e2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f000 f829 	bl	80090ec <USBH_HandleControl>
 800909a:	4603      	mov	r3, r0
 800909c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800909e:	7dfb      	ldrb	r3, [r7, #23]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <USBH_CtlReq+0x70>
 80090a4:	7dfb      	ldrb	r3, [r7, #23]
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d106      	bne.n	80090b8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2201      	movs	r2, #1
 80090ae:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	761a      	strb	r2, [r3, #24]
 80090b6:	e005      	b.n	80090c4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d102      	bne.n	80090c4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2201      	movs	r2, #1
 80090c2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2203      	movs	r2, #3
 80090c8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80090d8:	2300      	movs	r3, #0
 80090da:	2200      	movs	r2, #0
 80090dc:	f000 fd2e 	bl	8009b3c <osMessageQueuePut>
      break;
 80090e0:	bf00      	nop
  }
  return status;
 80090e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3718      	adds	r7, #24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80090f4:	2301      	movs	r3, #1
 80090f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	7e1b      	ldrb	r3, [r3, #24]
 8009100:	3b01      	subs	r3, #1
 8009102:	2b0a      	cmp	r3, #10
 8009104:	f200 8229 	bhi.w	800955a <USBH_HandleControl+0x46e>
 8009108:	a201      	add	r2, pc, #4	@ (adr r2, 8009110 <USBH_HandleControl+0x24>)
 800910a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910e:	bf00      	nop
 8009110:	0800913d 	.word	0x0800913d
 8009114:	08009157 	.word	0x08009157
 8009118:	080091f9 	.word	0x080091f9
 800911c:	0800921f 	.word	0x0800921f
 8009120:	080092ab 	.word	0x080092ab
 8009124:	080092d5 	.word	0x080092d5
 8009128:	08009397 	.word	0x08009397
 800912c:	080093b9 	.word	0x080093b9
 8009130:	0800944b 	.word	0x0800944b
 8009134:	08009471 	.word	0x08009471
 8009138:	08009503 	.word	0x08009503
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f103 0110 	add.w	r1, r3, #16
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	795b      	ldrb	r3, [r3, #5]
 8009146:	461a      	mov	r2, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fa17 	bl	800957c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2202      	movs	r2, #2
 8009152:	761a      	strb	r2, [r3, #24]
      break;
 8009154:	e20c      	b.n	8009570 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	795b      	ldrb	r3, [r3, #5]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f003 fd77 	bl	800cc50 <USBH_LL_GetURBState>
 8009162:	4603      	mov	r3, r0
 8009164:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d12c      	bne.n	80091c6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	7c1b      	ldrb	r3, [r3, #16]
 8009170:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009174:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	8adb      	ldrh	r3, [r3, #22]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800917e:	7b7b      	ldrb	r3, [r7, #13]
 8009180:	2b80      	cmp	r3, #128	@ 0x80
 8009182:	d103      	bne.n	800918c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2203      	movs	r2, #3
 8009188:	761a      	strb	r2, [r3, #24]
 800918a:	e00d      	b.n	80091a8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2205      	movs	r2, #5
 8009190:	761a      	strb	r2, [r3, #24]
 8009192:	e009      	b.n	80091a8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009194:	7b7b      	ldrb	r3, [r7, #13]
 8009196:	2b80      	cmp	r3, #128	@ 0x80
 8009198:	d103      	bne.n	80091a2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2209      	movs	r2, #9
 800919e:	761a      	strb	r2, [r3, #24]
 80091a0:	e002      	b.n	80091a8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2207      	movs	r2, #7
 80091a6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2203      	movs	r2, #3
 80091ac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80091bc:	2300      	movs	r3, #0
 80091be:	2200      	movs	r2, #0
 80091c0:	f000 fcbc 	bl	8009b3c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091c4:	e1cb      	b.n	800955e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80091c6:	7bbb      	ldrb	r3, [r7, #14]
 80091c8:	2b04      	cmp	r3, #4
 80091ca:	d003      	beq.n	80091d4 <USBH_HandleControl+0xe8>
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	f040 81c5 	bne.w	800955e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	220b      	movs	r2, #11
 80091d8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2203      	movs	r2, #3
 80091de:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80091ee:	2300      	movs	r3, #0
 80091f0:	2200      	movs	r2, #0
 80091f2:	f000 fca3 	bl	8009b3c <osMessageQueuePut>
      break;
 80091f6:	e1b2      	b.n	800955e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80091fe:	b29a      	uxth	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6899      	ldr	r1, [r3, #8]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	899a      	ldrh	r2, [r3, #12]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	791b      	ldrb	r3, [r3, #4]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f9f2 	bl	80095fa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2204      	movs	r2, #4
 800921a:	761a      	strb	r2, [r3, #24]
      break;
 800921c:	e1a8      	b.n	8009570 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	791b      	ldrb	r3, [r3, #4]
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f003 fd13 	bl	800cc50 <USBH_LL_GetURBState>
 800922a:	4603      	mov	r3, r0
 800922c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d110      	bne.n	8009256 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2209      	movs	r2, #9
 8009238:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2203      	movs	r2, #3
 800923e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800924e:	2300      	movs	r3, #0
 8009250:	2200      	movs	r2, #0
 8009252:	f000 fc73 	bl	8009b3c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009256:	7bbb      	ldrb	r3, [r7, #14]
 8009258:	2b05      	cmp	r3, #5
 800925a:	d110      	bne.n	800927e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800925c:	2303      	movs	r3, #3
 800925e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2203      	movs	r2, #3
 8009264:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009274:	2300      	movs	r3, #0
 8009276:	2200      	movs	r2, #0
 8009278:	f000 fc60 	bl	8009b3c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800927c:	e171      	b.n	8009562 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800927e:	7bbb      	ldrb	r3, [r7, #14]
 8009280:	2b04      	cmp	r3, #4
 8009282:	f040 816e 	bne.w	8009562 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	220b      	movs	r2, #11
 800928a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2203      	movs	r2, #3
 8009290:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80092a0:	2300      	movs	r3, #0
 80092a2:	2200      	movs	r2, #0
 80092a4:	f000 fc4a 	bl	8009b3c <osMessageQueuePut>
      break;
 80092a8:	e15b      	b.n	8009562 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6899      	ldr	r1, [r3, #8]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	899a      	ldrh	r2, [r3, #12]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	795b      	ldrb	r3, [r3, #5]
 80092b6:	2001      	movs	r0, #1
 80092b8:	9000      	str	r0, [sp, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f978 	bl	80095b0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2206      	movs	r2, #6
 80092d0:	761a      	strb	r2, [r3, #24]
      break;
 80092d2:	e14d      	b.n	8009570 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	795b      	ldrb	r3, [r3, #5]
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f003 fcb8 	bl	800cc50 <USBH_LL_GetURBState>
 80092e0:	4603      	mov	r3, r0
 80092e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d111      	bne.n	800930e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2207      	movs	r2, #7
 80092ee:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2203      	movs	r2, #3
 80092f4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009304:	2300      	movs	r3, #0
 8009306:	2200      	movs	r2, #0
 8009308:	f000 fc18 	bl	8009b3c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800930c:	e12b      	b.n	8009566 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800930e:	7bbb      	ldrb	r3, [r7, #14]
 8009310:	2b05      	cmp	r3, #5
 8009312:	d113      	bne.n	800933c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	220c      	movs	r2, #12
 8009318:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800931a:	2303      	movs	r3, #3
 800931c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2203      	movs	r2, #3
 8009322:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009332:	2300      	movs	r3, #0
 8009334:	2200      	movs	r2, #0
 8009336:	f000 fc01 	bl	8009b3c <osMessageQueuePut>
      break;
 800933a:	e114      	b.n	8009566 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800933c:	7bbb      	ldrb	r3, [r7, #14]
 800933e:	2b02      	cmp	r3, #2
 8009340:	d111      	bne.n	8009366 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2205      	movs	r2, #5
 8009346:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2203      	movs	r2, #3
 800934c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800935c:	2300      	movs	r3, #0
 800935e:	2200      	movs	r2, #0
 8009360:	f000 fbec 	bl	8009b3c <osMessageQueuePut>
      break;
 8009364:	e0ff      	b.n	8009566 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8009366:	7bbb      	ldrb	r3, [r7, #14]
 8009368:	2b04      	cmp	r3, #4
 800936a:	f040 80fc 	bne.w	8009566 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	220b      	movs	r2, #11
 8009372:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009374:	2302      	movs	r3, #2
 8009376:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2203      	movs	r2, #3
 800937c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800938c:	2300      	movs	r3, #0
 800938e:	2200      	movs	r2, #0
 8009390:	f000 fbd4 	bl	8009b3c <osMessageQueuePut>
      break;
 8009394:	e0e7      	b.n	8009566 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	791b      	ldrb	r3, [r3, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	2100      	movs	r1, #0
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f92b 	bl	80095fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2208      	movs	r2, #8
 80093b4:	761a      	strb	r2, [r3, #24]

      break;
 80093b6:	e0db      	b.n	8009570 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	791b      	ldrb	r3, [r3, #4]
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f003 fc46 	bl	800cc50 <USBH_LL_GetURBState>
 80093c4:	4603      	mov	r3, r0
 80093c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d113      	bne.n	80093f6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	220d      	movs	r2, #13
 80093d2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2203      	movs	r2, #3
 80093dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80093ec:	2300      	movs	r3, #0
 80093ee:	2200      	movs	r2, #0
 80093f0:	f000 fba4 	bl	8009b3c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093f4:	e0b9      	b.n	800956a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d111      	bne.n	8009420 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	220b      	movs	r2, #11
 8009400:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2203      	movs	r2, #3
 8009406:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009416:	2300      	movs	r3, #0
 8009418:	2200      	movs	r2, #0
 800941a:	f000 fb8f 	bl	8009b3c <osMessageQueuePut>
      break;
 800941e:	e0a4      	b.n	800956a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8009420:	7bbb      	ldrb	r3, [r7, #14]
 8009422:	2b05      	cmp	r3, #5
 8009424:	f040 80a1 	bne.w	800956a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8009428:	2303      	movs	r3, #3
 800942a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2203      	movs	r2, #3
 8009430:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009440:	2300      	movs	r3, #0
 8009442:	2200      	movs	r2, #0
 8009444:	f000 fb7a 	bl	8009b3c <osMessageQueuePut>
      break;
 8009448:	e08f      	b.n	800956a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	795b      	ldrb	r3, [r3, #5]
 800944e:	2201      	movs	r2, #1
 8009450:	9200      	str	r2, [sp, #0]
 8009452:	2200      	movs	r2, #0
 8009454:	2100      	movs	r1, #0
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f8aa 	bl	80095b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009462:	b29a      	uxth	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	220a      	movs	r2, #10
 800946c:	761a      	strb	r2, [r3, #24]
      break;
 800946e:	e07f      	b.n	8009570 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	795b      	ldrb	r3, [r3, #5]
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f003 fbea 	bl	800cc50 <USBH_LL_GetURBState>
 800947c:	4603      	mov	r3, r0
 800947e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d113      	bne.n	80094ae <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	220d      	movs	r2, #13
 800948e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2203      	movs	r2, #3
 8009494:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80094a4:	2300      	movs	r3, #0
 80094a6:	2200      	movs	r2, #0
 80094a8:	f000 fb48 	bl	8009b3c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094ac:	e05f      	b.n	800956e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d111      	bne.n	80094d8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2209      	movs	r2, #9
 80094b8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2203      	movs	r2, #3
 80094be:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80094ce:	2300      	movs	r3, #0
 80094d0:	2200      	movs	r2, #0
 80094d2:	f000 fb33 	bl	8009b3c <osMessageQueuePut>
      break;
 80094d6:	e04a      	b.n	800956e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80094d8:	7bbb      	ldrb	r3, [r7, #14]
 80094da:	2b04      	cmp	r3, #4
 80094dc:	d147      	bne.n	800956e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	220b      	movs	r2, #11
 80094e2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2203      	movs	r2, #3
 80094e8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80094f8:	2300      	movs	r3, #0
 80094fa:	2200      	movs	r2, #0
 80094fc:	f000 fb1e 	bl	8009b3c <osMessageQueuePut>
      break;
 8009500:	e035      	b.n	800956e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	7e5b      	ldrb	r3, [r3, #25]
 8009506:	3301      	adds	r3, #1
 8009508:	b2da      	uxtb	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	765a      	strb	r2, [r3, #25]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	7e5b      	ldrb	r3, [r3, #25]
 8009512:	2b02      	cmp	r3, #2
 8009514:	d806      	bhi.n	8009524 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009522:	e025      	b.n	8009570 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800952a:	2106      	movs	r1, #6
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	795b      	ldrb	r3, [r3, #5]
 800953a:	4619      	mov	r1, r3
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f90d 	bl	800975c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	791b      	ldrb	r3, [r3, #4]
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f907 	bl	800975c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009554:	2302      	movs	r3, #2
 8009556:	73fb      	strb	r3, [r7, #15]
      break;
 8009558:	e00a      	b.n	8009570 <USBH_HandleControl+0x484>

    default:
      break;
 800955a:	bf00      	nop
 800955c:	e008      	b.n	8009570 <USBH_HandleControl+0x484>
      break;
 800955e:	bf00      	nop
 8009560:	e006      	b.n	8009570 <USBH_HandleControl+0x484>
      break;
 8009562:	bf00      	nop
 8009564:	e004      	b.n	8009570 <USBH_HandleControl+0x484>
      break;
 8009566:	bf00      	nop
 8009568:	e002      	b.n	8009570 <USBH_HandleControl+0x484>
      break;
 800956a:	bf00      	nop
 800956c:	e000      	b.n	8009570 <USBH_HandleControl+0x484>
      break;
 800956e:	bf00      	nop
  }

  return status;
 8009570:	7bfb      	ldrb	r3, [r7, #15]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop

0800957c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af04      	add	r7, sp, #16
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800958a:	79f9      	ldrb	r1, [r7, #7]
 800958c:	2300      	movs	r3, #0
 800958e:	9303      	str	r3, [sp, #12]
 8009590:	2308      	movs	r3, #8
 8009592:	9302      	str	r3, [sp, #8]
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	9301      	str	r3, [sp, #4]
 8009598:	2300      	movs	r3, #0
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	2300      	movs	r3, #0
 800959e:	2200      	movs	r2, #0
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f003 fb24 	bl	800cbee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b088      	sub	sp, #32
 80095b4:	af04      	add	r7, sp, #16
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	4611      	mov	r1, r2
 80095bc:	461a      	mov	r2, r3
 80095be:	460b      	mov	r3, r1
 80095c0:	80fb      	strh	r3, [r7, #6]
 80095c2:	4613      	mov	r3, r2
 80095c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80095d0:	2300      	movs	r3, #0
 80095d2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095d4:	7979      	ldrb	r1, [r7, #5]
 80095d6:	7e3b      	ldrb	r3, [r7, #24]
 80095d8:	9303      	str	r3, [sp, #12]
 80095da:	88fb      	ldrh	r3, [r7, #6]
 80095dc:	9302      	str	r3, [sp, #8]
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	2301      	movs	r3, #1
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	2300      	movs	r3, #0
 80095e8:	2200      	movs	r2, #0
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f003 faff 	bl	800cbee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b088      	sub	sp, #32
 80095fe:	af04      	add	r7, sp, #16
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	4611      	mov	r1, r2
 8009606:	461a      	mov	r2, r3
 8009608:	460b      	mov	r3, r1
 800960a:	80fb      	strh	r3, [r7, #6]
 800960c:	4613      	mov	r3, r2
 800960e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009610:	7979      	ldrb	r1, [r7, #5]
 8009612:	2300      	movs	r3, #0
 8009614:	9303      	str	r3, [sp, #12]
 8009616:	88fb      	ldrh	r3, [r7, #6]
 8009618:	9302      	str	r3, [sp, #8]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	2301      	movs	r3, #1
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	2300      	movs	r3, #0
 8009624:	2201      	movs	r2, #1
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f003 fae1 	bl	800cbee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800962c:	2300      	movs	r3, #0

}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b088      	sub	sp, #32
 800963a:	af04      	add	r7, sp, #16
 800963c:	60f8      	str	r0, [r7, #12]
 800963e:	60b9      	str	r1, [r7, #8]
 8009640:	4611      	mov	r1, r2
 8009642:	461a      	mov	r2, r3
 8009644:	460b      	mov	r3, r1
 8009646:	80fb      	strh	r3, [r7, #6]
 8009648:	4613      	mov	r3, r2
 800964a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009656:	2300      	movs	r3, #0
 8009658:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800965a:	7979      	ldrb	r1, [r7, #5]
 800965c:	7e3b      	ldrb	r3, [r7, #24]
 800965e:	9303      	str	r3, [sp, #12]
 8009660:	88fb      	ldrh	r3, [r7, #6]
 8009662:	9302      	str	r3, [sp, #8]
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	2301      	movs	r3, #1
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	2302      	movs	r3, #2
 800966e:	2200      	movs	r2, #0
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f003 fabc 	bl	800cbee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b088      	sub	sp, #32
 8009684:	af04      	add	r7, sp, #16
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	4611      	mov	r1, r2
 800968c:	461a      	mov	r2, r3
 800968e:	460b      	mov	r3, r1
 8009690:	80fb      	strh	r3, [r7, #6]
 8009692:	4613      	mov	r3, r2
 8009694:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009696:	7979      	ldrb	r1, [r7, #5]
 8009698:	2300      	movs	r3, #0
 800969a:	9303      	str	r3, [sp, #12]
 800969c:	88fb      	ldrh	r3, [r7, #6]
 800969e:	9302      	str	r3, [sp, #8]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	9301      	str	r3, [sp, #4]
 80096a4:	2301      	movs	r3, #1
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	2302      	movs	r3, #2
 80096aa:	2201      	movs	r2, #1
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f003 fa9e 	bl	800cbee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af04      	add	r7, sp, #16
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	4608      	mov	r0, r1
 80096c6:	4611      	mov	r1, r2
 80096c8:	461a      	mov	r2, r3
 80096ca:	4603      	mov	r3, r0
 80096cc:	70fb      	strb	r3, [r7, #3]
 80096ce:	460b      	mov	r3, r1
 80096d0:	70bb      	strb	r3, [r7, #2]
 80096d2:	4613      	mov	r3, r2
 80096d4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80096d6:	7878      	ldrb	r0, [r7, #1]
 80096d8:	78ba      	ldrb	r2, [r7, #2]
 80096da:	78f9      	ldrb	r1, [r7, #3]
 80096dc:	8b3b      	ldrh	r3, [r7, #24]
 80096de:	9302      	str	r3, [sp, #8]
 80096e0:	7d3b      	ldrb	r3, [r7, #20]
 80096e2:	9301      	str	r3, [sp, #4]
 80096e4:	7c3b      	ldrb	r3, [r7, #16]
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	4603      	mov	r3, r0
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f003 fa31 	bl	800cb52 <USBH_LL_OpenPipe>

  return USBH_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	460b      	mov	r3, r1
 8009704:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f003 fa50 	bl	800cbb0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f836 	bl	8009798 <USBH_GetFreePipe>
 800972c:	4603      	mov	r3, r0
 800972e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009730:	89fb      	ldrh	r3, [r7, #14]
 8009732:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009736:	4293      	cmp	r3, r2
 8009738:	d00a      	beq.n	8009750 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800973a:	78fa      	ldrb	r2, [r7, #3]
 800973c:	89fb      	ldrh	r3, [r7, #14]
 800973e:	f003 030f 	and.w	r3, r3, #15
 8009742:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	33e0      	adds	r3, #224	@ 0xe0
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	440b      	add	r3, r1
 800974e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009750:	89fb      	ldrh	r3, [r7, #14]
 8009752:	b2db      	uxtb	r3, r3
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	460b      	mov	r3, r1
 8009766:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	2b0f      	cmp	r3, #15
 800976c:	d80d      	bhi.n	800978a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	33e0      	adds	r3, #224	@ 0xe0
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	685a      	ldr	r2, [r3, #4]
 800977a:	78fb      	ldrb	r3, [r7, #3]
 800977c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009780:	6879      	ldr	r1, [r7, #4]
 8009782:	33e0      	adds	r3, #224	@ 0xe0
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	440b      	add	r3, r1
 8009788:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
 80097a8:	e00f      	b.n	80097ca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80097aa:	7bfb      	ldrb	r3, [r7, #15]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	33e0      	adds	r3, #224	@ 0xe0
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d102      	bne.n	80097c4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	e007      	b.n	80097d4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	3301      	adds	r3, #1
 80097c8:	73fb      	strb	r3, [r7, #15]
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
 80097cc:	2b0f      	cmp	r3, #15
 80097ce:	d9ec      	bls.n	80097aa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80097d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <__NVIC_SetPriority>:
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	6039      	str	r1, [r7, #0]
 80097ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80097ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	db0a      	blt.n	800980a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	490c      	ldr	r1, [pc, #48]	@ (800982c <__NVIC_SetPriority+0x4c>)
 80097fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097fe:	0112      	lsls	r2, r2, #4
 8009800:	b2d2      	uxtb	r2, r2
 8009802:	440b      	add	r3, r1
 8009804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009808:	e00a      	b.n	8009820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	b2da      	uxtb	r2, r3
 800980e:	4908      	ldr	r1, [pc, #32]	@ (8009830 <__NVIC_SetPriority+0x50>)
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	f003 030f 	and.w	r3, r3, #15
 8009816:	3b04      	subs	r3, #4
 8009818:	0112      	lsls	r2, r2, #4
 800981a:	b2d2      	uxtb	r2, r2
 800981c:	440b      	add	r3, r1
 800981e:	761a      	strb	r2, [r3, #24]
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	e000e100 	.word	0xe000e100
 8009830:	e000ed00 	.word	0xe000ed00

08009834 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009834:	b580      	push	{r7, lr}
 8009836:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009838:	4b05      	ldr	r3, [pc, #20]	@ (8009850 <SysTick_Handler+0x1c>)
 800983a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800983c:	f001 ff34 	bl	800b6a8 <xTaskGetSchedulerState>
 8009840:	4603      	mov	r3, r0
 8009842:	2b01      	cmp	r3, #1
 8009844:	d001      	beq.n	800984a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009846:	f002 fd2f 	bl	800c2a8 <xPortSysTickHandler>
  }
}
 800984a:	bf00      	nop
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	e000e010 	.word	0xe000e010

08009854 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009858:	2100      	movs	r1, #0
 800985a:	f06f 0004 	mvn.w	r0, #4
 800985e:	f7ff ffbf 	bl	80097e0 <__NVIC_SetPriority>
#endif
}
 8009862:	bf00      	nop
 8009864:	bd80      	pop	{r7, pc}
	...

08009868 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800986e:	f3ef 8305 	mrs	r3, IPSR
 8009872:	603b      	str	r3, [r7, #0]
  return(result);
 8009874:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009876:	2b00      	cmp	r3, #0
 8009878:	d003      	beq.n	8009882 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800987a:	f06f 0305 	mvn.w	r3, #5
 800987e:	607b      	str	r3, [r7, #4]
 8009880:	e00c      	b.n	800989c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009882:	4b0a      	ldr	r3, [pc, #40]	@ (80098ac <osKernelInitialize+0x44>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d105      	bne.n	8009896 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800988a:	4b08      	ldr	r3, [pc, #32]	@ (80098ac <osKernelInitialize+0x44>)
 800988c:	2201      	movs	r2, #1
 800988e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009890:	2300      	movs	r3, #0
 8009892:	607b      	str	r3, [r7, #4]
 8009894:	e002      	b.n	800989c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009896:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800989a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800989c:	687b      	ldr	r3, [r7, #4]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	2000025c 	.word	0x2000025c

080098b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098b6:	f3ef 8305 	mrs	r3, IPSR
 80098ba:	603b      	str	r3, [r7, #0]
  return(result);
 80098bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80098c2:	f06f 0305 	mvn.w	r3, #5
 80098c6:	607b      	str	r3, [r7, #4]
 80098c8:	e010      	b.n	80098ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80098ca:	4b0b      	ldr	r3, [pc, #44]	@ (80098f8 <osKernelStart+0x48>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d109      	bne.n	80098e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80098d2:	f7ff ffbf 	bl	8009854 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80098d6:	4b08      	ldr	r3, [pc, #32]	@ (80098f8 <osKernelStart+0x48>)
 80098d8:	2202      	movs	r2, #2
 80098da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80098dc:	f001 fa80 	bl	800ade0 <vTaskStartScheduler>
      stat = osOK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	607b      	str	r3, [r7, #4]
 80098e4:	e002      	b.n	80098ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80098e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80098ec:	687b      	ldr	r3, [r7, #4]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	2000025c 	.word	0x2000025c

080098fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b08e      	sub	sp, #56	@ 0x38
 8009900:	af04      	add	r7, sp, #16
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009908:	2300      	movs	r3, #0
 800990a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800990c:	f3ef 8305 	mrs	r3, IPSR
 8009910:	617b      	str	r3, [r7, #20]
  return(result);
 8009912:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009914:	2b00      	cmp	r3, #0
 8009916:	d17e      	bne.n	8009a16 <osThreadNew+0x11a>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d07b      	beq.n	8009a16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800991e:	2380      	movs	r3, #128	@ 0x80
 8009920:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009922:	2318      	movs	r3, #24
 8009924:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009926:	2300      	movs	r3, #0
 8009928:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800992a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800992e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d045      	beq.n	80099c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <osThreadNew+0x48>
        name = attr->name;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d008      	beq.n	800996a <osThreadNew+0x6e>
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	2b38      	cmp	r3, #56	@ 0x38
 800995c:	d805      	bhi.n	800996a <osThreadNew+0x6e>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <osThreadNew+0x72>
        return (NULL);
 800996a:	2300      	movs	r3, #0
 800996c:	e054      	b.n	8009a18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d003      	beq.n	800997e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	089b      	lsrs	r3, r3, #2
 800997c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00e      	beq.n	80099a4 <osThreadNew+0xa8>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	2ba7      	cmp	r3, #167	@ 0xa7
 800998c:	d90a      	bls.n	80099a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009992:	2b00      	cmp	r3, #0
 8009994:	d006      	beq.n	80099a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d002      	beq.n	80099a4 <osThreadNew+0xa8>
        mem = 1;
 800999e:	2301      	movs	r3, #1
 80099a0:	61bb      	str	r3, [r7, #24]
 80099a2:	e010      	b.n	80099c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10c      	bne.n	80099c6 <osThreadNew+0xca>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d108      	bne.n	80099c6 <osThreadNew+0xca>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d104      	bne.n	80099c6 <osThreadNew+0xca>
          mem = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	61bb      	str	r3, [r7, #24]
 80099c0:	e001      	b.n	80099c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d110      	bne.n	80099ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099d4:	9202      	str	r2, [sp, #8]
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	6a3a      	ldr	r2, [r7, #32]
 80099e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f001 f808 	bl	800a9f8 <xTaskCreateStatic>
 80099e8:	4603      	mov	r3, r0
 80099ea:	613b      	str	r3, [r7, #16]
 80099ec:	e013      	b.n	8009a16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d110      	bne.n	8009a16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80099f4:	6a3b      	ldr	r3, [r7, #32]
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	f107 0310 	add.w	r3, r7, #16
 80099fc:	9301      	str	r3, [sp, #4]
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f001 f856 	bl	800aab8 <xTaskCreate>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d001      	beq.n	8009a16 <osThreadNew+0x11a>
            hTask = NULL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009a16:	693b      	ldr	r3, [r7, #16]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3728      	adds	r7, #40	@ 0x28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a28:	f3ef 8305 	mrs	r3, IPSR
 8009a2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d003      	beq.n	8009a3c <osDelay+0x1c>
    stat = osErrorISR;
 8009a34:	f06f 0305 	mvn.w	r3, #5
 8009a38:	60fb      	str	r3, [r7, #12]
 8009a3a:	e007      	b.n	8009a4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d002      	beq.n	8009a4c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f001 f994 	bl	800ad74 <vTaskDelay>
    }
  }

  return (stat);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b08a      	sub	sp, #40	@ 0x28
 8009a5a:	af02      	add	r7, sp, #8
 8009a5c:	60f8      	str	r0, [r7, #12]
 8009a5e:	60b9      	str	r1, [r7, #8]
 8009a60:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a66:	f3ef 8305 	mrs	r3, IPSR
 8009a6a:	613b      	str	r3, [r7, #16]
  return(result);
 8009a6c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d15f      	bne.n	8009b32 <osMessageQueueNew+0xdc>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d05c      	beq.n	8009b32 <osMessageQueueNew+0xdc>
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d059      	beq.n	8009b32 <osMessageQueueNew+0xdc>
    mem = -1;
 8009a7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d029      	beq.n	8009ade <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d012      	beq.n	8009ab8 <osMessageQueueNew+0x62>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	2b4f      	cmp	r3, #79	@ 0x4f
 8009a98:	d90e      	bls.n	8009ab8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	695a      	ldr	r2, [r3, #20]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	68b9      	ldr	r1, [r7, #8]
 8009aaa:	fb01 f303 	mul.w	r3, r1, r3
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d302      	bcc.n	8009ab8 <osMessageQueueNew+0x62>
        mem = 1;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	61bb      	str	r3, [r7, #24]
 8009ab6:	e014      	b.n	8009ae2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d110      	bne.n	8009ae2 <osMessageQueueNew+0x8c>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10c      	bne.n	8009ae2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d108      	bne.n	8009ae2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d104      	bne.n	8009ae2 <osMessageQueueNew+0x8c>
          mem = 0;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	61bb      	str	r3, [r7, #24]
 8009adc:	e001      	b.n	8009ae2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d10b      	bne.n	8009b00 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	691a      	ldr	r2, [r3, #16]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	2100      	movs	r1, #0
 8009af2:	9100      	str	r1, [sp, #0]
 8009af4:	68b9      	ldr	r1, [r7, #8]
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f000 fa30 	bl	8009f5c <xQueueGenericCreateStatic>
 8009afc:	61f8      	str	r0, [r7, #28]
 8009afe:	e008      	b.n	8009b12 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d105      	bne.n	8009b12 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009b06:	2200      	movs	r2, #0
 8009b08:	68b9      	ldr	r1, [r7, #8]
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f000 faa3 	bl	800a056 <xQueueGenericCreate>
 8009b10:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00c      	beq.n	8009b32 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	617b      	str	r3, [r7, #20]
 8009b24:	e001      	b.n	8009b2a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009b2a:	6979      	ldr	r1, [r7, #20]
 8009b2c:	69f8      	ldr	r0, [r7, #28]
 8009b2e:	f000 ff05 	bl	800a93c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009b32:	69fb      	ldr	r3, [r7, #28]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3720      	adds	r7, #32
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b088      	sub	sp, #32
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	603b      	str	r3, [r7, #0]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b54:	f3ef 8305 	mrs	r3, IPSR
 8009b58:	617b      	str	r3, [r7, #20]
  return(result);
 8009b5a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d028      	beq.n	8009bb2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d005      	beq.n	8009b72 <osMessageQueuePut+0x36>
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d002      	beq.n	8009b72 <osMessageQueuePut+0x36>
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009b72:	f06f 0303 	mvn.w	r3, #3
 8009b76:	61fb      	str	r3, [r7, #28]
 8009b78:	e038      	b.n	8009bec <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009b7e:	f107 0210 	add.w	r2, r7, #16
 8009b82:	2300      	movs	r3, #0
 8009b84:	68b9      	ldr	r1, [r7, #8]
 8009b86:	69b8      	ldr	r0, [r7, #24]
 8009b88:	f000 fbc6 	bl	800a318 <xQueueGenericSendFromISR>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d003      	beq.n	8009b9a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009b92:	f06f 0302 	mvn.w	r3, #2
 8009b96:	61fb      	str	r3, [r7, #28]
 8009b98:	e028      	b.n	8009bec <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d025      	beq.n	8009bec <osMessageQueuePut+0xb0>
 8009ba0:	4b15      	ldr	r3, [pc, #84]	@ (8009bf8 <osMessageQueuePut+0xbc>)
 8009ba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	e01c      	b.n	8009bec <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d002      	beq.n	8009bbe <osMessageQueuePut+0x82>
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d103      	bne.n	8009bc6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009bbe:	f06f 0303 	mvn.w	r3, #3
 8009bc2:	61fb      	str	r3, [r7, #28]
 8009bc4:	e012      	b.n	8009bec <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	68b9      	ldr	r1, [r7, #8]
 8009bcc:	69b8      	ldr	r0, [r7, #24]
 8009bce:	f000 faa1 	bl	800a114 <xQueueGenericSend>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d009      	beq.n	8009bec <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009bde:	f06f 0301 	mvn.w	r3, #1
 8009be2:	61fb      	str	r3, [r7, #28]
 8009be4:	e002      	b.n	8009bec <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009be6:	f06f 0302 	mvn.w	r3, #2
 8009bea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009bec:	69fb      	ldr	r3, [r7, #28]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3720      	adds	r7, #32
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	e000ed04 	.word	0xe000ed04

08009bfc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b088      	sub	sp, #32
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
 8009c08:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c12:	f3ef 8305 	mrs	r3, IPSR
 8009c16:	617b      	str	r3, [r7, #20]
  return(result);
 8009c18:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d028      	beq.n	8009c70 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d005      	beq.n	8009c30 <osMessageQueueGet+0x34>
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <osMessageQueueGet+0x34>
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d003      	beq.n	8009c38 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009c30:	f06f 0303 	mvn.w	r3, #3
 8009c34:	61fb      	str	r3, [r7, #28]
 8009c36:	e037      	b.n	8009ca8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009c3c:	f107 0310 	add.w	r3, r7, #16
 8009c40:	461a      	mov	r2, r3
 8009c42:	68b9      	ldr	r1, [r7, #8]
 8009c44:	69b8      	ldr	r0, [r7, #24]
 8009c46:	f000 fce7 	bl	800a618 <xQueueReceiveFromISR>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d003      	beq.n	8009c58 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009c50:	f06f 0302 	mvn.w	r3, #2
 8009c54:	61fb      	str	r3, [r7, #28]
 8009c56:	e027      	b.n	8009ca8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d024      	beq.n	8009ca8 <osMessageQueueGet+0xac>
 8009c5e:	4b15      	ldr	r3, [pc, #84]	@ (8009cb4 <osMessageQueueGet+0xb8>)
 8009c60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c64:	601a      	str	r2, [r3, #0]
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	e01b      	b.n	8009ca8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <osMessageQueueGet+0x80>
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d103      	bne.n	8009c84 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009c7c:	f06f 0303 	mvn.w	r3, #3
 8009c80:	61fb      	str	r3, [r7, #28]
 8009c82:	e011      	b.n	8009ca8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	68b9      	ldr	r1, [r7, #8]
 8009c88:	69b8      	ldr	r0, [r7, #24]
 8009c8a:	f000 fbe3 	bl	800a454 <xQueueReceive>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d009      	beq.n	8009ca8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009c9a:	f06f 0301 	mvn.w	r3, #1
 8009c9e:	61fb      	str	r3, [r7, #28]
 8009ca0:	e002      	b.n	8009ca8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009ca2:	f06f 0302 	mvn.w	r3, #2
 8009ca6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009ca8:	69fb      	ldr	r3, [r7, #28]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3720      	adds	r7, #32
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	e000ed04 	.word	0xe000ed04

08009cb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4a07      	ldr	r2, [pc, #28]	@ (8009ce4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009cc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	4a06      	ldr	r2, [pc, #24]	@ (8009ce8 <vApplicationGetIdleTaskMemory+0x30>)
 8009cce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2280      	movs	r2, #128	@ 0x80
 8009cd4:	601a      	str	r2, [r3, #0]
}
 8009cd6:	bf00      	nop
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	20000260 	.word	0x20000260
 8009ce8:	20000308 	.word	0x20000308

08009cec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	4a07      	ldr	r2, [pc, #28]	@ (8009d18 <vApplicationGetTimerTaskMemory+0x2c>)
 8009cfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	4a06      	ldr	r2, [pc, #24]	@ (8009d1c <vApplicationGetTimerTaskMemory+0x30>)
 8009d02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d0a:	601a      	str	r2, [r3, #0]
}
 8009d0c:	bf00      	nop
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	20000508 	.word	0x20000508
 8009d1c:	200005b0 	.word	0x200005b0

08009d20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f103 0208 	add.w	r2, r3, #8
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f103 0208 	add.w	r2, r3, #8
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f103 0208 	add.w	r2, r3, #8
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d6e:	bf00      	nop
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b085      	sub	sp, #20
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	689a      	ldr	r2, [r3, #8]
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	601a      	str	r2, [r3, #0]
}
 8009db6:	bf00      	nop
 8009db8:	3714      	adds	r7, #20
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b085      	sub	sp, #20
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dd8:	d103      	bne.n	8009de2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	e00c      	b.n	8009dfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	3308      	adds	r3, #8
 8009de6:	60fb      	str	r3, [r7, #12]
 8009de8:	e002      	b.n	8009df0 <vListInsert+0x2e>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	60fb      	str	r3, [r7, #12]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d2f6      	bcs.n	8009dea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	1c5a      	adds	r2, r3, #1
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	601a      	str	r2, [r3, #0]
}
 8009e28:	bf00      	nop
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	6892      	ldr	r2, [r2, #8]
 8009e4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	6852      	ldr	r2, [r2, #4]
 8009e54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d103      	bne.n	8009e68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689a      	ldr	r2, [r3, #8]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	1e5a      	subs	r2, r3, #1
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10b      	bne.n	8009eb4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009eae:	bf00      	nop
 8009eb0:	bf00      	nop
 8009eb2:	e7fd      	b.n	8009eb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009eb4:	f002 f968 	bl	800c188 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec0:	68f9      	ldr	r1, [r7, #12]
 8009ec2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009ec4:	fb01 f303 	mul.w	r3, r1, r3
 8009ec8:	441a      	add	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	68f9      	ldr	r1, [r7, #12]
 8009ee8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009eea:	fb01 f303 	mul.w	r3, r1, r3
 8009eee:	441a      	add	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	22ff      	movs	r2, #255	@ 0xff
 8009ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	22ff      	movs	r2, #255	@ 0xff
 8009f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d114      	bne.n	8009f34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d01a      	beq.n	8009f48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3310      	adds	r3, #16
 8009f16:	4618      	mov	r0, r3
 8009f18:	f001 fa00 	bl	800b31c <xTaskRemoveFromEventList>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d012      	beq.n	8009f48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f22:	4b0d      	ldr	r3, [pc, #52]	@ (8009f58 <xQueueGenericReset+0xd0>)
 8009f24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	e009      	b.n	8009f48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3310      	adds	r3, #16
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7ff fef1 	bl	8009d20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	3324      	adds	r3, #36	@ 0x24
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7ff feec 	bl	8009d20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f48:	f002 f950 	bl	800c1ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f4c:	2301      	movs	r3, #1
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	e000ed04 	.word	0xe000ed04

08009f5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08e      	sub	sp, #56	@ 0x38
 8009f60:	af02      	add	r7, sp, #8
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10b      	bne.n	8009f88 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f82:	bf00      	nop
 8009f84:	bf00      	nop
 8009f86:	e7fd      	b.n	8009f84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10b      	bne.n	8009fa6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	e7fd      	b.n	8009fa2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <xQueueGenericCreateStatic+0x56>
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <xQueueGenericCreateStatic+0x5a>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e000      	b.n	8009fb8 <xQueueGenericCreateStatic+0x5c>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10b      	bne.n	8009fd4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	623b      	str	r3, [r7, #32]
}
 8009fce:	bf00      	nop
 8009fd0:	bf00      	nop
 8009fd2:	e7fd      	b.n	8009fd0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d102      	bne.n	8009fe0 <xQueueGenericCreateStatic+0x84>
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <xQueueGenericCreateStatic+0x88>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e000      	b.n	8009fe6 <xQueueGenericCreateStatic+0x8a>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10b      	bne.n	800a002 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	61fb      	str	r3, [r7, #28]
}
 8009ffc:	bf00      	nop
 8009ffe:	bf00      	nop
 800a000:	e7fd      	b.n	8009ffe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a002:	2350      	movs	r3, #80	@ 0x50
 800a004:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2b50      	cmp	r3, #80	@ 0x50
 800a00a:	d00b      	beq.n	800a024 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	61bb      	str	r3, [r7, #24]
}
 800a01e:	bf00      	nop
 800a020:	bf00      	nop
 800a022:	e7fd      	b.n	800a020 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a024:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a02a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00d      	beq.n	800a04c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a038:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	4613      	mov	r3, r2
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	68b9      	ldr	r1, [r7, #8]
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f000 f840 	bl	800a0cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a04e:	4618      	mov	r0, r3
 800a050:	3730      	adds	r7, #48	@ 0x30
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a056:	b580      	push	{r7, lr}
 800a058:	b08a      	sub	sp, #40	@ 0x28
 800a05a:	af02      	add	r7, sp, #8
 800a05c:	60f8      	str	r0, [r7, #12]
 800a05e:	60b9      	str	r1, [r7, #8]
 800a060:	4613      	mov	r3, r2
 800a062:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10b      	bne.n	800a082 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	613b      	str	r3, [r7, #16]
}
 800a07c:	bf00      	nop
 800a07e:	bf00      	nop
 800a080:	e7fd      	b.n	800a07e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	fb02 f303 	mul.w	r3, r2, r3
 800a08a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	3350      	adds	r3, #80	@ 0x50
 800a090:	4618      	mov	r0, r3
 800a092:	f002 f99b 	bl	800c3cc <pvPortMalloc>
 800a096:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d011      	beq.n	800a0c2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	3350      	adds	r3, #80	@ 0x50
 800a0a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0b0:	79fa      	ldrb	r2, [r7, #7]
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	68b9      	ldr	r1, [r7, #8]
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f000 f805 	bl	800a0cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0c2:	69bb      	ldr	r3, [r7, #24]
	}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3720      	adds	r7, #32
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
 800a0d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d103      	bne.n	800a0e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	69ba      	ldr	r2, [r7, #24]
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	e002      	b.n	800a0ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	69b8      	ldr	r0, [r7, #24]
 800a0fe:	f7ff fec3 	bl	8009e88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	78fa      	ldrb	r2, [r7, #3]
 800a106:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a10a:	bf00      	nop
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08e      	sub	sp, #56	@ 0x38
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
 800a120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a122:	2300      	movs	r3, #0
 800a124:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10b      	bne.n	800a148 <xQueueGenericSend+0x34>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a142:	bf00      	nop
 800a144:	bf00      	nop
 800a146:	e7fd      	b.n	800a144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d103      	bne.n	800a156 <xQueueGenericSend+0x42>
 800a14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <xQueueGenericSend+0x46>
 800a156:	2301      	movs	r3, #1
 800a158:	e000      	b.n	800a15c <xQueueGenericSend+0x48>
 800a15a:	2300      	movs	r3, #0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10b      	bne.n	800a178 <xQueueGenericSend+0x64>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a172:	bf00      	nop
 800a174:	bf00      	nop
 800a176:	e7fd      	b.n	800a174 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d103      	bne.n	800a186 <xQueueGenericSend+0x72>
 800a17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a182:	2b01      	cmp	r3, #1
 800a184:	d101      	bne.n	800a18a <xQueueGenericSend+0x76>
 800a186:	2301      	movs	r3, #1
 800a188:	e000      	b.n	800a18c <xQueueGenericSend+0x78>
 800a18a:	2300      	movs	r3, #0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10b      	bne.n	800a1a8 <xQueueGenericSend+0x94>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	623b      	str	r3, [r7, #32]
}
 800a1a2:	bf00      	nop
 800a1a4:	bf00      	nop
 800a1a6:	e7fd      	b.n	800a1a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1a8:	f001 fa7e 	bl	800b6a8 <xTaskGetSchedulerState>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d102      	bne.n	800a1b8 <xQueueGenericSend+0xa4>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <xQueueGenericSend+0xa8>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e000      	b.n	800a1be <xQueueGenericSend+0xaa>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10b      	bne.n	800a1da <xQueueGenericSend+0xc6>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	61fb      	str	r3, [r7, #28]
}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop
 800a1d8:	e7fd      	b.n	800a1d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1da:	f001 ffd5 	bl	800c188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d302      	bcc.n	800a1f0 <xQueueGenericSend+0xdc>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d129      	bne.n	800a244 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	68b9      	ldr	r1, [r7, #8]
 800a1f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1f6:	f000 fa91 	bl	800a71c <prvCopyDataToQueue>
 800a1fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a200:	2b00      	cmp	r3, #0
 800a202:	d010      	beq.n	800a226 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a206:	3324      	adds	r3, #36	@ 0x24
 800a208:	4618      	mov	r0, r3
 800a20a:	f001 f887 	bl	800b31c <xTaskRemoveFromEventList>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d013      	beq.n	800a23c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a214:	4b3f      	ldr	r3, [pc, #252]	@ (800a314 <xQueueGenericSend+0x200>)
 800a216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	e00a      	b.n	800a23c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d007      	beq.n	800a23c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a22c:	4b39      	ldr	r3, [pc, #228]	@ (800a314 <xQueueGenericSend+0x200>)
 800a22e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a23c:	f001 ffd6 	bl	800c1ec <vPortExitCritical>
				return pdPASS;
 800a240:	2301      	movs	r3, #1
 800a242:	e063      	b.n	800a30c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d103      	bne.n	800a252 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a24a:	f001 ffcf 	bl	800c1ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a24e:	2300      	movs	r3, #0
 800a250:	e05c      	b.n	800a30c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a254:	2b00      	cmp	r3, #0
 800a256:	d106      	bne.n	800a266 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a258:	f107 0314 	add.w	r3, r7, #20
 800a25c:	4618      	mov	r0, r3
 800a25e:	f001 f8c1 	bl	800b3e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a262:	2301      	movs	r3, #1
 800a264:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a266:	f001 ffc1 	bl	800c1ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a26a:	f000 fe29 	bl	800aec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a26e:	f001 ff8b 	bl	800c188 <vPortEnterCritical>
 800a272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a278:	b25b      	sxtb	r3, r3
 800a27a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a27e:	d103      	bne.n	800a288 <xQueueGenericSend+0x174>
 800a280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a282:	2200      	movs	r2, #0
 800a284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a28e:	b25b      	sxtb	r3, r3
 800a290:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a294:	d103      	bne.n	800a29e <xQueueGenericSend+0x18a>
 800a296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a29e:	f001 ffa5 	bl	800c1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2a2:	1d3a      	adds	r2, r7, #4
 800a2a4:	f107 0314 	add.w	r3, r7, #20
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f001 f8b0 	bl	800b410 <xTaskCheckForTimeOut>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d124      	bne.n	800a300 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2b8:	f000 fb28 	bl	800a90c <prvIsQueueFull>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d018      	beq.n	800a2f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c4:	3310      	adds	r3, #16
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 ffd4 	bl	800b278 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2d2:	f000 fab3 	bl	800a83c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2d6:	f000 fe01 	bl	800aedc <xTaskResumeAll>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f47f af7c 	bne.w	800a1da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a314 <xQueueGenericSend+0x200>)
 800a2e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2e8:	601a      	str	r2, [r3, #0]
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	e772      	b.n	800a1da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2f6:	f000 faa1 	bl	800a83c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2fa:	f000 fdef 	bl	800aedc <xTaskResumeAll>
 800a2fe:	e76c      	b.n	800a1da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a302:	f000 fa9b 	bl	800a83c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a306:	f000 fde9 	bl	800aedc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a30a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3738      	adds	r7, #56	@ 0x38
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	e000ed04 	.word	0xe000ed04

0800a318 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b090      	sub	sp, #64	@ 0x40
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10b      	bne.n	800a348 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a342:	bf00      	nop
 800a344:	bf00      	nop
 800a346:	e7fd      	b.n	800a344 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d103      	bne.n	800a356 <xQueueGenericSendFromISR+0x3e>
 800a34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <xQueueGenericSendFromISR+0x42>
 800a356:	2301      	movs	r3, #1
 800a358:	e000      	b.n	800a35c <xQueueGenericSendFromISR+0x44>
 800a35a:	2300      	movs	r3, #0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10b      	bne.n	800a378 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a372:	bf00      	nop
 800a374:	bf00      	nop
 800a376:	e7fd      	b.n	800a374 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d103      	bne.n	800a386 <xQueueGenericSendFromISR+0x6e>
 800a37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a382:	2b01      	cmp	r3, #1
 800a384:	d101      	bne.n	800a38a <xQueueGenericSendFromISR+0x72>
 800a386:	2301      	movs	r3, #1
 800a388:	e000      	b.n	800a38c <xQueueGenericSendFromISR+0x74>
 800a38a:	2300      	movs	r3, #0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10b      	bne.n	800a3a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	623b      	str	r3, [r7, #32]
}
 800a3a2:	bf00      	nop
 800a3a4:	bf00      	nop
 800a3a6:	e7fd      	b.n	800a3a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3a8:	f001 ffce 	bl	800c348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a3ac:	f3ef 8211 	mrs	r2, BASEPRI
 800a3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	61fa      	str	r2, [r7, #28]
 800a3c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d302      	bcc.n	800a3da <xQueueGenericSendFromISR+0xc2>
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d12f      	bne.n	800a43a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	68b9      	ldr	r1, [r7, #8]
 800a3ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a3f0:	f000 f994 	bl	800a71c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a3f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3fc:	d112      	bne.n	800a424 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a402:	2b00      	cmp	r3, #0
 800a404:	d016      	beq.n	800a434 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a408:	3324      	adds	r3, #36	@ 0x24
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 ff86 	bl	800b31c <xTaskRemoveFromEventList>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00e      	beq.n	800a434 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00b      	beq.n	800a434 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	e007      	b.n	800a434 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a424:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a428:	3301      	adds	r3, #1
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	b25a      	sxtb	r2, r3
 800a42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a434:	2301      	movs	r3, #1
 800a436:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a438:	e001      	b.n	800a43e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a43a:	2300      	movs	r3, #0
 800a43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a43e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a440:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a448:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a44a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3740      	adds	r7, #64	@ 0x40
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08c      	sub	sp, #48	@ 0x30
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a460:	2300      	movs	r3, #0
 800a462:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10b      	bne.n	800a486 <xQueueReceive+0x32>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	623b      	str	r3, [r7, #32]
}
 800a480:	bf00      	nop
 800a482:	bf00      	nop
 800a484:	e7fd      	b.n	800a482 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d103      	bne.n	800a494 <xQueueReceive+0x40>
 800a48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <xQueueReceive+0x44>
 800a494:	2301      	movs	r3, #1
 800a496:	e000      	b.n	800a49a <xQueueReceive+0x46>
 800a498:	2300      	movs	r3, #0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10b      	bne.n	800a4b6 <xQueueReceive+0x62>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	61fb      	str	r3, [r7, #28]
}
 800a4b0:	bf00      	nop
 800a4b2:	bf00      	nop
 800a4b4:	e7fd      	b.n	800a4b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4b6:	f001 f8f7 	bl	800b6a8 <xTaskGetSchedulerState>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d102      	bne.n	800a4c6 <xQueueReceive+0x72>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <xQueueReceive+0x76>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e000      	b.n	800a4cc <xQueueReceive+0x78>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10b      	bne.n	800a4e8 <xQueueReceive+0x94>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	61bb      	str	r3, [r7, #24]
}
 800a4e2:	bf00      	nop
 800a4e4:	bf00      	nop
 800a4e6:	e7fd      	b.n	800a4e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4e8:	f001 fe4e 	bl	800c188 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d01f      	beq.n	800a538 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4f8:	68b9      	ldr	r1, [r7, #8]
 800a4fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4fc:	f000 f978 	bl	800a7f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a502:	1e5a      	subs	r2, r3, #1
 800a504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a506:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00f      	beq.n	800a530 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a512:	3310      	adds	r3, #16
 800a514:	4618      	mov	r0, r3
 800a516:	f000 ff01 	bl	800b31c <xTaskRemoveFromEventList>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d007      	beq.n	800a530 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a520:	4b3c      	ldr	r3, [pc, #240]	@ (800a614 <xQueueReceive+0x1c0>)
 800a522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a526:	601a      	str	r2, [r3, #0]
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a530:	f001 fe5c 	bl	800c1ec <vPortExitCritical>
				return pdPASS;
 800a534:	2301      	movs	r3, #1
 800a536:	e069      	b.n	800a60c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d103      	bne.n	800a546 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a53e:	f001 fe55 	bl	800c1ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a542:	2300      	movs	r3, #0
 800a544:	e062      	b.n	800a60c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d106      	bne.n	800a55a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a54c:	f107 0310 	add.w	r3, r7, #16
 800a550:	4618      	mov	r0, r3
 800a552:	f000 ff47 	bl	800b3e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a556:	2301      	movs	r3, #1
 800a558:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a55a:	f001 fe47 	bl	800c1ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a55e:	f000 fcaf 	bl	800aec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a562:	f001 fe11 	bl	800c188 <vPortEnterCritical>
 800a566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a56c:	b25b      	sxtb	r3, r3
 800a56e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a572:	d103      	bne.n	800a57c <xQueueReceive+0x128>
 800a574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a582:	b25b      	sxtb	r3, r3
 800a584:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a588:	d103      	bne.n	800a592 <xQueueReceive+0x13e>
 800a58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a592:	f001 fe2b 	bl	800c1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a596:	1d3a      	adds	r2, r7, #4
 800a598:	f107 0310 	add.w	r3, r7, #16
 800a59c:	4611      	mov	r1, r2
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 ff36 	bl	800b410 <xTaskCheckForTimeOut>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d123      	bne.n	800a5f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5ac:	f000 f998 	bl	800a8e0 <prvIsQueueEmpty>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d017      	beq.n	800a5e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b8:	3324      	adds	r3, #36	@ 0x24
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	4611      	mov	r1, r2
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 fe5a 	bl	800b278 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5c6:	f000 f939 	bl	800a83c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5ca:	f000 fc87 	bl	800aedc <xTaskResumeAll>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d189      	bne.n	800a4e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a5d4:	4b0f      	ldr	r3, [pc, #60]	@ (800a614 <xQueueReceive+0x1c0>)
 800a5d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	e780      	b.n	800a4e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a5e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5e8:	f000 f928 	bl	800a83c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5ec:	f000 fc76 	bl	800aedc <xTaskResumeAll>
 800a5f0:	e77a      	b.n	800a4e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5f4:	f000 f922 	bl	800a83c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5f8:	f000 fc70 	bl	800aedc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5fe:	f000 f96f 	bl	800a8e0 <prvIsQueueEmpty>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	f43f af6f 	beq.w	800a4e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a60a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3730      	adds	r7, #48	@ 0x30
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	e000ed04 	.word	0xe000ed04

0800a618 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b08e      	sub	sp, #56	@ 0x38
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10b      	bne.n	800a646 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	623b      	str	r3, [r7, #32]
}
 800a640:	bf00      	nop
 800a642:	bf00      	nop
 800a644:	e7fd      	b.n	800a642 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d103      	bne.n	800a654 <xQueueReceiveFromISR+0x3c>
 800a64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a650:	2b00      	cmp	r3, #0
 800a652:	d101      	bne.n	800a658 <xQueueReceiveFromISR+0x40>
 800a654:	2301      	movs	r3, #1
 800a656:	e000      	b.n	800a65a <xQueueReceiveFromISR+0x42>
 800a658:	2300      	movs	r3, #0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10b      	bne.n	800a676 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	61fb      	str	r3, [r7, #28]
}
 800a670:	bf00      	nop
 800a672:	bf00      	nop
 800a674:	e7fd      	b.n	800a672 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a676:	f001 fe67 	bl	800c348 <vPortValidateInterruptPriority>
	__asm volatile
 800a67a:	f3ef 8211 	mrs	r2, BASEPRI
 800a67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	61ba      	str	r2, [r7, #24]
 800a690:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a692:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a694:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a69a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d02f      	beq.n	800a702 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6ac:	68b9      	ldr	r1, [r7, #8]
 800a6ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6b0:	f000 f89e 	bl	800a7f0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b6:	1e5a      	subs	r2, r3, #1
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a6bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a6c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6c4:	d112      	bne.n	800a6ec <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d016      	beq.n	800a6fc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d0:	3310      	adds	r3, #16
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 fe22 	bl	800b31c <xTaskRemoveFromEventList>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00e      	beq.n	800a6fc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00b      	beq.n	800a6fc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	601a      	str	r2, [r3, #0]
 800a6ea:	e007      	b.n	800a6fc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	b25a      	sxtb	r2, r3
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a700:	e001      	b.n	800a706 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a702:	2300      	movs	r3, #0
 800a704:	637b      	str	r3, [r7, #52]	@ 0x34
 800a706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a708:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	f383 8811 	msr	BASEPRI, r3
}
 800a710:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a714:	4618      	mov	r0, r3
 800a716:	3738      	adds	r7, #56	@ 0x38
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a728:	2300      	movs	r3, #0
 800a72a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a730:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10d      	bne.n	800a756 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d14d      	bne.n	800a7de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	4618      	mov	r0, r3
 800a748:	f000 ffcc 	bl	800b6e4 <xTaskPriorityDisinherit>
 800a74c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	609a      	str	r2, [r3, #8]
 800a754:	e043      	b.n	800a7de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d119      	bne.n	800a790 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6858      	ldr	r0, [r3, #4]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a764:	461a      	mov	r2, r3
 800a766:	68b9      	ldr	r1, [r7, #8]
 800a768:	f002 fc9a 	bl	800d0a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a774:	441a      	add	r2, r3
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	429a      	cmp	r2, r3
 800a784:	d32b      	bcc.n	800a7de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	605a      	str	r2, [r3, #4]
 800a78e:	e026      	b.n	800a7de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	68d8      	ldr	r0, [r3, #12]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a798:	461a      	mov	r2, r3
 800a79a:	68b9      	ldr	r1, [r7, #8]
 800a79c:	f002 fc80 	bl	800d0a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	68da      	ldr	r2, [r3, #12]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7a8:	425b      	negs	r3, r3
 800a7aa:	441a      	add	r2, r3
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	68da      	ldr	r2, [r3, #12]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d207      	bcs.n	800a7cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	689a      	ldr	r2, [r3, #8]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c4:	425b      	negs	r3, r3
 800a7c6:	441a      	add	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d105      	bne.n	800a7de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d002      	beq.n	800a7de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	1c5a      	adds	r2, r3, #1
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a7e6:	697b      	ldr	r3, [r7, #20]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d018      	beq.n	800a834 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	68da      	ldr	r2, [r3, #12]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a80a:	441a      	add	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	68da      	ldr	r2, [r3, #12]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d303      	bcc.n	800a824 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	68d9      	ldr	r1, [r3, #12]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a82c:	461a      	mov	r2, r3
 800a82e:	6838      	ldr	r0, [r7, #0]
 800a830:	f002 fc36 	bl	800d0a0 <memcpy>
	}
}
 800a834:	bf00      	nop
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a844:	f001 fca0 	bl	800c188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a84e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a850:	e011      	b.n	800a876 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a856:	2b00      	cmp	r3, #0
 800a858:	d012      	beq.n	800a880 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	3324      	adds	r3, #36	@ 0x24
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 fd5c 	bl	800b31c <xTaskRemoveFromEventList>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a86a:	f000 fe35 	bl	800b4d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a86e:	7bfb      	ldrb	r3, [r7, #15]
 800a870:	3b01      	subs	r3, #1
 800a872:	b2db      	uxtb	r3, r3
 800a874:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	dce9      	bgt.n	800a852 <prvUnlockQueue+0x16>
 800a87e:	e000      	b.n	800a882 <prvUnlockQueue+0x46>
					break;
 800a880:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	22ff      	movs	r2, #255	@ 0xff
 800a886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a88a:	f001 fcaf 	bl	800c1ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a88e:	f001 fc7b 	bl	800c188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a898:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a89a:	e011      	b.n	800a8c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d012      	beq.n	800a8ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	3310      	adds	r3, #16
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 fd37 	bl	800b31c <xTaskRemoveFromEventList>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d001      	beq.n	800a8b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8b4:	f000 fe10 	bl	800b4d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8b8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	dce9      	bgt.n	800a89c <prvUnlockQueue+0x60>
 800a8c8:	e000      	b.n	800a8cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a8ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	22ff      	movs	r2, #255	@ 0xff
 800a8d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a8d4:	f001 fc8a 	bl	800c1ec <vPortExitCritical>
}
 800a8d8:	bf00      	nop
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8e8:	f001 fc4e 	bl	800c188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d102      	bne.n	800a8fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	e001      	b.n	800a8fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8fe:	f001 fc75 	bl	800c1ec <vPortExitCritical>

	return xReturn;
 800a902:	68fb      	ldr	r3, [r7, #12]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a914:	f001 fc38 	bl	800c188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a920:	429a      	cmp	r2, r3
 800a922:	d102      	bne.n	800a92a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a924:	2301      	movs	r3, #1
 800a926:	60fb      	str	r3, [r7, #12]
 800a928:	e001      	b.n	800a92e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a92a:	2300      	movs	r3, #0
 800a92c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a92e:	f001 fc5d 	bl	800c1ec <vPortExitCritical>

	return xReturn;
 800a932:	68fb      	ldr	r3, [r7, #12]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a946:	2300      	movs	r3, #0
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	e014      	b.n	800a976 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a94c:	4a0f      	ldr	r2, [pc, #60]	@ (800a98c <vQueueAddToRegistry+0x50>)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10b      	bne.n	800a970 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a958:	490c      	ldr	r1, [pc, #48]	@ (800a98c <vQueueAddToRegistry+0x50>)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a962:	4a0a      	ldr	r2, [pc, #40]	@ (800a98c <vQueueAddToRegistry+0x50>)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	00db      	lsls	r3, r3, #3
 800a968:	4413      	add	r3, r2
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a96e:	e006      	b.n	800a97e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	3301      	adds	r3, #1
 800a974:	60fb      	str	r3, [r7, #12]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2b07      	cmp	r3, #7
 800a97a:	d9e7      	bls.n	800a94c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a97c:	bf00      	nop
 800a97e:	bf00      	nop
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	200009b0 	.word	0x200009b0

0800a990 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a9a0:	f001 fbf2 	bl	800c188 <vPortEnterCritical>
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9aa:	b25b      	sxtb	r3, r3
 800a9ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9b0:	d103      	bne.n	800a9ba <vQueueWaitForMessageRestricted+0x2a>
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9c0:	b25b      	sxtb	r3, r3
 800a9c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9c6:	d103      	bne.n	800a9d0 <vQueueWaitForMessageRestricted+0x40>
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9d0:	f001 fc0c 	bl	800c1ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d106      	bne.n	800a9ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	3324      	adds	r3, #36	@ 0x24
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	68b9      	ldr	r1, [r7, #8]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f000 fc6d 	bl	800b2c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a9ea:	6978      	ldr	r0, [r7, #20]
 800a9ec:	f7ff ff26 	bl	800a83c <prvUnlockQueue>
	}
 800a9f0:	bf00      	nop
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b08e      	sub	sp, #56	@ 0x38
 800a9fc:	af04      	add	r7, sp, #16
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
 800aa04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10b      	bne.n	800aa24 <xTaskCreateStatic+0x2c>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	623b      	str	r3, [r7, #32]
}
 800aa1e:	bf00      	nop
 800aa20:	bf00      	nop
 800aa22:	e7fd      	b.n	800aa20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10b      	bne.n	800aa42 <xTaskCreateStatic+0x4a>
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	61fb      	str	r3, [r7, #28]
}
 800aa3c:	bf00      	nop
 800aa3e:	bf00      	nop
 800aa40:	e7fd      	b.n	800aa3e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa42:	23a8      	movs	r3, #168	@ 0xa8
 800aa44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	2ba8      	cmp	r3, #168	@ 0xa8
 800aa4a:	d00b      	beq.n	800aa64 <xTaskCreateStatic+0x6c>
	__asm volatile
 800aa4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa50:	f383 8811 	msr	BASEPRI, r3
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	61bb      	str	r3, [r7, #24]
}
 800aa5e:	bf00      	nop
 800aa60:	bf00      	nop
 800aa62:	e7fd      	b.n	800aa60 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d01e      	beq.n	800aaaa <xTaskCreateStatic+0xb2>
 800aa6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d01b      	beq.n	800aaaa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7e:	2202      	movs	r2, #2
 800aa80:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa84:	2300      	movs	r3, #0
 800aa86:	9303      	str	r3, [sp, #12]
 800aa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8a:	9302      	str	r3, [sp, #8]
 800aa8c:	f107 0314 	add.w	r3, r7, #20
 800aa90:	9301      	str	r3, [sp, #4]
 800aa92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	68b9      	ldr	r1, [r7, #8]
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f000 f851 	bl	800ab44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aaa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aaa4:	f000 f8f6 	bl	800ac94 <prvAddNewTaskToReadyList>
 800aaa8:	e001      	b.n	800aaae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aaae:	697b      	ldr	r3, [r7, #20]
	}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3728      	adds	r7, #40	@ 0x28
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b08c      	sub	sp, #48	@ 0x30
 800aabc:	af04      	add	r7, sp, #16
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	4613      	mov	r3, r2
 800aac6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aac8:	88fb      	ldrh	r3, [r7, #6]
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4618      	mov	r0, r3
 800aace:	f001 fc7d 	bl	800c3cc <pvPortMalloc>
 800aad2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00e      	beq.n	800aaf8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aada:	20a8      	movs	r0, #168	@ 0xa8
 800aadc:	f001 fc76 	bl	800c3cc <pvPortMalloc>
 800aae0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d003      	beq.n	800aaf0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	631a      	str	r2, [r3, #48]	@ 0x30
 800aaee:	e005      	b.n	800aafc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aaf0:	6978      	ldr	r0, [r7, #20]
 800aaf2:	f001 fd39 	bl	800c568 <vPortFree>
 800aaf6:	e001      	b.n	800aafc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d017      	beq.n	800ab32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab0a:	88fa      	ldrh	r2, [r7, #6]
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	9303      	str	r3, [sp, #12]
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	9302      	str	r3, [sp, #8]
 800ab14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab16:	9301      	str	r3, [sp, #4]
 800ab18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	68b9      	ldr	r1, [r7, #8]
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f000 f80f 	bl	800ab44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab26:	69f8      	ldr	r0, [r7, #28]
 800ab28:	f000 f8b4 	bl	800ac94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	61bb      	str	r3, [r7, #24]
 800ab30:	e002      	b.n	800ab38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab38:	69bb      	ldr	r3, [r7, #24]
	}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3720      	adds	r7, #32
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b088      	sub	sp, #32
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
 800ab50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab54:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	21a5      	movs	r1, #165	@ 0xa5
 800ab5e:	f002 fa05 	bl	800cf6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	f023 0307 	bic.w	r3, r3, #7
 800ab7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	f003 0307 	and.w	r3, r3, #7
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00b      	beq.n	800ab9e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ab86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	617b      	str	r3, [r7, #20]
}
 800ab98:	bf00      	nop
 800ab9a:	bf00      	nop
 800ab9c:	e7fd      	b.n	800ab9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d01f      	beq.n	800abe4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aba4:	2300      	movs	r3, #0
 800aba6:	61fb      	str	r3, [r7, #28]
 800aba8:	e012      	b.n	800abd0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	4413      	add	r3, r2
 800abb0:	7819      	ldrb	r1, [r3, #0]
 800abb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	4413      	add	r3, r2
 800abb8:	3334      	adds	r3, #52	@ 0x34
 800abba:	460a      	mov	r2, r1
 800abbc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	4413      	add	r3, r2
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d006      	beq.n	800abd8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	3301      	adds	r3, #1
 800abce:	61fb      	str	r3, [r7, #28]
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	2b0f      	cmp	r3, #15
 800abd4:	d9e9      	bls.n	800abaa <prvInitialiseNewTask+0x66>
 800abd6:	e000      	b.n	800abda <prvInitialiseNewTask+0x96>
			{
				break;
 800abd8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800abda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abdc:	2200      	movs	r2, #0
 800abde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800abe2:	e003      	b.n	800abec <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800abe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800abec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abee:	2b37      	cmp	r3, #55	@ 0x37
 800abf0:	d901      	bls.n	800abf6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800abf2:	2337      	movs	r3, #55	@ 0x37
 800abf4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800abf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abfa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800abfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac00:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac04:	2200      	movs	r2, #0
 800ac06:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7ff f8a7 	bl	8009d60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac14:	3318      	adds	r3, #24
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7ff f8a2 	bl	8009d60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ac28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac30:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac34:	2200      	movs	r2, #0
 800ac36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ac42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac44:	3354      	adds	r3, #84	@ 0x54
 800ac46:	224c      	movs	r2, #76	@ 0x4c
 800ac48:	2100      	movs	r1, #0
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f002 f98e 	bl	800cf6c <memset>
 800ac50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac52:	4a0d      	ldr	r2, [pc, #52]	@ (800ac88 <prvInitialiseNewTask+0x144>)
 800ac54:	659a      	str	r2, [r3, #88]	@ 0x58
 800ac56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac58:	4a0c      	ldr	r2, [pc, #48]	@ (800ac8c <prvInitialiseNewTask+0x148>)
 800ac5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5e:	4a0c      	ldr	r2, [pc, #48]	@ (800ac90 <prvInitialiseNewTask+0x14c>)
 800ac60:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	68f9      	ldr	r1, [r7, #12]
 800ac66:	69b8      	ldr	r0, [r7, #24]
 800ac68:	f001 f95a 	bl	800bf20 <pxPortInitialiseStack>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac7e:	bf00      	nop
 800ac80:	3720      	adds	r7, #32
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	20005414 	.word	0x20005414
 800ac8c:	2000547c 	.word	0x2000547c
 800ac90:	200054e4 	.word	0x200054e4

0800ac94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac9c:	f001 fa74 	bl	800c188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aca0:	4b2d      	ldr	r3, [pc, #180]	@ (800ad58 <prvAddNewTaskToReadyList+0xc4>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	3301      	adds	r3, #1
 800aca6:	4a2c      	ldr	r2, [pc, #176]	@ (800ad58 <prvAddNewTaskToReadyList+0xc4>)
 800aca8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800acaa:	4b2c      	ldr	r3, [pc, #176]	@ (800ad5c <prvAddNewTaskToReadyList+0xc8>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d109      	bne.n	800acc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800acb2:	4a2a      	ldr	r2, [pc, #168]	@ (800ad5c <prvAddNewTaskToReadyList+0xc8>)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800acb8:	4b27      	ldr	r3, [pc, #156]	@ (800ad58 <prvAddNewTaskToReadyList+0xc4>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d110      	bne.n	800ace2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800acc0:	f000 fc2e 	bl	800b520 <prvInitialiseTaskLists>
 800acc4:	e00d      	b.n	800ace2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800acc6:	4b26      	ldr	r3, [pc, #152]	@ (800ad60 <prvAddNewTaskToReadyList+0xcc>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d109      	bne.n	800ace2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800acce:	4b23      	ldr	r3, [pc, #140]	@ (800ad5c <prvAddNewTaskToReadyList+0xc8>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd8:	429a      	cmp	r2, r3
 800acda:	d802      	bhi.n	800ace2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acdc:	4a1f      	ldr	r2, [pc, #124]	@ (800ad5c <prvAddNewTaskToReadyList+0xc8>)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ace2:	4b20      	ldr	r3, [pc, #128]	@ (800ad64 <prvAddNewTaskToReadyList+0xd0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3301      	adds	r3, #1
 800ace8:	4a1e      	ldr	r2, [pc, #120]	@ (800ad64 <prvAddNewTaskToReadyList+0xd0>)
 800acea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800acec:	4b1d      	ldr	r3, [pc, #116]	@ (800ad64 <prvAddNewTaskToReadyList+0xd0>)
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acf8:	4b1b      	ldr	r3, [pc, #108]	@ (800ad68 <prvAddNewTaskToReadyList+0xd4>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d903      	bls.n	800ad08 <prvAddNewTaskToReadyList+0x74>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad04:	4a18      	ldr	r2, [pc, #96]	@ (800ad68 <prvAddNewTaskToReadyList+0xd4>)
 800ad06:	6013      	str	r3, [r2, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4a15      	ldr	r2, [pc, #84]	@ (800ad6c <prvAddNewTaskToReadyList+0xd8>)
 800ad16:	441a      	add	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	4610      	mov	r0, r2
 800ad20:	f7ff f82b 	bl	8009d7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad24:	f001 fa62 	bl	800c1ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad28:	4b0d      	ldr	r3, [pc, #52]	@ (800ad60 <prvAddNewTaskToReadyList+0xcc>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00e      	beq.n	800ad4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad30:	4b0a      	ldr	r3, [pc, #40]	@ (800ad5c <prvAddNewTaskToReadyList+0xc8>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d207      	bcs.n	800ad4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ad70 <prvAddNewTaskToReadyList+0xdc>)
 800ad40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad4e:	bf00      	nop
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20000ec4 	.word	0x20000ec4
 800ad5c:	200009f0 	.word	0x200009f0
 800ad60:	20000ed0 	.word	0x20000ed0
 800ad64:	20000ee0 	.word	0x20000ee0
 800ad68:	20000ecc 	.word	0x20000ecc
 800ad6c:	200009f4 	.word	0x200009f4
 800ad70:	e000ed04 	.word	0xe000ed04

0800ad74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d018      	beq.n	800adb8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad86:	4b14      	ldr	r3, [pc, #80]	@ (800add8 <vTaskDelay+0x64>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00b      	beq.n	800ada6 <vTaskDelay+0x32>
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	60bb      	str	r3, [r7, #8]
}
 800ada0:	bf00      	nop
 800ada2:	bf00      	nop
 800ada4:	e7fd      	b.n	800ada2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ada6:	f000 f88b 	bl	800aec0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800adaa:	2100      	movs	r1, #0
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 fd09 	bl	800b7c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800adb2:	f000 f893 	bl	800aedc <xTaskResumeAll>
 800adb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d107      	bne.n	800adce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800adbe:	4b07      	ldr	r3, [pc, #28]	@ (800addc <vTaskDelay+0x68>)
 800adc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800adce:	bf00      	nop
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	20000eec 	.word	0x20000eec
 800addc:	e000ed04 	.word	0xe000ed04

0800ade0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08a      	sub	sp, #40	@ 0x28
 800ade4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800adea:	2300      	movs	r3, #0
 800adec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800adee:	463a      	mov	r2, r7
 800adf0:	1d39      	adds	r1, r7, #4
 800adf2:	f107 0308 	add.w	r3, r7, #8
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe ff5e 	bl	8009cb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	9202      	str	r2, [sp, #8]
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	2300      	movs	r3, #0
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	460a      	mov	r2, r1
 800ae0e:	4924      	ldr	r1, [pc, #144]	@ (800aea0 <vTaskStartScheduler+0xc0>)
 800ae10:	4824      	ldr	r0, [pc, #144]	@ (800aea4 <vTaskStartScheduler+0xc4>)
 800ae12:	f7ff fdf1 	bl	800a9f8 <xTaskCreateStatic>
 800ae16:	4603      	mov	r3, r0
 800ae18:	4a23      	ldr	r2, [pc, #140]	@ (800aea8 <vTaskStartScheduler+0xc8>)
 800ae1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae1c:	4b22      	ldr	r3, [pc, #136]	@ (800aea8 <vTaskStartScheduler+0xc8>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae24:	2301      	movs	r3, #1
 800ae26:	617b      	str	r3, [r7, #20]
 800ae28:	e001      	b.n	800ae2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d102      	bne.n	800ae3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae34:	f000 fd1a 	bl	800b86c <xTimerCreateTimerTask>
 800ae38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d11b      	bne.n	800ae78 <vTaskStartScheduler+0x98>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	613b      	str	r3, [r7, #16]
}
 800ae52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae54:	4b15      	ldr	r3, [pc, #84]	@ (800aeac <vTaskStartScheduler+0xcc>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3354      	adds	r3, #84	@ 0x54
 800ae5a:	4a15      	ldr	r2, [pc, #84]	@ (800aeb0 <vTaskStartScheduler+0xd0>)
 800ae5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae5e:	4b15      	ldr	r3, [pc, #84]	@ (800aeb4 <vTaskStartScheduler+0xd4>)
 800ae60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae66:	4b14      	ldr	r3, [pc, #80]	@ (800aeb8 <vTaskStartScheduler+0xd8>)
 800ae68:	2201      	movs	r2, #1
 800ae6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae6c:	4b13      	ldr	r3, [pc, #76]	@ (800aebc <vTaskStartScheduler+0xdc>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae72:	f001 f8e5 	bl	800c040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae76:	e00f      	b.n	800ae98 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae7e:	d10b      	bne.n	800ae98 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	60fb      	str	r3, [r7, #12]
}
 800ae92:	bf00      	nop
 800ae94:	bf00      	nop
 800ae96:	e7fd      	b.n	800ae94 <vTaskStartScheduler+0xb4>
}
 800ae98:	bf00      	nop
 800ae9a:	3718      	adds	r7, #24
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	0800d844 	.word	0x0800d844
 800aea4:	0800b4f1 	.word	0x0800b4f1
 800aea8:	20000ee8 	.word	0x20000ee8
 800aeac:	200009f0 	.word	0x200009f0
 800aeb0:	20000030 	.word	0x20000030
 800aeb4:	20000ee4 	.word	0x20000ee4
 800aeb8:	20000ed0 	.word	0x20000ed0
 800aebc:	20000ec8 	.word	0x20000ec8

0800aec0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aec0:	b480      	push	{r7}
 800aec2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aec4:	4b04      	ldr	r3, [pc, #16]	@ (800aed8 <vTaskSuspendAll+0x18>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	3301      	adds	r3, #1
 800aeca:	4a03      	ldr	r2, [pc, #12]	@ (800aed8 <vTaskSuspendAll+0x18>)
 800aecc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aece:	bf00      	nop
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	20000eec 	.word	0x20000eec

0800aedc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aee2:	2300      	movs	r3, #0
 800aee4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aee6:	2300      	movs	r3, #0
 800aee8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aeea:	4b42      	ldr	r3, [pc, #264]	@ (800aff4 <xTaskResumeAll+0x118>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10b      	bne.n	800af0a <xTaskResumeAll+0x2e>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	603b      	str	r3, [r7, #0]
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop
 800af08:	e7fd      	b.n	800af06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af0a:	f001 f93d 	bl	800c188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af0e:	4b39      	ldr	r3, [pc, #228]	@ (800aff4 <xTaskResumeAll+0x118>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	3b01      	subs	r3, #1
 800af14:	4a37      	ldr	r2, [pc, #220]	@ (800aff4 <xTaskResumeAll+0x118>)
 800af16:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af18:	4b36      	ldr	r3, [pc, #216]	@ (800aff4 <xTaskResumeAll+0x118>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d162      	bne.n	800afe6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af20:	4b35      	ldr	r3, [pc, #212]	@ (800aff8 <xTaskResumeAll+0x11c>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d05e      	beq.n	800afe6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af28:	e02f      	b.n	800af8a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af2a:	4b34      	ldr	r3, [pc, #208]	@ (800affc <xTaskResumeAll+0x120>)
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	3318      	adds	r3, #24
 800af36:	4618      	mov	r0, r3
 800af38:	f7fe ff7c 	bl	8009e34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	3304      	adds	r3, #4
 800af40:	4618      	mov	r0, r3
 800af42:	f7fe ff77 	bl	8009e34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af4a:	4b2d      	ldr	r3, [pc, #180]	@ (800b000 <xTaskResumeAll+0x124>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d903      	bls.n	800af5a <xTaskResumeAll+0x7e>
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af56:	4a2a      	ldr	r2, [pc, #168]	@ (800b000 <xTaskResumeAll+0x124>)
 800af58:	6013      	str	r3, [r2, #0]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af5e:	4613      	mov	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	4a27      	ldr	r2, [pc, #156]	@ (800b004 <xTaskResumeAll+0x128>)
 800af68:	441a      	add	r2, r3
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3304      	adds	r3, #4
 800af6e:	4619      	mov	r1, r3
 800af70:	4610      	mov	r0, r2
 800af72:	f7fe ff02 	bl	8009d7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af7a:	4b23      	ldr	r3, [pc, #140]	@ (800b008 <xTaskResumeAll+0x12c>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af80:	429a      	cmp	r2, r3
 800af82:	d302      	bcc.n	800af8a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800af84:	4b21      	ldr	r3, [pc, #132]	@ (800b00c <xTaskResumeAll+0x130>)
 800af86:	2201      	movs	r2, #1
 800af88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af8a:	4b1c      	ldr	r3, [pc, #112]	@ (800affc <xTaskResumeAll+0x120>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1cb      	bne.n	800af2a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d001      	beq.n	800af9c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af98:	f000 fb66 	bl	800b668 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af9c:	4b1c      	ldr	r3, [pc, #112]	@ (800b010 <xTaskResumeAll+0x134>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d010      	beq.n	800afca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800afa8:	f000 f846 	bl	800b038 <xTaskIncrementTick>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d002      	beq.n	800afb8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800afb2:	4b16      	ldr	r3, [pc, #88]	@ (800b00c <xTaskResumeAll+0x130>)
 800afb4:	2201      	movs	r2, #1
 800afb6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3b01      	subs	r3, #1
 800afbc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1f1      	bne.n	800afa8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800afc4:	4b12      	ldr	r3, [pc, #72]	@ (800b010 <xTaskResumeAll+0x134>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800afca:	4b10      	ldr	r3, [pc, #64]	@ (800b00c <xTaskResumeAll+0x130>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d009      	beq.n	800afe6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800afd2:	2301      	movs	r3, #1
 800afd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800afd6:	4b0f      	ldr	r3, [pc, #60]	@ (800b014 <xTaskResumeAll+0x138>)
 800afd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afe6:	f001 f901 	bl	800c1ec <vPortExitCritical>

	return xAlreadyYielded;
 800afea:	68bb      	ldr	r3, [r7, #8]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	20000eec 	.word	0x20000eec
 800aff8:	20000ec4 	.word	0x20000ec4
 800affc:	20000e84 	.word	0x20000e84
 800b000:	20000ecc 	.word	0x20000ecc
 800b004:	200009f4 	.word	0x200009f4
 800b008:	200009f0 	.word	0x200009f0
 800b00c:	20000ed8 	.word	0x20000ed8
 800b010:	20000ed4 	.word	0x20000ed4
 800b014:	e000ed04 	.word	0xe000ed04

0800b018 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b01e:	4b05      	ldr	r3, [pc, #20]	@ (800b034 <xTaskGetTickCount+0x1c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b024:	687b      	ldr	r3, [r7, #4]
}
 800b026:	4618      	mov	r0, r3
 800b028:	370c      	adds	r7, #12
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	20000ec8 	.word	0x20000ec8

0800b038 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b042:	4b4f      	ldr	r3, [pc, #316]	@ (800b180 <xTaskIncrementTick+0x148>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	f040 8090 	bne.w	800b16c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b04c:	4b4d      	ldr	r3, [pc, #308]	@ (800b184 <xTaskIncrementTick+0x14c>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	3301      	adds	r3, #1
 800b052:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b054:	4a4b      	ldr	r2, [pc, #300]	@ (800b184 <xTaskIncrementTick+0x14c>)
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d121      	bne.n	800b0a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b060:	4b49      	ldr	r3, [pc, #292]	@ (800b188 <xTaskIncrementTick+0x150>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00b      	beq.n	800b082 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b06e:	f383 8811 	msr	BASEPRI, r3
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	f3bf 8f4f 	dsb	sy
 800b07a:	603b      	str	r3, [r7, #0]
}
 800b07c:	bf00      	nop
 800b07e:	bf00      	nop
 800b080:	e7fd      	b.n	800b07e <xTaskIncrementTick+0x46>
 800b082:	4b41      	ldr	r3, [pc, #260]	@ (800b188 <xTaskIncrementTick+0x150>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	60fb      	str	r3, [r7, #12]
 800b088:	4b40      	ldr	r3, [pc, #256]	@ (800b18c <xTaskIncrementTick+0x154>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a3e      	ldr	r2, [pc, #248]	@ (800b188 <xTaskIncrementTick+0x150>)
 800b08e:	6013      	str	r3, [r2, #0]
 800b090:	4a3e      	ldr	r2, [pc, #248]	@ (800b18c <xTaskIncrementTick+0x154>)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	4b3e      	ldr	r3, [pc, #248]	@ (800b190 <xTaskIncrementTick+0x158>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3301      	adds	r3, #1
 800b09c:	4a3c      	ldr	r2, [pc, #240]	@ (800b190 <xTaskIncrementTick+0x158>)
 800b09e:	6013      	str	r3, [r2, #0]
 800b0a0:	f000 fae2 	bl	800b668 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0a4:	4b3b      	ldr	r3, [pc, #236]	@ (800b194 <xTaskIncrementTick+0x15c>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	693a      	ldr	r2, [r7, #16]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d349      	bcc.n	800b142 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0ae:	4b36      	ldr	r3, [pc, #216]	@ (800b188 <xTaskIncrementTick+0x150>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d104      	bne.n	800b0c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0b8:	4b36      	ldr	r3, [pc, #216]	@ (800b194 <xTaskIncrementTick+0x15c>)
 800b0ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b0be:	601a      	str	r2, [r3, #0]
					break;
 800b0c0:	e03f      	b.n	800b142 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0c2:	4b31      	ldr	r3, [pc, #196]	@ (800b188 <xTaskIncrementTick+0x150>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	68db      	ldr	r3, [r3, #12]
 800b0ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b0d2:	693a      	ldr	r2, [r7, #16]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d203      	bcs.n	800b0e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b0da:	4a2e      	ldr	r2, [pc, #184]	@ (800b194 <xTaskIncrementTick+0x15c>)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b0e0:	e02f      	b.n	800b142 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	3304      	adds	r3, #4
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fe fea4 	bl	8009e34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d004      	beq.n	800b0fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	3318      	adds	r3, #24
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7fe fe9b 	bl	8009e34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b102:	4b25      	ldr	r3, [pc, #148]	@ (800b198 <xTaskIncrementTick+0x160>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	429a      	cmp	r2, r3
 800b108:	d903      	bls.n	800b112 <xTaskIncrementTick+0xda>
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b10e:	4a22      	ldr	r2, [pc, #136]	@ (800b198 <xTaskIncrementTick+0x160>)
 800b110:	6013      	str	r3, [r2, #0]
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b116:	4613      	mov	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	4a1f      	ldr	r2, [pc, #124]	@ (800b19c <xTaskIncrementTick+0x164>)
 800b120:	441a      	add	r2, r3
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	3304      	adds	r3, #4
 800b126:	4619      	mov	r1, r3
 800b128:	4610      	mov	r0, r2
 800b12a:	f7fe fe26 	bl	8009d7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b132:	4b1b      	ldr	r3, [pc, #108]	@ (800b1a0 <xTaskIncrementTick+0x168>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b138:	429a      	cmp	r2, r3
 800b13a:	d3b8      	bcc.n	800b0ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b13c:	2301      	movs	r3, #1
 800b13e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b140:	e7b5      	b.n	800b0ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b142:	4b17      	ldr	r3, [pc, #92]	@ (800b1a0 <xTaskIncrementTick+0x168>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b148:	4914      	ldr	r1, [pc, #80]	@ (800b19c <xTaskIncrementTick+0x164>)
 800b14a:	4613      	mov	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4413      	add	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	440b      	add	r3, r1
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2b01      	cmp	r3, #1
 800b158:	d901      	bls.n	800b15e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b15a:	2301      	movs	r3, #1
 800b15c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b15e:	4b11      	ldr	r3, [pc, #68]	@ (800b1a4 <xTaskIncrementTick+0x16c>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d007      	beq.n	800b176 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b166:	2301      	movs	r3, #1
 800b168:	617b      	str	r3, [r7, #20]
 800b16a:	e004      	b.n	800b176 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b16c:	4b0e      	ldr	r3, [pc, #56]	@ (800b1a8 <xTaskIncrementTick+0x170>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	3301      	adds	r3, #1
 800b172:	4a0d      	ldr	r2, [pc, #52]	@ (800b1a8 <xTaskIncrementTick+0x170>)
 800b174:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b176:	697b      	ldr	r3, [r7, #20]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	20000eec 	.word	0x20000eec
 800b184:	20000ec8 	.word	0x20000ec8
 800b188:	20000e7c 	.word	0x20000e7c
 800b18c:	20000e80 	.word	0x20000e80
 800b190:	20000edc 	.word	0x20000edc
 800b194:	20000ee4 	.word	0x20000ee4
 800b198:	20000ecc 	.word	0x20000ecc
 800b19c:	200009f4 	.word	0x200009f4
 800b1a0:	200009f0 	.word	0x200009f0
 800b1a4:	20000ed8 	.word	0x20000ed8
 800b1a8:	20000ed4 	.word	0x20000ed4

0800b1ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b1b2:	4b2b      	ldr	r3, [pc, #172]	@ (800b260 <vTaskSwitchContext+0xb4>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d003      	beq.n	800b1c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b1ba:	4b2a      	ldr	r3, [pc, #168]	@ (800b264 <vTaskSwitchContext+0xb8>)
 800b1bc:	2201      	movs	r2, #1
 800b1be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b1c0:	e047      	b.n	800b252 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b1c2:	4b28      	ldr	r3, [pc, #160]	@ (800b264 <vTaskSwitchContext+0xb8>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1c8:	4b27      	ldr	r3, [pc, #156]	@ (800b268 <vTaskSwitchContext+0xbc>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	e011      	b.n	800b1f4 <vTaskSwitchContext+0x48>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10b      	bne.n	800b1ee <vTaskSwitchContext+0x42>
	__asm volatile
 800b1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	607b      	str	r3, [r7, #4]
}
 800b1e8:	bf00      	nop
 800b1ea:	bf00      	nop
 800b1ec:	e7fd      	b.n	800b1ea <vTaskSwitchContext+0x3e>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	60fb      	str	r3, [r7, #12]
 800b1f4:	491d      	ldr	r1, [pc, #116]	@ (800b26c <vTaskSwitchContext+0xc0>)
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	440b      	add	r3, r1
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d0e3      	beq.n	800b1d0 <vTaskSwitchContext+0x24>
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	4613      	mov	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4413      	add	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	4a16      	ldr	r2, [pc, #88]	@ (800b26c <vTaskSwitchContext+0xc0>)
 800b214:	4413      	add	r3, r2
 800b216:	60bb      	str	r3, [r7, #8]
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	605a      	str	r2, [r3, #4]
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	685a      	ldr	r2, [r3, #4]
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	3308      	adds	r3, #8
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d104      	bne.n	800b238 <vTaskSwitchContext+0x8c>
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	605a      	str	r2, [r3, #4]
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	4a0c      	ldr	r2, [pc, #48]	@ (800b270 <vTaskSwitchContext+0xc4>)
 800b240:	6013      	str	r3, [r2, #0]
 800b242:	4a09      	ldr	r2, [pc, #36]	@ (800b268 <vTaskSwitchContext+0xbc>)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b248:	4b09      	ldr	r3, [pc, #36]	@ (800b270 <vTaskSwitchContext+0xc4>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3354      	adds	r3, #84	@ 0x54
 800b24e:	4a09      	ldr	r2, [pc, #36]	@ (800b274 <vTaskSwitchContext+0xc8>)
 800b250:	6013      	str	r3, [r2, #0]
}
 800b252:	bf00      	nop
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	20000eec 	.word	0x20000eec
 800b264:	20000ed8 	.word	0x20000ed8
 800b268:	20000ecc 	.word	0x20000ecc
 800b26c:	200009f4 	.word	0x200009f4
 800b270:	200009f0 	.word	0x200009f0
 800b274:	20000030 	.word	0x20000030

0800b278 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10b      	bne.n	800b2a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b28c:	f383 8811 	msr	BASEPRI, r3
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	60fb      	str	r3, [r7, #12]
}
 800b29a:	bf00      	nop
 800b29c:	bf00      	nop
 800b29e:	e7fd      	b.n	800b29c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2a0:	4b07      	ldr	r3, [pc, #28]	@ (800b2c0 <vTaskPlaceOnEventList+0x48>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3318      	adds	r3, #24
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7fe fd8a 	bl	8009dc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	6838      	ldr	r0, [r7, #0]
 800b2b2:	f000 fa87 	bl	800b7c4 <prvAddCurrentTaskToDelayedList>
}
 800b2b6:	bf00      	nop
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	200009f0 	.word	0x200009f0

0800b2c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10b      	bne.n	800b2ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2da:	f383 8811 	msr	BASEPRI, r3
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	617b      	str	r3, [r7, #20]
}
 800b2e8:	bf00      	nop
 800b2ea:	bf00      	nop
 800b2ec:	e7fd      	b.n	800b2ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2ee:	4b0a      	ldr	r3, [pc, #40]	@ (800b318 <vTaskPlaceOnEventListRestricted+0x54>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	3318      	adds	r3, #24
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f7fe fd3f 	bl	8009d7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d002      	beq.n	800b308 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b302:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b306:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b308:	6879      	ldr	r1, [r7, #4]
 800b30a:	68b8      	ldr	r0, [r7, #8]
 800b30c:	f000 fa5a 	bl	800b7c4 <prvAddCurrentTaskToDelayedList>
	}
 800b310:	bf00      	nop
 800b312:	3718      	adds	r7, #24
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	200009f0 	.word	0x200009f0

0800b31c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b086      	sub	sp, #24
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10b      	bne.n	800b34a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	60fb      	str	r3, [r7, #12]
}
 800b344:	bf00      	nop
 800b346:	bf00      	nop
 800b348:	e7fd      	b.n	800b346 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	3318      	adds	r3, #24
 800b34e:	4618      	mov	r0, r3
 800b350:	f7fe fd70 	bl	8009e34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b354:	4b1d      	ldr	r3, [pc, #116]	@ (800b3cc <xTaskRemoveFromEventList+0xb0>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d11d      	bne.n	800b398 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	3304      	adds	r3, #4
 800b360:	4618      	mov	r0, r3
 800b362:	f7fe fd67 	bl	8009e34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b36a:	4b19      	ldr	r3, [pc, #100]	@ (800b3d0 <xTaskRemoveFromEventList+0xb4>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d903      	bls.n	800b37a <xTaskRemoveFromEventList+0x5e>
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b376:	4a16      	ldr	r2, [pc, #88]	@ (800b3d0 <xTaskRemoveFromEventList+0xb4>)
 800b378:	6013      	str	r3, [r2, #0]
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b37e:	4613      	mov	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4a13      	ldr	r2, [pc, #76]	@ (800b3d4 <xTaskRemoveFromEventList+0xb8>)
 800b388:	441a      	add	r2, r3
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	3304      	adds	r3, #4
 800b38e:	4619      	mov	r1, r3
 800b390:	4610      	mov	r0, r2
 800b392:	f7fe fcf2 	bl	8009d7a <vListInsertEnd>
 800b396:	e005      	b.n	800b3a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	3318      	adds	r3, #24
 800b39c:	4619      	mov	r1, r3
 800b39e:	480e      	ldr	r0, [pc, #56]	@ (800b3d8 <xTaskRemoveFromEventList+0xbc>)
 800b3a0:	f7fe fceb 	bl	8009d7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3a8:	4b0c      	ldr	r3, [pc, #48]	@ (800b3dc <xTaskRemoveFromEventList+0xc0>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d905      	bls.n	800b3be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b3e0 <xTaskRemoveFromEventList+0xc4>)
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	e001      	b.n	800b3c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b3c2:	697b      	ldr	r3, [r7, #20]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3718      	adds	r7, #24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	20000eec 	.word	0x20000eec
 800b3d0:	20000ecc 	.word	0x20000ecc
 800b3d4:	200009f4 	.word	0x200009f4
 800b3d8:	20000e84 	.word	0x20000e84
 800b3dc:	200009f0 	.word	0x200009f0
 800b3e0:	20000ed8 	.word	0x20000ed8

0800b3e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3ec:	4b06      	ldr	r3, [pc, #24]	@ (800b408 <vTaskInternalSetTimeOutState+0x24>)
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3f4:	4b05      	ldr	r3, [pc, #20]	@ (800b40c <vTaskInternalSetTimeOutState+0x28>)
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	605a      	str	r2, [r3, #4]
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	20000edc 	.word	0x20000edc
 800b40c:	20000ec8 	.word	0x20000ec8

0800b410 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b088      	sub	sp, #32
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10b      	bne.n	800b438 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b424:	f383 8811 	msr	BASEPRI, r3
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	613b      	str	r3, [r7, #16]
}
 800b432:	bf00      	nop
 800b434:	bf00      	nop
 800b436:	e7fd      	b.n	800b434 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10b      	bne.n	800b456 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	60fb      	str	r3, [r7, #12]
}
 800b450:	bf00      	nop
 800b452:	bf00      	nop
 800b454:	e7fd      	b.n	800b452 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b456:	f000 fe97 	bl	800c188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b45a:	4b1d      	ldr	r3, [pc, #116]	@ (800b4d0 <xTaskCheckForTimeOut+0xc0>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	69ba      	ldr	r2, [r7, #24]
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b472:	d102      	bne.n	800b47a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b474:	2300      	movs	r3, #0
 800b476:	61fb      	str	r3, [r7, #28]
 800b478:	e023      	b.n	800b4c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	4b15      	ldr	r3, [pc, #84]	@ (800b4d4 <xTaskCheckForTimeOut+0xc4>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	429a      	cmp	r2, r3
 800b484:	d007      	beq.n	800b496 <xTaskCheckForTimeOut+0x86>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	69ba      	ldr	r2, [r7, #24]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d302      	bcc.n	800b496 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b490:	2301      	movs	r3, #1
 800b492:	61fb      	str	r3, [r7, #28]
 800b494:	e015      	b.n	800b4c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	697a      	ldr	r2, [r7, #20]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d20b      	bcs.n	800b4b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	1ad2      	subs	r2, r2, r3
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7ff ff99 	bl	800b3e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	61fb      	str	r3, [r7, #28]
 800b4b6:	e004      	b.n	800b4c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4c2:	f000 fe93 	bl	800c1ec <vPortExitCritical>

	return xReturn;
 800b4c6:	69fb      	ldr	r3, [r7, #28]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3720      	adds	r7, #32
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	20000ec8 	.word	0x20000ec8
 800b4d4:	20000edc 	.word	0x20000edc

0800b4d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4d8:	b480      	push	{r7}
 800b4da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4dc:	4b03      	ldr	r3, [pc, #12]	@ (800b4ec <vTaskMissedYield+0x14>)
 800b4de:	2201      	movs	r2, #1
 800b4e0:	601a      	str	r2, [r3, #0]
}
 800b4e2:	bf00      	nop
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr
 800b4ec:	20000ed8 	.word	0x20000ed8

0800b4f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4f8:	f000 f852 	bl	800b5a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4fc:	4b06      	ldr	r3, [pc, #24]	@ (800b518 <prvIdleTask+0x28>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d9f9      	bls.n	800b4f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b504:	4b05      	ldr	r3, [pc, #20]	@ (800b51c <prvIdleTask+0x2c>)
 800b506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b50a:	601a      	str	r2, [r3, #0]
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b514:	e7f0      	b.n	800b4f8 <prvIdleTask+0x8>
 800b516:	bf00      	nop
 800b518:	200009f4 	.word	0x200009f4
 800b51c:	e000ed04 	.word	0xe000ed04

0800b520 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b526:	2300      	movs	r3, #0
 800b528:	607b      	str	r3, [r7, #4]
 800b52a:	e00c      	b.n	800b546 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	4613      	mov	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4a12      	ldr	r2, [pc, #72]	@ (800b580 <prvInitialiseTaskLists+0x60>)
 800b538:	4413      	add	r3, r2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fe fbf0 	bl	8009d20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	3301      	adds	r3, #1
 800b544:	607b      	str	r3, [r7, #4]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2b37      	cmp	r3, #55	@ 0x37
 800b54a:	d9ef      	bls.n	800b52c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b54c:	480d      	ldr	r0, [pc, #52]	@ (800b584 <prvInitialiseTaskLists+0x64>)
 800b54e:	f7fe fbe7 	bl	8009d20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b552:	480d      	ldr	r0, [pc, #52]	@ (800b588 <prvInitialiseTaskLists+0x68>)
 800b554:	f7fe fbe4 	bl	8009d20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b558:	480c      	ldr	r0, [pc, #48]	@ (800b58c <prvInitialiseTaskLists+0x6c>)
 800b55a:	f7fe fbe1 	bl	8009d20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b55e:	480c      	ldr	r0, [pc, #48]	@ (800b590 <prvInitialiseTaskLists+0x70>)
 800b560:	f7fe fbde 	bl	8009d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b564:	480b      	ldr	r0, [pc, #44]	@ (800b594 <prvInitialiseTaskLists+0x74>)
 800b566:	f7fe fbdb 	bl	8009d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b56a:	4b0b      	ldr	r3, [pc, #44]	@ (800b598 <prvInitialiseTaskLists+0x78>)
 800b56c:	4a05      	ldr	r2, [pc, #20]	@ (800b584 <prvInitialiseTaskLists+0x64>)
 800b56e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b570:	4b0a      	ldr	r3, [pc, #40]	@ (800b59c <prvInitialiseTaskLists+0x7c>)
 800b572:	4a05      	ldr	r2, [pc, #20]	@ (800b588 <prvInitialiseTaskLists+0x68>)
 800b574:	601a      	str	r2, [r3, #0]
}
 800b576:	bf00      	nop
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	200009f4 	.word	0x200009f4
 800b584:	20000e54 	.word	0x20000e54
 800b588:	20000e68 	.word	0x20000e68
 800b58c:	20000e84 	.word	0x20000e84
 800b590:	20000e98 	.word	0x20000e98
 800b594:	20000eb0 	.word	0x20000eb0
 800b598:	20000e7c 	.word	0x20000e7c
 800b59c:	20000e80 	.word	0x20000e80

0800b5a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5a6:	e019      	b.n	800b5dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5a8:	f000 fdee 	bl	800c188 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ac:	4b10      	ldr	r3, [pc, #64]	@ (800b5f0 <prvCheckTasksWaitingTermination+0x50>)
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fe fc3b 	bl	8009e34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5be:	4b0d      	ldr	r3, [pc, #52]	@ (800b5f4 <prvCheckTasksWaitingTermination+0x54>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	4a0b      	ldr	r2, [pc, #44]	@ (800b5f4 <prvCheckTasksWaitingTermination+0x54>)
 800b5c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b5f8 <prvCheckTasksWaitingTermination+0x58>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	4a0a      	ldr	r2, [pc, #40]	@ (800b5f8 <prvCheckTasksWaitingTermination+0x58>)
 800b5d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5d2:	f000 fe0b 	bl	800c1ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f810 	bl	800b5fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5dc:	4b06      	ldr	r3, [pc, #24]	@ (800b5f8 <prvCheckTasksWaitingTermination+0x58>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1e1      	bne.n	800b5a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5e4:	bf00      	nop
 800b5e6:	bf00      	nop
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20000e98 	.word	0x20000e98
 800b5f4:	20000ec4 	.word	0x20000ec4
 800b5f8:	20000eac 	.word	0x20000eac

0800b5fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	3354      	adds	r3, #84	@ 0x54
 800b608:	4618      	mov	r0, r3
 800b60a:	f001 fcb7 	bl	800cf7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b614:	2b00      	cmp	r3, #0
 800b616:	d108      	bne.n	800b62a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b61c:	4618      	mov	r0, r3
 800b61e:	f000 ffa3 	bl	800c568 <vPortFree>
				vPortFree( pxTCB );
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 ffa0 	bl	800c568 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b628:	e019      	b.n	800b65e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b630:	2b01      	cmp	r3, #1
 800b632:	d103      	bne.n	800b63c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 ff97 	bl	800c568 <vPortFree>
	}
 800b63a:	e010      	b.n	800b65e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b642:	2b02      	cmp	r3, #2
 800b644:	d00b      	beq.n	800b65e <prvDeleteTCB+0x62>
	__asm volatile
 800b646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b64a:	f383 8811 	msr	BASEPRI, r3
 800b64e:	f3bf 8f6f 	isb	sy
 800b652:	f3bf 8f4f 	dsb	sy
 800b656:	60fb      	str	r3, [r7, #12]
}
 800b658:	bf00      	nop
 800b65a:	bf00      	nop
 800b65c:	e7fd      	b.n	800b65a <prvDeleteTCB+0x5e>
	}
 800b65e:	bf00      	nop
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
	...

0800b668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b66e:	4b0c      	ldr	r3, [pc, #48]	@ (800b6a0 <prvResetNextTaskUnblockTime+0x38>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d104      	bne.n	800b682 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b678:	4b0a      	ldr	r3, [pc, #40]	@ (800b6a4 <prvResetNextTaskUnblockTime+0x3c>)
 800b67a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b67e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b680:	e008      	b.n	800b694 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b682:	4b07      	ldr	r3, [pc, #28]	@ (800b6a0 <prvResetNextTaskUnblockTime+0x38>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	4a04      	ldr	r2, [pc, #16]	@ (800b6a4 <prvResetNextTaskUnblockTime+0x3c>)
 800b692:	6013      	str	r3, [r2, #0]
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	20000e7c 	.word	0x20000e7c
 800b6a4:	20000ee4 	.word	0x20000ee4

0800b6a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800b6dc <xTaskGetSchedulerState+0x34>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d102      	bne.n	800b6bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	607b      	str	r3, [r7, #4]
 800b6ba:	e008      	b.n	800b6ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6bc:	4b08      	ldr	r3, [pc, #32]	@ (800b6e0 <xTaskGetSchedulerState+0x38>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d102      	bne.n	800b6ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6c4:	2302      	movs	r3, #2
 800b6c6:	607b      	str	r3, [r7, #4]
 800b6c8:	e001      	b.n	800b6ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6ce:	687b      	ldr	r3, [r7, #4]
	}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	20000ed0 	.word	0x20000ed0
 800b6e0:	20000eec 	.word	0x20000eec

0800b6e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b086      	sub	sp, #24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d058      	beq.n	800b7ac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b6fa:	4b2f      	ldr	r3, [pc, #188]	@ (800b7b8 <xTaskPriorityDisinherit+0xd4>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	429a      	cmp	r2, r3
 800b702:	d00b      	beq.n	800b71c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b708:	f383 8811 	msr	BASEPRI, r3
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	60fb      	str	r3, [r7, #12]
}
 800b716:	bf00      	nop
 800b718:	bf00      	nop
 800b71a:	e7fd      	b.n	800b718 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10b      	bne.n	800b73c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	60bb      	str	r3, [r7, #8]
}
 800b736:	bf00      	nop
 800b738:	bf00      	nop
 800b73a:	e7fd      	b.n	800b738 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b740:	1e5a      	subs	r2, r3, #1
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b74e:	429a      	cmp	r2, r3
 800b750:	d02c      	beq.n	800b7ac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b756:	2b00      	cmp	r3, #0
 800b758:	d128      	bne.n	800b7ac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	3304      	adds	r3, #4
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fe fb68 	bl	8009e34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b770:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b77c:	4b0f      	ldr	r3, [pc, #60]	@ (800b7bc <xTaskPriorityDisinherit+0xd8>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	429a      	cmp	r2, r3
 800b782:	d903      	bls.n	800b78c <xTaskPriorityDisinherit+0xa8>
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b788:	4a0c      	ldr	r2, [pc, #48]	@ (800b7bc <xTaskPriorityDisinherit+0xd8>)
 800b78a:	6013      	str	r3, [r2, #0]
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b790:	4613      	mov	r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4413      	add	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	4a09      	ldr	r2, [pc, #36]	@ (800b7c0 <xTaskPriorityDisinherit+0xdc>)
 800b79a:	441a      	add	r2, r3
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	3304      	adds	r3, #4
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	4610      	mov	r0, r2
 800b7a4:	f7fe fae9 	bl	8009d7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7ac:	697b      	ldr	r3, [r7, #20]
	}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	200009f0 	.word	0x200009f0
 800b7bc:	20000ecc 	.word	0x20000ecc
 800b7c0:	200009f4 	.word	0x200009f4

0800b7c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7ce:	4b21      	ldr	r3, [pc, #132]	@ (800b854 <prvAddCurrentTaskToDelayedList+0x90>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7d4:	4b20      	ldr	r3, [pc, #128]	@ (800b858 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	3304      	adds	r3, #4
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fe fb2a 	bl	8009e34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7e6:	d10a      	bne.n	800b7fe <prvAddCurrentTaskToDelayedList+0x3a>
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d007      	beq.n	800b7fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b858 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3304      	adds	r3, #4
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	4819      	ldr	r0, [pc, #100]	@ (800b85c <prvAddCurrentTaskToDelayedList+0x98>)
 800b7f8:	f7fe fabf 	bl	8009d7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b7fc:	e026      	b.n	800b84c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	4413      	add	r3, r2
 800b804:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b806:	4b14      	ldr	r3, [pc, #80]	@ (800b858 <prvAddCurrentTaskToDelayedList+0x94>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	429a      	cmp	r2, r3
 800b814:	d209      	bcs.n	800b82a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b816:	4b12      	ldr	r3, [pc, #72]	@ (800b860 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	4b0f      	ldr	r3, [pc, #60]	@ (800b858 <prvAddCurrentTaskToDelayedList+0x94>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	3304      	adds	r3, #4
 800b820:	4619      	mov	r1, r3
 800b822:	4610      	mov	r0, r2
 800b824:	f7fe facd 	bl	8009dc2 <vListInsert>
}
 800b828:	e010      	b.n	800b84c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b82a:	4b0e      	ldr	r3, [pc, #56]	@ (800b864 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	4b0a      	ldr	r3, [pc, #40]	@ (800b858 <prvAddCurrentTaskToDelayedList+0x94>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	3304      	adds	r3, #4
 800b834:	4619      	mov	r1, r3
 800b836:	4610      	mov	r0, r2
 800b838:	f7fe fac3 	bl	8009dc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b83c:	4b0a      	ldr	r3, [pc, #40]	@ (800b868 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	429a      	cmp	r2, r3
 800b844:	d202      	bcs.n	800b84c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b846:	4a08      	ldr	r2, [pc, #32]	@ (800b868 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	6013      	str	r3, [r2, #0]
}
 800b84c:	bf00      	nop
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	20000ec8 	.word	0x20000ec8
 800b858:	200009f0 	.word	0x200009f0
 800b85c:	20000eb0 	.word	0x20000eb0
 800b860:	20000e80 	.word	0x20000e80
 800b864:	20000e7c 	.word	0x20000e7c
 800b868:	20000ee4 	.word	0x20000ee4

0800b86c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b08a      	sub	sp, #40	@ 0x28
 800b870:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b872:	2300      	movs	r3, #0
 800b874:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b876:	f000 fb13 	bl	800bea0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b87a:	4b1d      	ldr	r3, [pc, #116]	@ (800b8f0 <xTimerCreateTimerTask+0x84>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d021      	beq.n	800b8c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b882:	2300      	movs	r3, #0
 800b884:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b886:	2300      	movs	r3, #0
 800b888:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b88a:	1d3a      	adds	r2, r7, #4
 800b88c:	f107 0108 	add.w	r1, r7, #8
 800b890:	f107 030c 	add.w	r3, r7, #12
 800b894:	4618      	mov	r0, r3
 800b896:	f7fe fa29 	bl	8009cec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b89a:	6879      	ldr	r1, [r7, #4]
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	9202      	str	r2, [sp, #8]
 800b8a2:	9301      	str	r3, [sp, #4]
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	460a      	mov	r2, r1
 800b8ac:	4911      	ldr	r1, [pc, #68]	@ (800b8f4 <xTimerCreateTimerTask+0x88>)
 800b8ae:	4812      	ldr	r0, [pc, #72]	@ (800b8f8 <xTimerCreateTimerTask+0x8c>)
 800b8b0:	f7ff f8a2 	bl	800a9f8 <xTaskCreateStatic>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	4a11      	ldr	r2, [pc, #68]	@ (800b8fc <xTimerCreateTimerTask+0x90>)
 800b8b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b8ba:	4b10      	ldr	r3, [pc, #64]	@ (800b8fc <xTimerCreateTimerTask+0x90>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10b      	bne.n	800b8e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d0:	f383 8811 	msr	BASEPRI, r3
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	f3bf 8f4f 	dsb	sy
 800b8dc:	613b      	str	r3, [r7, #16]
}
 800b8de:	bf00      	nop
 800b8e0:	bf00      	nop
 800b8e2:	e7fd      	b.n	800b8e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b8e4:	697b      	ldr	r3, [r7, #20]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3718      	adds	r7, #24
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20000f20 	.word	0x20000f20
 800b8f4:	0800d84c 	.word	0x0800d84c
 800b8f8:	0800ba39 	.word	0x0800ba39
 800b8fc:	20000f24 	.word	0x20000f24

0800b900 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b08a      	sub	sp, #40	@ 0x28
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
 800b90c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b90e:	2300      	movs	r3, #0
 800b910:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10b      	bne.n	800b930 <xTimerGenericCommand+0x30>
	__asm volatile
 800b918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91c:	f383 8811 	msr	BASEPRI, r3
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	623b      	str	r3, [r7, #32]
}
 800b92a:	bf00      	nop
 800b92c:	bf00      	nop
 800b92e:	e7fd      	b.n	800b92c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b930:	4b19      	ldr	r3, [pc, #100]	@ (800b998 <xTimerGenericCommand+0x98>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d02a      	beq.n	800b98e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b05      	cmp	r3, #5
 800b948:	dc18      	bgt.n	800b97c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b94a:	f7ff fead 	bl	800b6a8 <xTaskGetSchedulerState>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b02      	cmp	r3, #2
 800b952:	d109      	bne.n	800b968 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b954:	4b10      	ldr	r3, [pc, #64]	@ (800b998 <xTimerGenericCommand+0x98>)
 800b956:	6818      	ldr	r0, [r3, #0]
 800b958:	f107 0110 	add.w	r1, r7, #16
 800b95c:	2300      	movs	r3, #0
 800b95e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b960:	f7fe fbd8 	bl	800a114 <xQueueGenericSend>
 800b964:	6278      	str	r0, [r7, #36]	@ 0x24
 800b966:	e012      	b.n	800b98e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b968:	4b0b      	ldr	r3, [pc, #44]	@ (800b998 <xTimerGenericCommand+0x98>)
 800b96a:	6818      	ldr	r0, [r3, #0]
 800b96c:	f107 0110 	add.w	r1, r7, #16
 800b970:	2300      	movs	r3, #0
 800b972:	2200      	movs	r2, #0
 800b974:	f7fe fbce 	bl	800a114 <xQueueGenericSend>
 800b978:	6278      	str	r0, [r7, #36]	@ 0x24
 800b97a:	e008      	b.n	800b98e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b97c:	4b06      	ldr	r3, [pc, #24]	@ (800b998 <xTimerGenericCommand+0x98>)
 800b97e:	6818      	ldr	r0, [r3, #0]
 800b980:	f107 0110 	add.w	r1, r7, #16
 800b984:	2300      	movs	r3, #0
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	f7fe fcc6 	bl	800a318 <xQueueGenericSendFromISR>
 800b98c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b990:	4618      	mov	r0, r3
 800b992:	3728      	adds	r7, #40	@ 0x28
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	20000f20 	.word	0x20000f20

0800b99c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b088      	sub	sp, #32
 800b9a0:	af02      	add	r7, sp, #8
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9a6:	4b23      	ldr	r3, [pc, #140]	@ (800ba34 <prvProcessExpiredTimer+0x98>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	3304      	adds	r3, #4
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7fe fa3d 	bl	8009e34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9c0:	f003 0304 	and.w	r3, r3, #4
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d023      	beq.n	800ba10 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	699a      	ldr	r2, [r3, #24]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	18d1      	adds	r1, r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	683a      	ldr	r2, [r7, #0]
 800b9d4:	6978      	ldr	r0, [r7, #20]
 800b9d6:	f000 f8d5 	bl	800bb84 <prvInsertTimerInActiveList>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d020      	beq.n	800ba22 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	6978      	ldr	r0, [r7, #20]
 800b9ec:	f7ff ff88 	bl	800b900 <xTimerGenericCommand>
 800b9f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d114      	bne.n	800ba22 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9fc:	f383 8811 	msr	BASEPRI, r3
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	60fb      	str	r3, [r7, #12]
}
 800ba0a:	bf00      	nop
 800ba0c:	bf00      	nop
 800ba0e:	e7fd      	b.n	800ba0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba16:	f023 0301 	bic.w	r3, r3, #1
 800ba1a:	b2da      	uxtb	r2, r3
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	6978      	ldr	r0, [r7, #20]
 800ba28:	4798      	blx	r3
}
 800ba2a:	bf00      	nop
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	20000f18 	.word	0x20000f18

0800ba38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba40:	f107 0308 	add.w	r3, r7, #8
 800ba44:	4618      	mov	r0, r3
 800ba46:	f000 f859 	bl	800bafc <prvGetNextExpireTime>
 800ba4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	4619      	mov	r1, r3
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f000 f805 	bl	800ba60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba56:	f000 f8d7 	bl	800bc08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba5a:	bf00      	nop
 800ba5c:	e7f0      	b.n	800ba40 <prvTimerTask+0x8>
	...

0800ba60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba6a:	f7ff fa29 	bl	800aec0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba6e:	f107 0308 	add.w	r3, r7, #8
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 f866 	bl	800bb44 <prvSampleTimeNow>
 800ba78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d130      	bne.n	800bae2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10a      	bne.n	800ba9c <prvProcessTimerOrBlockTask+0x3c>
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d806      	bhi.n	800ba9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ba8e:	f7ff fa25 	bl	800aedc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba92:	68f9      	ldr	r1, [r7, #12]
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7ff ff81 	bl	800b99c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba9a:	e024      	b.n	800bae6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d008      	beq.n	800bab4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800baa2:	4b13      	ldr	r3, [pc, #76]	@ (800baf0 <prvProcessTimerOrBlockTask+0x90>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d101      	bne.n	800bab0 <prvProcessTimerOrBlockTask+0x50>
 800baac:	2301      	movs	r3, #1
 800baae:	e000      	b.n	800bab2 <prvProcessTimerOrBlockTask+0x52>
 800bab0:	2300      	movs	r3, #0
 800bab2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bab4:	4b0f      	ldr	r3, [pc, #60]	@ (800baf4 <prvProcessTimerOrBlockTask+0x94>)
 800bab6:	6818      	ldr	r0, [r3, #0]
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	683a      	ldr	r2, [r7, #0]
 800bac0:	4619      	mov	r1, r3
 800bac2:	f7fe ff65 	bl	800a990 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bac6:	f7ff fa09 	bl	800aedc <xTaskResumeAll>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10a      	bne.n	800bae6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bad0:	4b09      	ldr	r3, [pc, #36]	@ (800baf8 <prvProcessTimerOrBlockTask+0x98>)
 800bad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bad6:	601a      	str	r2, [r3, #0]
 800bad8:	f3bf 8f4f 	dsb	sy
 800badc:	f3bf 8f6f 	isb	sy
}
 800bae0:	e001      	b.n	800bae6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bae2:	f7ff f9fb 	bl	800aedc <xTaskResumeAll>
}
 800bae6:	bf00      	nop
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	20000f1c 	.word	0x20000f1c
 800baf4:	20000f20 	.word	0x20000f20
 800baf8:	e000ed04 	.word	0xe000ed04

0800bafc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb04:	4b0e      	ldr	r3, [pc, #56]	@ (800bb40 <prvGetNextExpireTime+0x44>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d101      	bne.n	800bb12 <prvGetNextExpireTime+0x16>
 800bb0e:	2201      	movs	r2, #1
 800bb10:	e000      	b.n	800bb14 <prvGetNextExpireTime+0x18>
 800bb12:	2200      	movs	r2, #0
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d105      	bne.n	800bb2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb20:	4b07      	ldr	r3, [pc, #28]	@ (800bb40 <prvGetNextExpireTime+0x44>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	60fb      	str	r3, [r7, #12]
 800bb2a:	e001      	b.n	800bb30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb30:	68fb      	ldr	r3, [r7, #12]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3714      	adds	r7, #20
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	20000f18 	.word	0x20000f18

0800bb44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb4c:	f7ff fa64 	bl	800b018 <xTaskGetTickCount>
 800bb50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb52:	4b0b      	ldr	r3, [pc, #44]	@ (800bb80 <prvSampleTimeNow+0x3c>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d205      	bcs.n	800bb68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bb5c:	f000 f93a 	bl	800bdd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	601a      	str	r2, [r3, #0]
 800bb66:	e002      	b.n	800bb6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb6e:	4a04      	ldr	r2, [pc, #16]	@ (800bb80 <prvSampleTimeNow+0x3c>)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb74:	68fb      	ldr	r3, [r7, #12]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	20000f28 	.word	0x20000f28

0800bb84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b086      	sub	sp, #24
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	607a      	str	r2, [r7, #4]
 800bb90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb92:	2300      	movs	r3, #0
 800bb94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bba2:	68ba      	ldr	r2, [r7, #8]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d812      	bhi.n	800bbd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	1ad2      	subs	r2, r2, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	699b      	ldr	r3, [r3, #24]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d302      	bcc.n	800bbbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	617b      	str	r3, [r7, #20]
 800bbbc:	e01b      	b.n	800bbf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bbbe:	4b10      	ldr	r3, [pc, #64]	@ (800bc00 <prvInsertTimerInActiveList+0x7c>)
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	3304      	adds	r3, #4
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	4610      	mov	r0, r2
 800bbca:	f7fe f8fa 	bl	8009dc2 <vListInsert>
 800bbce:	e012      	b.n	800bbf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d206      	bcs.n	800bbe6 <prvInsertTimerInActiveList+0x62>
 800bbd8:	68ba      	ldr	r2, [r7, #8]
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d302      	bcc.n	800bbe6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	617b      	str	r3, [r7, #20]
 800bbe4:	e007      	b.n	800bbf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbe6:	4b07      	ldr	r3, [pc, #28]	@ (800bc04 <prvInsertTimerInActiveList+0x80>)
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	3304      	adds	r3, #4
 800bbee:	4619      	mov	r1, r3
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	f7fe f8e6 	bl	8009dc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bbf6:	697b      	ldr	r3, [r7, #20]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3718      	adds	r7, #24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	20000f1c 	.word	0x20000f1c
 800bc04:	20000f18 	.word	0x20000f18

0800bc08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b08e      	sub	sp, #56	@ 0x38
 800bc0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc0e:	e0ce      	b.n	800bdae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	da19      	bge.n	800bc4a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc16:	1d3b      	adds	r3, r7, #4
 800bc18:	3304      	adds	r3, #4
 800bc1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10b      	bne.n	800bc3a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bc22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	61fb      	str	r3, [r7, #28]
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop
 800bc38:	e7fd      	b.n	800bc36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc40:	6850      	ldr	r0, [r2, #4]
 800bc42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc44:	6892      	ldr	r2, [r2, #8]
 800bc46:	4611      	mov	r1, r2
 800bc48:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f2c0 80ae 	blt.w	800bdae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc58:	695b      	ldr	r3, [r3, #20]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d004      	beq.n	800bc68 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc60:	3304      	adds	r3, #4
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe f8e6 	bl	8009e34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc68:	463b      	mov	r3, r7
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7ff ff6a 	bl	800bb44 <prvSampleTimeNow>
 800bc70:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2b09      	cmp	r3, #9
 800bc76:	f200 8097 	bhi.w	800bda8 <prvProcessReceivedCommands+0x1a0>
 800bc7a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc80 <prvProcessReceivedCommands+0x78>)
 800bc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc80:	0800bca9 	.word	0x0800bca9
 800bc84:	0800bca9 	.word	0x0800bca9
 800bc88:	0800bca9 	.word	0x0800bca9
 800bc8c:	0800bd1f 	.word	0x0800bd1f
 800bc90:	0800bd33 	.word	0x0800bd33
 800bc94:	0800bd7f 	.word	0x0800bd7f
 800bc98:	0800bca9 	.word	0x0800bca9
 800bc9c:	0800bca9 	.word	0x0800bca9
 800bca0:	0800bd1f 	.word	0x0800bd1f
 800bca4:	0800bd33 	.word	0x0800bd33
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcae:	f043 0301 	orr.w	r3, r3, #1
 800bcb2:	b2da      	uxtb	r2, r3
 800bcb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcbe:	699b      	ldr	r3, [r3, #24]
 800bcc0:	18d1      	adds	r1, r2, r3
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcc8:	f7ff ff5c 	bl	800bb84 <prvInsertTimerInActiveList>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d06c      	beq.n	800bdac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bce0:	f003 0304 	and.w	r3, r3, #4
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d061      	beq.n	800bdac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bce8:	68ba      	ldr	r2, [r7, #8]
 800bcea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	441a      	add	r2, r3
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcfa:	f7ff fe01 	bl	800b900 <xTimerGenericCommand>
 800bcfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd00:	6a3b      	ldr	r3, [r7, #32]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d152      	bne.n	800bdac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd0a:	f383 8811 	msr	BASEPRI, r3
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	61bb      	str	r3, [r7, #24]
}
 800bd18:	bf00      	nop
 800bd1a:	bf00      	nop
 800bd1c:	e7fd      	b.n	800bd1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd24:	f023 0301 	bic.w	r3, r3, #1
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bd30:	e03d      	b.n	800bdae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd38:	f043 0301 	orr.w	r3, r3, #1
 800bd3c:	b2da      	uxtb	r2, r3
 800bd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10b      	bne.n	800bd6a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bd52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd56:	f383 8811 	msr	BASEPRI, r3
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	617b      	str	r3, [r7, #20]
}
 800bd64:	bf00      	nop
 800bd66:	bf00      	nop
 800bd68:	e7fd      	b.n	800bd66 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd6c:	699a      	ldr	r2, [r3, #24]
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd70:	18d1      	adds	r1, r2, r3
 800bd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd78:	f7ff ff04 	bl	800bb84 <prvInsertTimerInActiveList>
					break;
 800bd7c:	e017      	b.n	800bdae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd84:	f003 0302 	and.w	r3, r3, #2
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d103      	bne.n	800bd94 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bd8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd8e:	f000 fbeb 	bl	800c568 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd92:	e00c      	b.n	800bdae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd9a:	f023 0301 	bic.w	r3, r3, #1
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bda6:	e002      	b.n	800bdae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bda8:	bf00      	nop
 800bdaa:	e000      	b.n	800bdae <prvProcessReceivedCommands+0x1a6>
					break;
 800bdac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bdae:	4b08      	ldr	r3, [pc, #32]	@ (800bdd0 <prvProcessReceivedCommands+0x1c8>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	1d39      	adds	r1, r7, #4
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fe fb4c 	bl	800a454 <xQueueReceive>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f47f af26 	bne.w	800bc10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bdc4:	bf00      	nop
 800bdc6:	bf00      	nop
 800bdc8:	3730      	adds	r7, #48	@ 0x30
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	20000f20 	.word	0x20000f20

0800bdd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b088      	sub	sp, #32
 800bdd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdda:	e049      	b.n	800be70 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bddc:	4b2e      	ldr	r3, [pc, #184]	@ (800be98 <prvSwitchTimerLists+0xc4>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bde6:	4b2c      	ldr	r3, [pc, #176]	@ (800be98 <prvSwitchTimerLists+0xc4>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fe f81d 	bl	8009e34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6a1b      	ldr	r3, [r3, #32]
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be08:	f003 0304 	and.w	r3, r3, #4
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d02f      	beq.n	800be70 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	699b      	ldr	r3, [r3, #24]
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	4413      	add	r3, r2
 800be18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d90e      	bls.n	800be40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	68ba      	ldr	r2, [r7, #8]
 800be26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	68fa      	ldr	r2, [r7, #12]
 800be2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be2e:	4b1a      	ldr	r3, [pc, #104]	@ (800be98 <prvSwitchTimerLists+0xc4>)
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	3304      	adds	r3, #4
 800be36:	4619      	mov	r1, r3
 800be38:	4610      	mov	r0, r2
 800be3a:	f7fd ffc2 	bl	8009dc2 <vListInsert>
 800be3e:	e017      	b.n	800be70 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be40:	2300      	movs	r3, #0
 800be42:	9300      	str	r3, [sp, #0]
 800be44:	2300      	movs	r3, #0
 800be46:	693a      	ldr	r2, [r7, #16]
 800be48:	2100      	movs	r1, #0
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f7ff fd58 	bl	800b900 <xTimerGenericCommand>
 800be50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d10b      	bne.n	800be70 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800be58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be5c:	f383 8811 	msr	BASEPRI, r3
 800be60:	f3bf 8f6f 	isb	sy
 800be64:	f3bf 8f4f 	dsb	sy
 800be68:	603b      	str	r3, [r7, #0]
}
 800be6a:	bf00      	nop
 800be6c:	bf00      	nop
 800be6e:	e7fd      	b.n	800be6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be70:	4b09      	ldr	r3, [pc, #36]	@ (800be98 <prvSwitchTimerLists+0xc4>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1b0      	bne.n	800bddc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be7a:	4b07      	ldr	r3, [pc, #28]	@ (800be98 <prvSwitchTimerLists+0xc4>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be80:	4b06      	ldr	r3, [pc, #24]	@ (800be9c <prvSwitchTimerLists+0xc8>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a04      	ldr	r2, [pc, #16]	@ (800be98 <prvSwitchTimerLists+0xc4>)
 800be86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be88:	4a04      	ldr	r2, [pc, #16]	@ (800be9c <prvSwitchTimerLists+0xc8>)
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	6013      	str	r3, [r2, #0]
}
 800be8e:	bf00      	nop
 800be90:	3718      	adds	r7, #24
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20000f18 	.word	0x20000f18
 800be9c:	20000f1c 	.word	0x20000f1c

0800bea0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bea6:	f000 f96f 	bl	800c188 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800beaa:	4b15      	ldr	r3, [pc, #84]	@ (800bf00 <prvCheckForValidListAndQueue+0x60>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d120      	bne.n	800bef4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800beb2:	4814      	ldr	r0, [pc, #80]	@ (800bf04 <prvCheckForValidListAndQueue+0x64>)
 800beb4:	f7fd ff34 	bl	8009d20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800beb8:	4813      	ldr	r0, [pc, #76]	@ (800bf08 <prvCheckForValidListAndQueue+0x68>)
 800beba:	f7fd ff31 	bl	8009d20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bebe:	4b13      	ldr	r3, [pc, #76]	@ (800bf0c <prvCheckForValidListAndQueue+0x6c>)
 800bec0:	4a10      	ldr	r2, [pc, #64]	@ (800bf04 <prvCheckForValidListAndQueue+0x64>)
 800bec2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bec4:	4b12      	ldr	r3, [pc, #72]	@ (800bf10 <prvCheckForValidListAndQueue+0x70>)
 800bec6:	4a10      	ldr	r2, [pc, #64]	@ (800bf08 <prvCheckForValidListAndQueue+0x68>)
 800bec8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800beca:	2300      	movs	r3, #0
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	4b11      	ldr	r3, [pc, #68]	@ (800bf14 <prvCheckForValidListAndQueue+0x74>)
 800bed0:	4a11      	ldr	r2, [pc, #68]	@ (800bf18 <prvCheckForValidListAndQueue+0x78>)
 800bed2:	2110      	movs	r1, #16
 800bed4:	200a      	movs	r0, #10
 800bed6:	f7fe f841 	bl	8009f5c <xQueueGenericCreateStatic>
 800beda:	4603      	mov	r3, r0
 800bedc:	4a08      	ldr	r2, [pc, #32]	@ (800bf00 <prvCheckForValidListAndQueue+0x60>)
 800bede:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bee0:	4b07      	ldr	r3, [pc, #28]	@ (800bf00 <prvCheckForValidListAndQueue+0x60>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d005      	beq.n	800bef4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bee8:	4b05      	ldr	r3, [pc, #20]	@ (800bf00 <prvCheckForValidListAndQueue+0x60>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	490b      	ldr	r1, [pc, #44]	@ (800bf1c <prvCheckForValidListAndQueue+0x7c>)
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fe fd24 	bl	800a93c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bef4:	f000 f97a 	bl	800c1ec <vPortExitCritical>
}
 800bef8:	bf00      	nop
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	20000f20 	.word	0x20000f20
 800bf04:	20000ef0 	.word	0x20000ef0
 800bf08:	20000f04 	.word	0x20000f04
 800bf0c:	20000f18 	.word	0x20000f18
 800bf10:	20000f1c 	.word	0x20000f1c
 800bf14:	20000fcc 	.word	0x20000fcc
 800bf18:	20000f2c 	.word	0x20000f2c
 800bf1c:	0800d854 	.word	0x0800d854

0800bf20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf20:	b480      	push	{r7}
 800bf22:	b085      	sub	sp, #20
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	60b9      	str	r1, [r7, #8]
 800bf2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	3b04      	subs	r3, #4
 800bf30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bf38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	3b04      	subs	r3, #4
 800bf3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	f023 0201 	bic.w	r2, r3, #1
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	3b04      	subs	r3, #4
 800bf4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf50:	4a0c      	ldr	r2, [pc, #48]	@ (800bf84 <pxPortInitialiseStack+0x64>)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	3b14      	subs	r3, #20
 800bf5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	3b04      	subs	r3, #4
 800bf66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f06f 0202 	mvn.w	r2, #2
 800bf6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3b20      	subs	r3, #32
 800bf74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf76:	68fb      	ldr	r3, [r7, #12]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr
 800bf84:	0800bf89 	.word	0x0800bf89

0800bf88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf92:	4b13      	ldr	r3, [pc, #76]	@ (800bfe0 <prvTaskExitError+0x58>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf9a:	d00b      	beq.n	800bfb4 <prvTaskExitError+0x2c>
	__asm volatile
 800bf9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa0:	f383 8811 	msr	BASEPRI, r3
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	60fb      	str	r3, [r7, #12]
}
 800bfae:	bf00      	nop
 800bfb0:	bf00      	nop
 800bfb2:	e7fd      	b.n	800bfb0 <prvTaskExitError+0x28>
	__asm volatile
 800bfb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	60bb      	str	r3, [r7, #8]
}
 800bfc6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bfc8:	bf00      	nop
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d0fc      	beq.n	800bfca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bfd0:	bf00      	nop
 800bfd2:	bf00      	nop
 800bfd4:	3714      	adds	r7, #20
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	2000002c 	.word	0x2000002c
	...

0800bff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bff0:	4b07      	ldr	r3, [pc, #28]	@ (800c010 <pxCurrentTCBConst2>)
 800bff2:	6819      	ldr	r1, [r3, #0]
 800bff4:	6808      	ldr	r0, [r1, #0]
 800bff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffa:	f380 8809 	msr	PSP, r0
 800bffe:	f3bf 8f6f 	isb	sy
 800c002:	f04f 0000 	mov.w	r0, #0
 800c006:	f380 8811 	msr	BASEPRI, r0
 800c00a:	4770      	bx	lr
 800c00c:	f3af 8000 	nop.w

0800c010 <pxCurrentTCBConst2>:
 800c010:	200009f0 	.word	0x200009f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop

0800c018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c018:	4808      	ldr	r0, [pc, #32]	@ (800c03c <prvPortStartFirstTask+0x24>)
 800c01a:	6800      	ldr	r0, [r0, #0]
 800c01c:	6800      	ldr	r0, [r0, #0]
 800c01e:	f380 8808 	msr	MSP, r0
 800c022:	f04f 0000 	mov.w	r0, #0
 800c026:	f380 8814 	msr	CONTROL, r0
 800c02a:	b662      	cpsie	i
 800c02c:	b661      	cpsie	f
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	df00      	svc	0
 800c038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c03a:	bf00      	nop
 800c03c:	e000ed08 	.word	0xe000ed08

0800c040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c046:	4b47      	ldr	r3, [pc, #284]	@ (800c164 <xPortStartScheduler+0x124>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a47      	ldr	r2, [pc, #284]	@ (800c168 <xPortStartScheduler+0x128>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d10b      	bne.n	800c068 <xPortStartScheduler+0x28>
	__asm volatile
 800c050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c054:	f383 8811 	msr	BASEPRI, r3
 800c058:	f3bf 8f6f 	isb	sy
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	613b      	str	r3, [r7, #16]
}
 800c062:	bf00      	nop
 800c064:	bf00      	nop
 800c066:	e7fd      	b.n	800c064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c068:	4b3e      	ldr	r3, [pc, #248]	@ (800c164 <xPortStartScheduler+0x124>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4a3f      	ldr	r2, [pc, #252]	@ (800c16c <xPortStartScheduler+0x12c>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d10b      	bne.n	800c08a <xPortStartScheduler+0x4a>
	__asm volatile
 800c072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	60fb      	str	r3, [r7, #12]
}
 800c084:	bf00      	nop
 800c086:	bf00      	nop
 800c088:	e7fd      	b.n	800c086 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c08a:	4b39      	ldr	r3, [pc, #228]	@ (800c170 <xPortStartScheduler+0x130>)
 800c08c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	b2db      	uxtb	r3, r3
 800c094:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	22ff      	movs	r2, #255	@ 0xff
 800c09a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0a4:	78fb      	ldrb	r3, [r7, #3]
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	4b31      	ldr	r3, [pc, #196]	@ (800c174 <xPortStartScheduler+0x134>)
 800c0b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0b2:	4b31      	ldr	r3, [pc, #196]	@ (800c178 <xPortStartScheduler+0x138>)
 800c0b4:	2207      	movs	r2, #7
 800c0b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0b8:	e009      	b.n	800c0ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c0ba:	4b2f      	ldr	r3, [pc, #188]	@ (800c178 <xPortStartScheduler+0x138>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	4a2d      	ldr	r2, [pc, #180]	@ (800c178 <xPortStartScheduler+0x138>)
 800c0c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c0c4:	78fb      	ldrb	r3, [r7, #3]
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	005b      	lsls	r3, r3, #1
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0ce:	78fb      	ldrb	r3, [r7, #3]
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0d6:	2b80      	cmp	r3, #128	@ 0x80
 800c0d8:	d0ef      	beq.n	800c0ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c0da:	4b27      	ldr	r3, [pc, #156]	@ (800c178 <xPortStartScheduler+0x138>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f1c3 0307 	rsb	r3, r3, #7
 800c0e2:	2b04      	cmp	r3, #4
 800c0e4:	d00b      	beq.n	800c0fe <xPortStartScheduler+0xbe>
	__asm volatile
 800c0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ea:	f383 8811 	msr	BASEPRI, r3
 800c0ee:	f3bf 8f6f 	isb	sy
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	60bb      	str	r3, [r7, #8]
}
 800c0f8:	bf00      	nop
 800c0fa:	bf00      	nop
 800c0fc:	e7fd      	b.n	800c0fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0fe:	4b1e      	ldr	r3, [pc, #120]	@ (800c178 <xPortStartScheduler+0x138>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	021b      	lsls	r3, r3, #8
 800c104:	4a1c      	ldr	r2, [pc, #112]	@ (800c178 <xPortStartScheduler+0x138>)
 800c106:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c108:	4b1b      	ldr	r3, [pc, #108]	@ (800c178 <xPortStartScheduler+0x138>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c110:	4a19      	ldr	r2, [pc, #100]	@ (800c178 <xPortStartScheduler+0x138>)
 800c112:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	b2da      	uxtb	r2, r3
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c11c:	4b17      	ldr	r3, [pc, #92]	@ (800c17c <xPortStartScheduler+0x13c>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a16      	ldr	r2, [pc, #88]	@ (800c17c <xPortStartScheduler+0x13c>)
 800c122:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c126:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c128:	4b14      	ldr	r3, [pc, #80]	@ (800c17c <xPortStartScheduler+0x13c>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a13      	ldr	r2, [pc, #76]	@ (800c17c <xPortStartScheduler+0x13c>)
 800c12e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c132:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c134:	f000 f8da 	bl	800c2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c138:	4b11      	ldr	r3, [pc, #68]	@ (800c180 <xPortStartScheduler+0x140>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c13e:	f000 f8f9 	bl	800c334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c142:	4b10      	ldr	r3, [pc, #64]	@ (800c184 <xPortStartScheduler+0x144>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4a0f      	ldr	r2, [pc, #60]	@ (800c184 <xPortStartScheduler+0x144>)
 800c148:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c14c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c14e:	f7ff ff63 	bl	800c018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c152:	f7ff f82b 	bl	800b1ac <vTaskSwitchContext>
	prvTaskExitError();
 800c156:	f7ff ff17 	bl	800bf88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3718      	adds	r7, #24
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	e000ed00 	.word	0xe000ed00
 800c168:	410fc271 	.word	0x410fc271
 800c16c:	410fc270 	.word	0x410fc270
 800c170:	e000e400 	.word	0xe000e400
 800c174:	2000101c 	.word	0x2000101c
 800c178:	20001020 	.word	0x20001020
 800c17c:	e000ed20 	.word	0xe000ed20
 800c180:	2000002c 	.word	0x2000002c
 800c184:	e000ef34 	.word	0xe000ef34

0800c188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
	__asm volatile
 800c18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	607b      	str	r3, [r7, #4]
}
 800c1a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c1a2:	4b10      	ldr	r3, [pc, #64]	@ (800c1e4 <vPortEnterCritical+0x5c>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	4a0e      	ldr	r2, [pc, #56]	@ (800c1e4 <vPortEnterCritical+0x5c>)
 800c1aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c1ac:	4b0d      	ldr	r3, [pc, #52]	@ (800c1e4 <vPortEnterCritical+0x5c>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d110      	bne.n	800c1d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c1b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e8 <vPortEnterCritical+0x60>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00b      	beq.n	800c1d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	603b      	str	r3, [r7, #0]
}
 800c1d0:	bf00      	nop
 800c1d2:	bf00      	nop
 800c1d4:	e7fd      	b.n	800c1d2 <vPortEnterCritical+0x4a>
	}
}
 800c1d6:	bf00      	nop
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	2000002c 	.word	0x2000002c
 800c1e8:	e000ed04 	.word	0xe000ed04

0800c1ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c1f2:	4b12      	ldr	r3, [pc, #72]	@ (800c23c <vPortExitCritical+0x50>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10b      	bne.n	800c212 <vPortExitCritical+0x26>
	__asm volatile
 800c1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fe:	f383 8811 	msr	BASEPRI, r3
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	607b      	str	r3, [r7, #4]
}
 800c20c:	bf00      	nop
 800c20e:	bf00      	nop
 800c210:	e7fd      	b.n	800c20e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c212:	4b0a      	ldr	r3, [pc, #40]	@ (800c23c <vPortExitCritical+0x50>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	3b01      	subs	r3, #1
 800c218:	4a08      	ldr	r2, [pc, #32]	@ (800c23c <vPortExitCritical+0x50>)
 800c21a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c21c:	4b07      	ldr	r3, [pc, #28]	@ (800c23c <vPortExitCritical+0x50>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d105      	bne.n	800c230 <vPortExitCritical+0x44>
 800c224:	2300      	movs	r3, #0
 800c226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	f383 8811 	msr	BASEPRI, r3
}
 800c22e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c230:	bf00      	nop
 800c232:	370c      	adds	r7, #12
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	2000002c 	.word	0x2000002c

0800c240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c240:	f3ef 8009 	mrs	r0, PSP
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	4b15      	ldr	r3, [pc, #84]	@ (800c2a0 <pxCurrentTCBConst>)
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	f01e 0f10 	tst.w	lr, #16
 800c250:	bf08      	it	eq
 800c252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c25a:	6010      	str	r0, [r2, #0]
 800c25c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c264:	f380 8811 	msr	BASEPRI, r0
 800c268:	f3bf 8f4f 	dsb	sy
 800c26c:	f3bf 8f6f 	isb	sy
 800c270:	f7fe ff9c 	bl	800b1ac <vTaskSwitchContext>
 800c274:	f04f 0000 	mov.w	r0, #0
 800c278:	f380 8811 	msr	BASEPRI, r0
 800c27c:	bc09      	pop	{r0, r3}
 800c27e:	6819      	ldr	r1, [r3, #0]
 800c280:	6808      	ldr	r0, [r1, #0]
 800c282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c286:	f01e 0f10 	tst.w	lr, #16
 800c28a:	bf08      	it	eq
 800c28c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c290:	f380 8809 	msr	PSP, r0
 800c294:	f3bf 8f6f 	isb	sy
 800c298:	4770      	bx	lr
 800c29a:	bf00      	nop
 800c29c:	f3af 8000 	nop.w

0800c2a0 <pxCurrentTCBConst>:
 800c2a0:	200009f0 	.word	0x200009f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c2a4:	bf00      	nop
 800c2a6:	bf00      	nop

0800c2a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b2:	f383 8811 	msr	BASEPRI, r3
 800c2b6:	f3bf 8f6f 	isb	sy
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	607b      	str	r3, [r7, #4]
}
 800c2c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c2c2:	f7fe feb9 	bl	800b038 <xTaskIncrementTick>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d003      	beq.n	800c2d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c2cc:	4b06      	ldr	r3, [pc, #24]	@ (800c2e8 <xPortSysTickHandler+0x40>)
 800c2ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2d2:	601a      	str	r2, [r3, #0]
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	f383 8811 	msr	BASEPRI, r3
}
 800c2de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c2e0:	bf00      	nop
 800c2e2:	3708      	adds	r7, #8
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	e000ed04 	.word	0xe000ed04

0800c2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c2f0:	4b0b      	ldr	r3, [pc, #44]	@ (800c320 <vPortSetupTimerInterrupt+0x34>)
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c324 <vPortSetupTimerInterrupt+0x38>)
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c2fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c328 <vPortSetupTimerInterrupt+0x3c>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a0a      	ldr	r2, [pc, #40]	@ (800c32c <vPortSetupTimerInterrupt+0x40>)
 800c302:	fba2 2303 	umull	r2, r3, r2, r3
 800c306:	099b      	lsrs	r3, r3, #6
 800c308:	4a09      	ldr	r2, [pc, #36]	@ (800c330 <vPortSetupTimerInterrupt+0x44>)
 800c30a:	3b01      	subs	r3, #1
 800c30c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c30e:	4b04      	ldr	r3, [pc, #16]	@ (800c320 <vPortSetupTimerInterrupt+0x34>)
 800c310:	2207      	movs	r2, #7
 800c312:	601a      	str	r2, [r3, #0]
}
 800c314:	bf00      	nop
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	e000e010 	.word	0xe000e010
 800c324:	e000e018 	.word	0xe000e018
 800c328:	20000000 	.word	0x20000000
 800c32c:	10624dd3 	.word	0x10624dd3
 800c330:	e000e014 	.word	0xe000e014

0800c334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c334:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c344 <vPortEnableVFP+0x10>
 800c338:	6801      	ldr	r1, [r0, #0]
 800c33a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c33e:	6001      	str	r1, [r0, #0]
 800c340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c342:	bf00      	nop
 800c344:	e000ed88 	.word	0xe000ed88

0800c348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c34e:	f3ef 8305 	mrs	r3, IPSR
 800c352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b0f      	cmp	r3, #15
 800c358:	d915      	bls.n	800c386 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c35a:	4a18      	ldr	r2, [pc, #96]	@ (800c3bc <vPortValidateInterruptPriority+0x74>)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	4413      	add	r3, r2
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c364:	4b16      	ldr	r3, [pc, #88]	@ (800c3c0 <vPortValidateInterruptPriority+0x78>)
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	7afa      	ldrb	r2, [r7, #11]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d20b      	bcs.n	800c386 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	607b      	str	r3, [r7, #4]
}
 800c380:	bf00      	nop
 800c382:	bf00      	nop
 800c384:	e7fd      	b.n	800c382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c386:	4b0f      	ldr	r3, [pc, #60]	@ (800c3c4 <vPortValidateInterruptPriority+0x7c>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c38e:	4b0e      	ldr	r3, [pc, #56]	@ (800c3c8 <vPortValidateInterruptPriority+0x80>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	429a      	cmp	r2, r3
 800c394:	d90b      	bls.n	800c3ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39a:	f383 8811 	msr	BASEPRI, r3
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	603b      	str	r3, [r7, #0]
}
 800c3a8:	bf00      	nop
 800c3aa:	bf00      	nop
 800c3ac:	e7fd      	b.n	800c3aa <vPortValidateInterruptPriority+0x62>
	}
 800c3ae:	bf00      	nop
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	e000e3f0 	.word	0xe000e3f0
 800c3c0:	2000101c 	.word	0x2000101c
 800c3c4:	e000ed0c 	.word	0xe000ed0c
 800c3c8:	20001020 	.word	0x20001020

0800c3cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08a      	sub	sp, #40	@ 0x28
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c3d8:	f7fe fd72 	bl	800aec0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c3dc:	4b5c      	ldr	r3, [pc, #368]	@ (800c550 <pvPortMalloc+0x184>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c3e4:	f000 f924 	bl	800c630 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c3e8:	4b5a      	ldr	r3, [pc, #360]	@ (800c554 <pvPortMalloc+0x188>)
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4013      	ands	r3, r2
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f040 8095 	bne.w	800c520 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d01e      	beq.n	800c43a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c3fc:	2208      	movs	r2, #8
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4413      	add	r3, r2
 800c402:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f003 0307 	and.w	r3, r3, #7
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d015      	beq.n	800c43a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f023 0307 	bic.w	r3, r3, #7
 800c414:	3308      	adds	r3, #8
 800c416:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f003 0307 	and.w	r3, r3, #7
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00b      	beq.n	800c43a <pvPortMalloc+0x6e>
	__asm volatile
 800c422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c426:	f383 8811 	msr	BASEPRI, r3
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	617b      	str	r3, [r7, #20]
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop
 800c438:	e7fd      	b.n	800c436 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d06f      	beq.n	800c520 <pvPortMalloc+0x154>
 800c440:	4b45      	ldr	r3, [pc, #276]	@ (800c558 <pvPortMalloc+0x18c>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	429a      	cmp	r2, r3
 800c448:	d86a      	bhi.n	800c520 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c44a:	4b44      	ldr	r3, [pc, #272]	@ (800c55c <pvPortMalloc+0x190>)
 800c44c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c44e:	4b43      	ldr	r3, [pc, #268]	@ (800c55c <pvPortMalloc+0x190>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c454:	e004      	b.n	800c460 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	429a      	cmp	r2, r3
 800c468:	d903      	bls.n	800c472 <pvPortMalloc+0xa6>
 800c46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d1f1      	bne.n	800c456 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c472:	4b37      	ldr	r3, [pc, #220]	@ (800c550 <pvPortMalloc+0x184>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c478:	429a      	cmp	r2, r3
 800c47a:	d051      	beq.n	800c520 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c47c:	6a3b      	ldr	r3, [r7, #32]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2208      	movs	r2, #8
 800c482:	4413      	add	r3, r2
 800c484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	6a3b      	ldr	r3, [r7, #32]
 800c48c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c490:	685a      	ldr	r2, [r3, #4]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	1ad2      	subs	r2, r2, r3
 800c496:	2308      	movs	r3, #8
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d920      	bls.n	800c4e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c49e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	f003 0307 	and.w	r3, r3, #7
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00b      	beq.n	800c4c8 <pvPortMalloc+0xfc>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	613b      	str	r3, [r7, #16]
}
 800c4c2:	bf00      	nop
 800c4c4:	bf00      	nop
 800c4c6:	e7fd      	b.n	800c4c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ca:	685a      	ldr	r2, [r3, #4]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	1ad2      	subs	r2, r2, r3
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c4da:	69b8      	ldr	r0, [r7, #24]
 800c4dc:	f000 f90a 	bl	800c6f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c4e0:	4b1d      	ldr	r3, [pc, #116]	@ (800c558 <pvPortMalloc+0x18c>)
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	1ad3      	subs	r3, r2, r3
 800c4ea:	4a1b      	ldr	r2, [pc, #108]	@ (800c558 <pvPortMalloc+0x18c>)
 800c4ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c4ee:	4b1a      	ldr	r3, [pc, #104]	@ (800c558 <pvPortMalloc+0x18c>)
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800c560 <pvPortMalloc+0x194>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d203      	bcs.n	800c502 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c4fa:	4b17      	ldr	r3, [pc, #92]	@ (800c558 <pvPortMalloc+0x18c>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a18      	ldr	r2, [pc, #96]	@ (800c560 <pvPortMalloc+0x194>)
 800c500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c504:	685a      	ldr	r2, [r3, #4]
 800c506:	4b13      	ldr	r3, [pc, #76]	@ (800c554 <pvPortMalloc+0x188>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	431a      	orrs	r2, r3
 800c50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c50e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c512:	2200      	movs	r2, #0
 800c514:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c516:	4b13      	ldr	r3, [pc, #76]	@ (800c564 <pvPortMalloc+0x198>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	3301      	adds	r3, #1
 800c51c:	4a11      	ldr	r2, [pc, #68]	@ (800c564 <pvPortMalloc+0x198>)
 800c51e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c520:	f7fe fcdc 	bl	800aedc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	f003 0307 	and.w	r3, r3, #7
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00b      	beq.n	800c546 <pvPortMalloc+0x17a>
	__asm volatile
 800c52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	60fb      	str	r3, [r7, #12]
}
 800c540:	bf00      	nop
 800c542:	bf00      	nop
 800c544:	e7fd      	b.n	800c542 <pvPortMalloc+0x176>
	return pvReturn;
 800c546:	69fb      	ldr	r3, [r7, #28]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3728      	adds	r7, #40	@ 0x28
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	20004c2c 	.word	0x20004c2c
 800c554:	20004c40 	.word	0x20004c40
 800c558:	20004c30 	.word	0x20004c30
 800c55c:	20004c24 	.word	0x20004c24
 800c560:	20004c34 	.word	0x20004c34
 800c564:	20004c38 	.word	0x20004c38

0800c568 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b086      	sub	sp, #24
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d04f      	beq.n	800c61a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c57a:	2308      	movs	r3, #8
 800c57c:	425b      	negs	r3, r3
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	4413      	add	r3, r2
 800c582:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	4b25      	ldr	r3, [pc, #148]	@ (800c624 <vPortFree+0xbc>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4013      	ands	r3, r2
 800c592:	2b00      	cmp	r3, #0
 800c594:	d10b      	bne.n	800c5ae <vPortFree+0x46>
	__asm volatile
 800c596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c59a:	f383 8811 	msr	BASEPRI, r3
 800c59e:	f3bf 8f6f 	isb	sy
 800c5a2:	f3bf 8f4f 	dsb	sy
 800c5a6:	60fb      	str	r3, [r7, #12]
}
 800c5a8:	bf00      	nop
 800c5aa:	bf00      	nop
 800c5ac:	e7fd      	b.n	800c5aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00b      	beq.n	800c5ce <vPortFree+0x66>
	__asm volatile
 800c5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ba:	f383 8811 	msr	BASEPRI, r3
 800c5be:	f3bf 8f6f 	isb	sy
 800c5c2:	f3bf 8f4f 	dsb	sy
 800c5c6:	60bb      	str	r3, [r7, #8]
}
 800c5c8:	bf00      	nop
 800c5ca:	bf00      	nop
 800c5cc:	e7fd      	b.n	800c5ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	685a      	ldr	r2, [r3, #4]
 800c5d2:	4b14      	ldr	r3, [pc, #80]	@ (800c624 <vPortFree+0xbc>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4013      	ands	r3, r2
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d01e      	beq.n	800c61a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d11a      	bne.n	800c61a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	685a      	ldr	r2, [r3, #4]
 800c5e8:	4b0e      	ldr	r3, [pc, #56]	@ (800c624 <vPortFree+0xbc>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	43db      	mvns	r3, r3
 800c5ee:	401a      	ands	r2, r3
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c5f4:	f7fe fc64 	bl	800aec0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c628 <vPortFree+0xc0>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4413      	add	r3, r2
 800c602:	4a09      	ldr	r2, [pc, #36]	@ (800c628 <vPortFree+0xc0>)
 800c604:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c606:	6938      	ldr	r0, [r7, #16]
 800c608:	f000 f874 	bl	800c6f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c60c:	4b07      	ldr	r3, [pc, #28]	@ (800c62c <vPortFree+0xc4>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	3301      	adds	r3, #1
 800c612:	4a06      	ldr	r2, [pc, #24]	@ (800c62c <vPortFree+0xc4>)
 800c614:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c616:	f7fe fc61 	bl	800aedc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c61a:	bf00      	nop
 800c61c:	3718      	adds	r7, #24
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	20004c40 	.word	0x20004c40
 800c628:	20004c30 	.word	0x20004c30
 800c62c:	20004c3c 	.word	0x20004c3c

0800c630 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c630:	b480      	push	{r7}
 800c632:	b085      	sub	sp, #20
 800c634:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c636:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c63a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c63c:	4b27      	ldr	r3, [pc, #156]	@ (800c6dc <prvHeapInit+0xac>)
 800c63e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f003 0307 	and.w	r3, r3, #7
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00c      	beq.n	800c664 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	3307      	adds	r3, #7
 800c64e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f023 0307 	bic.w	r3, r3, #7
 800c656:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c658:	68ba      	ldr	r2, [r7, #8]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	1ad3      	subs	r3, r2, r3
 800c65e:	4a1f      	ldr	r2, [pc, #124]	@ (800c6dc <prvHeapInit+0xac>)
 800c660:	4413      	add	r3, r2
 800c662:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c668:	4a1d      	ldr	r2, [pc, #116]	@ (800c6e0 <prvHeapInit+0xb0>)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c66e:	4b1c      	ldr	r3, [pc, #112]	@ (800c6e0 <prvHeapInit+0xb0>)
 800c670:	2200      	movs	r2, #0
 800c672:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	4413      	add	r3, r2
 800c67a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c67c:	2208      	movs	r2, #8
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	1a9b      	subs	r3, r3, r2
 800c682:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f023 0307 	bic.w	r3, r3, #7
 800c68a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	4a15      	ldr	r2, [pc, #84]	@ (800c6e4 <prvHeapInit+0xb4>)
 800c690:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c692:	4b14      	ldr	r3, [pc, #80]	@ (800c6e4 <prvHeapInit+0xb4>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2200      	movs	r2, #0
 800c698:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c69a:	4b12      	ldr	r3, [pc, #72]	@ (800c6e4 <prvHeapInit+0xb4>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	1ad2      	subs	r2, r2, r3
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c6b0:	4b0c      	ldr	r3, [pc, #48]	@ (800c6e4 <prvHeapInit+0xb4>)
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	4a0a      	ldr	r2, [pc, #40]	@ (800c6e8 <prvHeapInit+0xb8>)
 800c6be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	4a09      	ldr	r2, [pc, #36]	@ (800c6ec <prvHeapInit+0xbc>)
 800c6c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c6c8:	4b09      	ldr	r3, [pc, #36]	@ (800c6f0 <prvHeapInit+0xc0>)
 800c6ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c6ce:	601a      	str	r2, [r3, #0]
}
 800c6d0:	bf00      	nop
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr
 800c6dc:	20001024 	.word	0x20001024
 800c6e0:	20004c24 	.word	0x20004c24
 800c6e4:	20004c2c 	.word	0x20004c2c
 800c6e8:	20004c34 	.word	0x20004c34
 800c6ec:	20004c30 	.word	0x20004c30
 800c6f0:	20004c40 	.word	0x20004c40

0800c6f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c6fc:	4b28      	ldr	r3, [pc, #160]	@ (800c7a0 <prvInsertBlockIntoFreeList+0xac>)
 800c6fe:	60fb      	str	r3, [r7, #12]
 800c700:	e002      	b.n	800c708 <prvInsertBlockIntoFreeList+0x14>
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d8f7      	bhi.n	800c702 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	68ba      	ldr	r2, [r7, #8]
 800c71c:	4413      	add	r3, r2
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	429a      	cmp	r2, r3
 800c722:	d108      	bne.n	800c736 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	685a      	ldr	r2, [r3, #4]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	441a      	add	r2, r3
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	441a      	add	r2, r3
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	429a      	cmp	r2, r3
 800c748:	d118      	bne.n	800c77c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	4b15      	ldr	r3, [pc, #84]	@ (800c7a4 <prvInsertBlockIntoFreeList+0xb0>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	429a      	cmp	r2, r3
 800c754:	d00d      	beq.n	800c772 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	685a      	ldr	r2, [r3, #4]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	441a      	add	r2, r3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	601a      	str	r2, [r3, #0]
 800c770:	e008      	b.n	800c784 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c772:	4b0c      	ldr	r3, [pc, #48]	@ (800c7a4 <prvInsertBlockIntoFreeList+0xb0>)
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	601a      	str	r2, [r3, #0]
 800c77a:	e003      	b.n	800c784 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c784:	68fa      	ldr	r2, [r7, #12]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d002      	beq.n	800c792 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c792:	bf00      	nop
 800c794:	3714      	adds	r7, #20
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	20004c24 	.word	0x20004c24
 800c7a4:	20004c2c 	.word	0x20004c2c

0800c7a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	490e      	ldr	r1, [pc, #56]	@ (800c7e8 <MX_USB_HOST_Init+0x40>)
 800c7b0:	480e      	ldr	r0, [pc, #56]	@ (800c7ec <MX_USB_HOST_Init+0x44>)
 800c7b2:	f7fb f901 	bl	80079b8 <USBH_Init>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c7bc:	f7f4 f9e2 	bl	8000b84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c7c0:	490b      	ldr	r1, [pc, #44]	@ (800c7f0 <MX_USB_HOST_Init+0x48>)
 800c7c2:	480a      	ldr	r0, [pc, #40]	@ (800c7ec <MX_USB_HOST_Init+0x44>)
 800c7c4:	f7fb f9c7 	bl	8007b56 <USBH_RegisterClass>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d001      	beq.n	800c7d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c7ce:	f7f4 f9d9 	bl	8000b84 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c7d2:	4806      	ldr	r0, [pc, #24]	@ (800c7ec <MX_USB_HOST_Init+0x44>)
 800c7d4:	f7fb fa4b 	bl	8007c6e <USBH_Start>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d001      	beq.n	800c7e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c7de:	f7f4 f9d1 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c7e2:	bf00      	nop
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	0800c7f5 	.word	0x0800c7f5
 800c7ec:	20004c44 	.word	0x20004c44
 800c7f0:	2000000c 	.word	0x2000000c

0800c7f4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c800:	78fb      	ldrb	r3, [r7, #3]
 800c802:	3b01      	subs	r3, #1
 800c804:	2b04      	cmp	r3, #4
 800c806:	d819      	bhi.n	800c83c <USBH_UserProcess+0x48>
 800c808:	a201      	add	r2, pc, #4	@ (adr r2, 800c810 <USBH_UserProcess+0x1c>)
 800c80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c80e:	bf00      	nop
 800c810:	0800c83d 	.word	0x0800c83d
 800c814:	0800c82d 	.word	0x0800c82d
 800c818:	0800c83d 	.word	0x0800c83d
 800c81c:	0800c835 	.word	0x0800c835
 800c820:	0800c825 	.word	0x0800c825
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c824:	4b09      	ldr	r3, [pc, #36]	@ (800c84c <USBH_UserProcess+0x58>)
 800c826:	2203      	movs	r2, #3
 800c828:	701a      	strb	r2, [r3, #0]
  break;
 800c82a:	e008      	b.n	800c83e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c82c:	4b07      	ldr	r3, [pc, #28]	@ (800c84c <USBH_UserProcess+0x58>)
 800c82e:	2202      	movs	r2, #2
 800c830:	701a      	strb	r2, [r3, #0]
  break;
 800c832:	e004      	b.n	800c83e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c834:	4b05      	ldr	r3, [pc, #20]	@ (800c84c <USBH_UserProcess+0x58>)
 800c836:	2201      	movs	r2, #1
 800c838:	701a      	strb	r2, [r3, #0]
  break;
 800c83a:	e000      	b.n	800c83e <USBH_UserProcess+0x4a>

  default:
  break;
 800c83c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c83e:	bf00      	nop
 800c840:	370c      	adds	r7, #12
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	20005028 	.word	0x20005028

0800c850 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b08a      	sub	sp, #40	@ 0x28
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c858:	f107 0314 	add.w	r3, r7, #20
 800c85c:	2200      	movs	r2, #0
 800c85e:	601a      	str	r2, [r3, #0]
 800c860:	605a      	str	r2, [r3, #4]
 800c862:	609a      	str	r2, [r3, #8]
 800c864:	60da      	str	r2, [r3, #12]
 800c866:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c870:	d147      	bne.n	800c902 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c872:	2300      	movs	r3, #0
 800c874:	613b      	str	r3, [r7, #16]
 800c876:	4b25      	ldr	r3, [pc, #148]	@ (800c90c <HAL_HCD_MspInit+0xbc>)
 800c878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c87a:	4a24      	ldr	r2, [pc, #144]	@ (800c90c <HAL_HCD_MspInit+0xbc>)
 800c87c:	f043 0301 	orr.w	r3, r3, #1
 800c880:	6313      	str	r3, [r2, #48]	@ 0x30
 800c882:	4b22      	ldr	r3, [pc, #136]	@ (800c90c <HAL_HCD_MspInit+0xbc>)
 800c884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	613b      	str	r3, [r7, #16]
 800c88c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c88e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c894:	2300      	movs	r3, #0
 800c896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c898:	2300      	movs	r3, #0
 800c89a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c89c:	f107 0314 	add.w	r3, r7, #20
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	481b      	ldr	r0, [pc, #108]	@ (800c910 <HAL_HCD_MspInit+0xc0>)
 800c8a4:	f7f4 fd5e 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c8a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c8ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8ae:	2302      	movs	r3, #2
 800c8b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c8ba:	230a      	movs	r3, #10
 800c8bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8be:	f107 0314 	add.w	r3, r7, #20
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	4812      	ldr	r0, [pc, #72]	@ (800c910 <HAL_HCD_MspInit+0xc0>)
 800c8c6:	f7f4 fd4d 	bl	8001364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c8ca:	4b10      	ldr	r3, [pc, #64]	@ (800c90c <HAL_HCD_MspInit+0xbc>)
 800c8cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8ce:	4a0f      	ldr	r2, [pc, #60]	@ (800c90c <HAL_HCD_MspInit+0xbc>)
 800c8d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8d4:	6353      	str	r3, [r2, #52]	@ 0x34
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	60fb      	str	r3, [r7, #12]
 800c8da:	4b0c      	ldr	r3, [pc, #48]	@ (800c90c <HAL_HCD_MspInit+0xbc>)
 800c8dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8de:	4a0b      	ldr	r2, [pc, #44]	@ (800c90c <HAL_HCD_MspInit+0xbc>)
 800c8e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c8e4:	6453      	str	r3, [r2, #68]	@ 0x44
 800c8e6:	4b09      	ldr	r3, [pc, #36]	@ (800c90c <HAL_HCD_MspInit+0xbc>)
 800c8e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c8ee:	60fb      	str	r3, [r7, #12]
 800c8f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	2105      	movs	r1, #5
 800c8f6:	2043      	movs	r0, #67	@ 0x43
 800c8f8:	f7f4 fd0a 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c8fc:	2043      	movs	r0, #67	@ 0x43
 800c8fe:	f7f4 fd23 	bl	8001348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c902:	bf00      	nop
 800c904:	3728      	adds	r7, #40	@ 0x28
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	40023800 	.word	0x40023800
 800c910:	40020000 	.word	0x40020000

0800c914 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c922:	4618      	mov	r0, r3
 800c924:	f7fb fe55 	bl	80085d2 <USBH_LL_IncTimer>
}
 800c928:	bf00      	nop
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fb fe99 	bl	8008676 <USBH_LL_Connect>
}
 800c944:	bf00      	nop
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fb feae 	bl	80086bc <USBH_LL_Disconnect>
}
 800c960:	bf00      	nop
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	460b      	mov	r3, r1
 800c972:	70fb      	strb	r3, [r7, #3]
 800c974:	4613      	mov	r3, r2
 800c976:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c97e:	4618      	mov	r0, r3
 800c980:	f7fb fee5 	bl	800874e <USBH_LL_NotifyURBChange>
#endif
}
 800c984:	bf00      	nop
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fb fe43 	bl	8008626 <USBH_LL_PortEnabled>
}
 800c9a0:	bf00      	nop
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fb fe4f 	bl	800865a <USBH_LL_PortDisabled>
}
 800c9bc:	bf00      	nop
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d12a      	bne.n	800ca2c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c9d6:	4a18      	ldr	r2, [pc, #96]	@ (800ca38 <USBH_LL_Init+0x74>)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4a15      	ldr	r2, [pc, #84]	@ (800ca38 <USBH_LL_Init+0x74>)
 800c9e2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c9e6:	4b14      	ldr	r3, [pc, #80]	@ (800ca38 <USBH_LL_Init+0x74>)
 800c9e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c9ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c9ee:	4b12      	ldr	r3, [pc, #72]	@ (800ca38 <USBH_LL_Init+0x74>)
 800c9f0:	2208      	movs	r2, #8
 800c9f2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c9f4:	4b10      	ldr	r3, [pc, #64]	@ (800ca38 <USBH_LL_Init+0x74>)
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c9fa:	4b0f      	ldr	r3, [pc, #60]	@ (800ca38 <USBH_LL_Init+0x74>)
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ca00:	4b0d      	ldr	r3, [pc, #52]	@ (800ca38 <USBH_LL_Init+0x74>)
 800ca02:	2202      	movs	r2, #2
 800ca04:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ca06:	4b0c      	ldr	r3, [pc, #48]	@ (800ca38 <USBH_LL_Init+0x74>)
 800ca08:	2200      	movs	r2, #0
 800ca0a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ca0c:	480a      	ldr	r0, [pc, #40]	@ (800ca38 <USBH_LL_Init+0x74>)
 800ca0e:	f7f4 fe5e 	bl	80016ce <HAL_HCD_Init>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ca18:	f7f4 f8b4 	bl	8000b84 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ca1c:	4806      	ldr	r0, [pc, #24]	@ (800ca38 <USBH_LL_Init+0x74>)
 800ca1e:	f7f5 fabf 	bl	8001fa0 <HAL_HCD_GetCurrentFrame>
 800ca22:	4603      	mov	r3, r0
 800ca24:	4619      	mov	r1, r3
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f7fb fdc4 	bl	80085b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ca2c:	2300      	movs	r3, #0
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3708      	adds	r7, #8
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	2000502c 	.word	0x2000502c

0800ca3c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca44:	2300      	movs	r3, #0
 800ca46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7f5 fa2c 	bl	8001eb0 <HAL_HCD_Start>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca5c:	7bfb      	ldrb	r3, [r7, #15]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f000 f95e 	bl	800cd20 <USBH_Get_USB_Status>
 800ca64:	4603      	mov	r3, r0
 800ca66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3710      	adds	r7, #16
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b084      	sub	sp, #16
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7f5 fa34 	bl	8001ef6 <HAL_HCD_Stop>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca92:	7bfb      	ldrb	r3, [r7, #15]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f000 f943 	bl	800cd20 <USBH_Get_USB_Status>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3710      	adds	r7, #16
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cab0:	2301      	movs	r3, #1
 800cab2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800caba:	4618      	mov	r0, r3
 800cabc:	f7f5 fa7e 	bl	8001fbc <HAL_HCD_GetCurrentSpeed>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	d00c      	beq.n	800cae0 <USBH_LL_GetSpeed+0x38>
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d80d      	bhi.n	800cae6 <USBH_LL_GetSpeed+0x3e>
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d002      	beq.n	800cad4 <USBH_LL_GetSpeed+0x2c>
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d003      	beq.n	800cada <USBH_LL_GetSpeed+0x32>
 800cad2:	e008      	b.n	800cae6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cad4:	2300      	movs	r3, #0
 800cad6:	73fb      	strb	r3, [r7, #15]
    break;
 800cad8:	e008      	b.n	800caec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cada:	2301      	movs	r3, #1
 800cadc:	73fb      	strb	r3, [r7, #15]
    break;
 800cade:	e005      	b.n	800caec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cae0:	2302      	movs	r3, #2
 800cae2:	73fb      	strb	r3, [r7, #15]
    break;
 800cae4:	e002      	b.n	800caec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cae6:	2301      	movs	r3, #1
 800cae8:	73fb      	strb	r3, [r7, #15]
    break;
 800caea:	bf00      	nop
  }
  return  speed;
 800caec:	7bfb      	ldrb	r3, [r7, #15]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b084      	sub	sp, #16
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cafe:	2300      	movs	r3, #0
 800cb00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb02:	2300      	movs	r3, #0
 800cb04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7f5 fa0f 	bl	8001f30 <HAL_HCD_ResetPort>
 800cb12:	4603      	mov	r3, r0
 800cb14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb16:	7bfb      	ldrb	r3, [r7, #15]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f000 f901 	bl	800cd20 <USBH_Get_USB_Status>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb22:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	460b      	mov	r3, r1
 800cb36:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cb3e:	78fa      	ldrb	r2, [r7, #3]
 800cb40:	4611      	mov	r1, r2
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7f5 fa17 	bl	8001f76 <HAL_HCD_HC_GetXferCount>
 800cb48:	4603      	mov	r3, r0
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cb52:	b590      	push	{r4, r7, lr}
 800cb54:	b089      	sub	sp, #36	@ 0x24
 800cb56:	af04      	add	r7, sp, #16
 800cb58:	6078      	str	r0, [r7, #4]
 800cb5a:	4608      	mov	r0, r1
 800cb5c:	4611      	mov	r1, r2
 800cb5e:	461a      	mov	r2, r3
 800cb60:	4603      	mov	r3, r0
 800cb62:	70fb      	strb	r3, [r7, #3]
 800cb64:	460b      	mov	r3, r1
 800cb66:	70bb      	strb	r3, [r7, #2]
 800cb68:	4613      	mov	r3, r2
 800cb6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800cb7a:	787c      	ldrb	r4, [r7, #1]
 800cb7c:	78ba      	ldrb	r2, [r7, #2]
 800cb7e:	78f9      	ldrb	r1, [r7, #3]
 800cb80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb82:	9302      	str	r3, [sp, #8]
 800cb84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cb88:	9301      	str	r3, [sp, #4]
 800cb8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	4623      	mov	r3, r4
 800cb92:	f7f4 fe03 	bl	800179c <HAL_HCD_HC_Init>
 800cb96:	4603      	mov	r3, r0
 800cb98:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb9a:	7bfb      	ldrb	r3, [r7, #15]
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f000 f8bf 	bl	800cd20 <USBH_Get_USB_Status>
 800cba2:	4603      	mov	r3, r0
 800cba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cba6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3714      	adds	r7, #20
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd90      	pop	{r4, r7, pc}

0800cbb0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	460b      	mov	r3, r1
 800cbba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cbca:	78fa      	ldrb	r2, [r7, #3]
 800cbcc:	4611      	mov	r1, r2
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7f4 fe9c 	bl	800190c <HAL_HCD_HC_Halt>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f000 f8a0 	bl	800cd20 <USBH_Get_USB_Status>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cbee:	b590      	push	{r4, r7, lr}
 800cbf0:	b089      	sub	sp, #36	@ 0x24
 800cbf2:	af04      	add	r7, sp, #16
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	4608      	mov	r0, r1
 800cbf8:	4611      	mov	r1, r2
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	70fb      	strb	r3, [r7, #3]
 800cc00:	460b      	mov	r3, r1
 800cc02:	70bb      	strb	r3, [r7, #2]
 800cc04:	4613      	mov	r3, r2
 800cc06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800cc16:	787c      	ldrb	r4, [r7, #1]
 800cc18:	78ba      	ldrb	r2, [r7, #2]
 800cc1a:	78f9      	ldrb	r1, [r7, #3]
 800cc1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cc20:	9303      	str	r3, [sp, #12]
 800cc22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cc24:	9302      	str	r3, [sp, #8]
 800cc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc28:	9301      	str	r3, [sp, #4]
 800cc2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	4623      	mov	r3, r4
 800cc32:	f7f4 fe8f 	bl	8001954 <HAL_HCD_HC_SubmitRequest>
 800cc36:	4603      	mov	r3, r0
 800cc38:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cc3a:	7bfb      	ldrb	r3, [r7, #15]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f000 f86f 	bl	800cd20 <USBH_Get_USB_Status>
 800cc42:	4603      	mov	r3, r0
 800cc44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc46:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3714      	adds	r7, #20
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd90      	pop	{r4, r7, pc}

0800cc50 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	460b      	mov	r3, r1
 800cc5a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cc62:	78fa      	ldrb	r2, [r7, #3]
 800cc64:	4611      	mov	r1, r2
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7f5 f970 	bl	8001f4c <HAL_HCD_HC_GetURBState>
 800cc6c:	4603      	mov	r3, r0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3708      	adds	r7, #8
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b082      	sub	sp, #8
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	460b      	mov	r3, r1
 800cc80:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d103      	bne.n	800cc94 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800cc8c:	78fb      	ldrb	r3, [r7, #3]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 f872 	bl	800cd78 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cc94:	20c8      	movs	r0, #200	@ 0xc8
 800cc96:	f7f4 fa5f 	bl	8001158 <HAL_Delay>
  return USBH_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	460b      	mov	r3, r1
 800ccae:	70fb      	strb	r3, [r7, #3]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ccba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ccbc:	78fa      	ldrb	r2, [r7, #3]
 800ccbe:	68f9      	ldr	r1, [r7, #12]
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	011b      	lsls	r3, r3, #4
 800ccc4:	1a9b      	subs	r3, r3, r2
 800ccc6:	009b      	lsls	r3, r3, #2
 800ccc8:	440b      	add	r3, r1
 800ccca:	3317      	adds	r3, #23
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00a      	beq.n	800cce8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ccd2:	78fa      	ldrb	r2, [r7, #3]
 800ccd4:	68f9      	ldr	r1, [r7, #12]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	011b      	lsls	r3, r3, #4
 800ccda:	1a9b      	subs	r3, r3, r2
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	440b      	add	r3, r1
 800cce0:	333c      	adds	r3, #60	@ 0x3c
 800cce2:	78ba      	ldrb	r2, [r7, #2]
 800cce4:	701a      	strb	r2, [r3, #0]
 800cce6:	e009      	b.n	800ccfc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cce8:	78fa      	ldrb	r2, [r7, #3]
 800ccea:	68f9      	ldr	r1, [r7, #12]
 800ccec:	4613      	mov	r3, r2
 800ccee:	011b      	lsls	r3, r3, #4
 800ccf0:	1a9b      	subs	r3, r3, r2
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	440b      	add	r3, r1
 800ccf6:	333d      	adds	r3, #61	@ 0x3d
 800ccf8:	78ba      	ldrb	r2, [r7, #2]
 800ccfa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ccfc:	2300      	movs	r3, #0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3714      	adds	r7, #20
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr

0800cd0a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b082      	sub	sp, #8
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7f4 fa20 	bl	8001158 <HAL_Delay>
}
 800cd18:	bf00      	nop
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	4603      	mov	r3, r0
 800cd28:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cd2e:	79fb      	ldrb	r3, [r7, #7]
 800cd30:	2b03      	cmp	r3, #3
 800cd32:	d817      	bhi.n	800cd64 <USBH_Get_USB_Status+0x44>
 800cd34:	a201      	add	r2, pc, #4	@ (adr r2, 800cd3c <USBH_Get_USB_Status+0x1c>)
 800cd36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd3a:	bf00      	nop
 800cd3c:	0800cd4d 	.word	0x0800cd4d
 800cd40:	0800cd53 	.word	0x0800cd53
 800cd44:	0800cd59 	.word	0x0800cd59
 800cd48:	0800cd5f 	.word	0x0800cd5f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd50:	e00b      	b.n	800cd6a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cd52:	2302      	movs	r3, #2
 800cd54:	73fb      	strb	r3, [r7, #15]
    break;
 800cd56:	e008      	b.n	800cd6a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd5c:	e005      	b.n	800cd6a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cd5e:	2302      	movs	r3, #2
 800cd60:	73fb      	strb	r3, [r7, #15]
    break;
 800cd62:	e002      	b.n	800cd6a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cd64:	2302      	movs	r3, #2
 800cd66:	73fb      	strb	r3, [r7, #15]
    break;
 800cd68:	bf00      	nop
  }
  return usb_status;
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3714      	adds	r7, #20
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	4603      	mov	r3, r0
 800cd80:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cd82:	79fb      	ldrb	r3, [r7, #7]
 800cd84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cd86:	79fb      	ldrb	r3, [r7, #7]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d102      	bne.n	800cd92 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	73fb      	strb	r3, [r7, #15]
 800cd90:	e001      	b.n	800cd96 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800cd92:	2301      	movs	r3, #1
 800cd94:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cd96:	7bfb      	ldrb	r3, [r7, #15]
 800cd98:	461a      	mov	r2, r3
 800cd9a:	2101      	movs	r1, #1
 800cd9c:	4803      	ldr	r0, [pc, #12]	@ (800cdac <MX_DriverVbusFS+0x34>)
 800cd9e:	f7f4 fc7d 	bl	800169c <HAL_GPIO_WritePin>
}
 800cda2:	bf00      	nop
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	40020800 	.word	0x40020800

0800cdb0 <malloc>:
 800cdb0:	4b02      	ldr	r3, [pc, #8]	@ (800cdbc <malloc+0xc>)
 800cdb2:	4601      	mov	r1, r0
 800cdb4:	6818      	ldr	r0, [r3, #0]
 800cdb6:	f000 b82d 	b.w	800ce14 <_malloc_r>
 800cdba:	bf00      	nop
 800cdbc:	20000030 	.word	0x20000030

0800cdc0 <free>:
 800cdc0:	4b02      	ldr	r3, [pc, #8]	@ (800cdcc <free+0xc>)
 800cdc2:	4601      	mov	r1, r0
 800cdc4:	6818      	ldr	r0, [r3, #0]
 800cdc6:	f000 b979 	b.w	800d0bc <_free_r>
 800cdca:	bf00      	nop
 800cdcc:	20000030 	.word	0x20000030

0800cdd0 <sbrk_aligned>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	4e0f      	ldr	r6, [pc, #60]	@ (800ce10 <sbrk_aligned+0x40>)
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	6831      	ldr	r1, [r6, #0]
 800cdd8:	4605      	mov	r5, r0
 800cdda:	b911      	cbnz	r1, 800cde2 <sbrk_aligned+0x12>
 800cddc:	f000 f924 	bl	800d028 <_sbrk_r>
 800cde0:	6030      	str	r0, [r6, #0]
 800cde2:	4621      	mov	r1, r4
 800cde4:	4628      	mov	r0, r5
 800cde6:	f000 f91f 	bl	800d028 <_sbrk_r>
 800cdea:	1c43      	adds	r3, r0, #1
 800cdec:	d103      	bne.n	800cdf6 <sbrk_aligned+0x26>
 800cdee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	bd70      	pop	{r4, r5, r6, pc}
 800cdf6:	1cc4      	adds	r4, r0, #3
 800cdf8:	f024 0403 	bic.w	r4, r4, #3
 800cdfc:	42a0      	cmp	r0, r4
 800cdfe:	d0f8      	beq.n	800cdf2 <sbrk_aligned+0x22>
 800ce00:	1a21      	subs	r1, r4, r0
 800ce02:	4628      	mov	r0, r5
 800ce04:	f000 f910 	bl	800d028 <_sbrk_r>
 800ce08:	3001      	adds	r0, #1
 800ce0a:	d1f2      	bne.n	800cdf2 <sbrk_aligned+0x22>
 800ce0c:	e7ef      	b.n	800cdee <sbrk_aligned+0x1e>
 800ce0e:	bf00      	nop
 800ce10:	2000540c 	.word	0x2000540c

0800ce14 <_malloc_r>:
 800ce14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce18:	1ccd      	adds	r5, r1, #3
 800ce1a:	f025 0503 	bic.w	r5, r5, #3
 800ce1e:	3508      	adds	r5, #8
 800ce20:	2d0c      	cmp	r5, #12
 800ce22:	bf38      	it	cc
 800ce24:	250c      	movcc	r5, #12
 800ce26:	2d00      	cmp	r5, #0
 800ce28:	4606      	mov	r6, r0
 800ce2a:	db01      	blt.n	800ce30 <_malloc_r+0x1c>
 800ce2c:	42a9      	cmp	r1, r5
 800ce2e:	d904      	bls.n	800ce3a <_malloc_r+0x26>
 800ce30:	230c      	movs	r3, #12
 800ce32:	6033      	str	r3, [r6, #0]
 800ce34:	2000      	movs	r0, #0
 800ce36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf10 <_malloc_r+0xfc>
 800ce3e:	f000 f869 	bl	800cf14 <__malloc_lock>
 800ce42:	f8d8 3000 	ldr.w	r3, [r8]
 800ce46:	461c      	mov	r4, r3
 800ce48:	bb44      	cbnz	r4, 800ce9c <_malloc_r+0x88>
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	f7ff ffbf 	bl	800cdd0 <sbrk_aligned>
 800ce52:	1c43      	adds	r3, r0, #1
 800ce54:	4604      	mov	r4, r0
 800ce56:	d158      	bne.n	800cf0a <_malloc_r+0xf6>
 800ce58:	f8d8 4000 	ldr.w	r4, [r8]
 800ce5c:	4627      	mov	r7, r4
 800ce5e:	2f00      	cmp	r7, #0
 800ce60:	d143      	bne.n	800ceea <_malloc_r+0xd6>
 800ce62:	2c00      	cmp	r4, #0
 800ce64:	d04b      	beq.n	800cefe <_malloc_r+0xea>
 800ce66:	6823      	ldr	r3, [r4, #0]
 800ce68:	4639      	mov	r1, r7
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	eb04 0903 	add.w	r9, r4, r3
 800ce70:	f000 f8da 	bl	800d028 <_sbrk_r>
 800ce74:	4581      	cmp	r9, r0
 800ce76:	d142      	bne.n	800cefe <_malloc_r+0xea>
 800ce78:	6821      	ldr	r1, [r4, #0]
 800ce7a:	1a6d      	subs	r5, r5, r1
 800ce7c:	4629      	mov	r1, r5
 800ce7e:	4630      	mov	r0, r6
 800ce80:	f7ff ffa6 	bl	800cdd0 <sbrk_aligned>
 800ce84:	3001      	adds	r0, #1
 800ce86:	d03a      	beq.n	800cefe <_malloc_r+0xea>
 800ce88:	6823      	ldr	r3, [r4, #0]
 800ce8a:	442b      	add	r3, r5
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce92:	685a      	ldr	r2, [r3, #4]
 800ce94:	bb62      	cbnz	r2, 800cef0 <_malloc_r+0xdc>
 800ce96:	f8c8 7000 	str.w	r7, [r8]
 800ce9a:	e00f      	b.n	800cebc <_malloc_r+0xa8>
 800ce9c:	6822      	ldr	r2, [r4, #0]
 800ce9e:	1b52      	subs	r2, r2, r5
 800cea0:	d420      	bmi.n	800cee4 <_malloc_r+0xd0>
 800cea2:	2a0b      	cmp	r2, #11
 800cea4:	d917      	bls.n	800ced6 <_malloc_r+0xc2>
 800cea6:	1961      	adds	r1, r4, r5
 800cea8:	42a3      	cmp	r3, r4
 800ceaa:	6025      	str	r5, [r4, #0]
 800ceac:	bf18      	it	ne
 800ceae:	6059      	strne	r1, [r3, #4]
 800ceb0:	6863      	ldr	r3, [r4, #4]
 800ceb2:	bf08      	it	eq
 800ceb4:	f8c8 1000 	streq.w	r1, [r8]
 800ceb8:	5162      	str	r2, [r4, r5]
 800ceba:	604b      	str	r3, [r1, #4]
 800cebc:	4630      	mov	r0, r6
 800cebe:	f000 f82f 	bl	800cf20 <__malloc_unlock>
 800cec2:	f104 000b 	add.w	r0, r4, #11
 800cec6:	1d23      	adds	r3, r4, #4
 800cec8:	f020 0007 	bic.w	r0, r0, #7
 800cecc:	1ac2      	subs	r2, r0, r3
 800cece:	bf1c      	itt	ne
 800ced0:	1a1b      	subne	r3, r3, r0
 800ced2:	50a3      	strne	r3, [r4, r2]
 800ced4:	e7af      	b.n	800ce36 <_malloc_r+0x22>
 800ced6:	6862      	ldr	r2, [r4, #4]
 800ced8:	42a3      	cmp	r3, r4
 800ceda:	bf0c      	ite	eq
 800cedc:	f8c8 2000 	streq.w	r2, [r8]
 800cee0:	605a      	strne	r2, [r3, #4]
 800cee2:	e7eb      	b.n	800cebc <_malloc_r+0xa8>
 800cee4:	4623      	mov	r3, r4
 800cee6:	6864      	ldr	r4, [r4, #4]
 800cee8:	e7ae      	b.n	800ce48 <_malloc_r+0x34>
 800ceea:	463c      	mov	r4, r7
 800ceec:	687f      	ldr	r7, [r7, #4]
 800ceee:	e7b6      	b.n	800ce5e <_malloc_r+0x4a>
 800cef0:	461a      	mov	r2, r3
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	42a3      	cmp	r3, r4
 800cef6:	d1fb      	bne.n	800cef0 <_malloc_r+0xdc>
 800cef8:	2300      	movs	r3, #0
 800cefa:	6053      	str	r3, [r2, #4]
 800cefc:	e7de      	b.n	800cebc <_malloc_r+0xa8>
 800cefe:	230c      	movs	r3, #12
 800cf00:	6033      	str	r3, [r6, #0]
 800cf02:	4630      	mov	r0, r6
 800cf04:	f000 f80c 	bl	800cf20 <__malloc_unlock>
 800cf08:	e794      	b.n	800ce34 <_malloc_r+0x20>
 800cf0a:	6005      	str	r5, [r0, #0]
 800cf0c:	e7d6      	b.n	800cebc <_malloc_r+0xa8>
 800cf0e:	bf00      	nop
 800cf10:	20005410 	.word	0x20005410

0800cf14 <__malloc_lock>:
 800cf14:	4801      	ldr	r0, [pc, #4]	@ (800cf1c <__malloc_lock+0x8>)
 800cf16:	f000 b8c1 	b.w	800d09c <__retarget_lock_acquire_recursive>
 800cf1a:	bf00      	nop
 800cf1c:	20005550 	.word	0x20005550

0800cf20 <__malloc_unlock>:
 800cf20:	4801      	ldr	r0, [pc, #4]	@ (800cf28 <__malloc_unlock+0x8>)
 800cf22:	f000 b8bc 	b.w	800d09e <__retarget_lock_release_recursive>
 800cf26:	bf00      	nop
 800cf28:	20005550 	.word	0x20005550

0800cf2c <siprintf>:
 800cf2c:	b40e      	push	{r1, r2, r3}
 800cf2e:	b500      	push	{lr}
 800cf30:	b09c      	sub	sp, #112	@ 0x70
 800cf32:	ab1d      	add	r3, sp, #116	@ 0x74
 800cf34:	9002      	str	r0, [sp, #8]
 800cf36:	9006      	str	r0, [sp, #24]
 800cf38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cf3c:	4809      	ldr	r0, [pc, #36]	@ (800cf64 <siprintf+0x38>)
 800cf3e:	9107      	str	r1, [sp, #28]
 800cf40:	9104      	str	r1, [sp, #16]
 800cf42:	4909      	ldr	r1, [pc, #36]	@ (800cf68 <siprintf+0x3c>)
 800cf44:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf48:	9105      	str	r1, [sp, #20]
 800cf4a:	6800      	ldr	r0, [r0, #0]
 800cf4c:	9301      	str	r3, [sp, #4]
 800cf4e:	a902      	add	r1, sp, #8
 800cf50:	f000 f95a 	bl	800d208 <_svfiprintf_r>
 800cf54:	9b02      	ldr	r3, [sp, #8]
 800cf56:	2200      	movs	r2, #0
 800cf58:	701a      	strb	r2, [r3, #0]
 800cf5a:	b01c      	add	sp, #112	@ 0x70
 800cf5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf60:	b003      	add	sp, #12
 800cf62:	4770      	bx	lr
 800cf64:	20000030 	.word	0x20000030
 800cf68:	ffff0208 	.word	0xffff0208

0800cf6c <memset>:
 800cf6c:	4402      	add	r2, r0
 800cf6e:	4603      	mov	r3, r0
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d100      	bne.n	800cf76 <memset+0xa>
 800cf74:	4770      	bx	lr
 800cf76:	f803 1b01 	strb.w	r1, [r3], #1
 800cf7a:	e7f9      	b.n	800cf70 <memset+0x4>

0800cf7c <_reclaim_reent>:
 800cf7c:	4b29      	ldr	r3, [pc, #164]	@ (800d024 <_reclaim_reent+0xa8>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4283      	cmp	r3, r0
 800cf82:	b570      	push	{r4, r5, r6, lr}
 800cf84:	4604      	mov	r4, r0
 800cf86:	d04b      	beq.n	800d020 <_reclaim_reent+0xa4>
 800cf88:	69c3      	ldr	r3, [r0, #28]
 800cf8a:	b1ab      	cbz	r3, 800cfb8 <_reclaim_reent+0x3c>
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	b16b      	cbz	r3, 800cfac <_reclaim_reent+0x30>
 800cf90:	2500      	movs	r5, #0
 800cf92:	69e3      	ldr	r3, [r4, #28]
 800cf94:	68db      	ldr	r3, [r3, #12]
 800cf96:	5959      	ldr	r1, [r3, r5]
 800cf98:	2900      	cmp	r1, #0
 800cf9a:	d13b      	bne.n	800d014 <_reclaim_reent+0x98>
 800cf9c:	3504      	adds	r5, #4
 800cf9e:	2d80      	cmp	r5, #128	@ 0x80
 800cfa0:	d1f7      	bne.n	800cf92 <_reclaim_reent+0x16>
 800cfa2:	69e3      	ldr	r3, [r4, #28]
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	68d9      	ldr	r1, [r3, #12]
 800cfa8:	f000 f888 	bl	800d0bc <_free_r>
 800cfac:	69e3      	ldr	r3, [r4, #28]
 800cfae:	6819      	ldr	r1, [r3, #0]
 800cfb0:	b111      	cbz	r1, 800cfb8 <_reclaim_reent+0x3c>
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	f000 f882 	bl	800d0bc <_free_r>
 800cfb8:	6961      	ldr	r1, [r4, #20]
 800cfba:	b111      	cbz	r1, 800cfc2 <_reclaim_reent+0x46>
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	f000 f87d 	bl	800d0bc <_free_r>
 800cfc2:	69e1      	ldr	r1, [r4, #28]
 800cfc4:	b111      	cbz	r1, 800cfcc <_reclaim_reent+0x50>
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f000 f878 	bl	800d0bc <_free_r>
 800cfcc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cfce:	b111      	cbz	r1, 800cfd6 <_reclaim_reent+0x5a>
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f000 f873 	bl	800d0bc <_free_r>
 800cfd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfd8:	b111      	cbz	r1, 800cfe0 <_reclaim_reent+0x64>
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f000 f86e 	bl	800d0bc <_free_r>
 800cfe0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cfe2:	b111      	cbz	r1, 800cfea <_reclaim_reent+0x6e>
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f000 f869 	bl	800d0bc <_free_r>
 800cfea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cfec:	b111      	cbz	r1, 800cff4 <_reclaim_reent+0x78>
 800cfee:	4620      	mov	r0, r4
 800cff0:	f000 f864 	bl	800d0bc <_free_r>
 800cff4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cff6:	b111      	cbz	r1, 800cffe <_reclaim_reent+0x82>
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 f85f 	bl	800d0bc <_free_r>
 800cffe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d000:	b111      	cbz	r1, 800d008 <_reclaim_reent+0x8c>
 800d002:	4620      	mov	r0, r4
 800d004:	f000 f85a 	bl	800d0bc <_free_r>
 800d008:	6a23      	ldr	r3, [r4, #32]
 800d00a:	b14b      	cbz	r3, 800d020 <_reclaim_reent+0xa4>
 800d00c:	4620      	mov	r0, r4
 800d00e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d012:	4718      	bx	r3
 800d014:	680e      	ldr	r6, [r1, #0]
 800d016:	4620      	mov	r0, r4
 800d018:	f000 f850 	bl	800d0bc <_free_r>
 800d01c:	4631      	mov	r1, r6
 800d01e:	e7bb      	b.n	800cf98 <_reclaim_reent+0x1c>
 800d020:	bd70      	pop	{r4, r5, r6, pc}
 800d022:	bf00      	nop
 800d024:	20000030 	.word	0x20000030

0800d028 <_sbrk_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4d06      	ldr	r5, [pc, #24]	@ (800d044 <_sbrk_r+0x1c>)
 800d02c:	2300      	movs	r3, #0
 800d02e:	4604      	mov	r4, r0
 800d030:	4608      	mov	r0, r1
 800d032:	602b      	str	r3, [r5, #0]
 800d034:	f7f3 ffdc 	bl	8000ff0 <_sbrk>
 800d038:	1c43      	adds	r3, r0, #1
 800d03a:	d102      	bne.n	800d042 <_sbrk_r+0x1a>
 800d03c:	682b      	ldr	r3, [r5, #0]
 800d03e:	b103      	cbz	r3, 800d042 <_sbrk_r+0x1a>
 800d040:	6023      	str	r3, [r4, #0]
 800d042:	bd38      	pop	{r3, r4, r5, pc}
 800d044:	2000554c 	.word	0x2000554c

0800d048 <__errno>:
 800d048:	4b01      	ldr	r3, [pc, #4]	@ (800d050 <__errno+0x8>)
 800d04a:	6818      	ldr	r0, [r3, #0]
 800d04c:	4770      	bx	lr
 800d04e:	bf00      	nop
 800d050:	20000030 	.word	0x20000030

0800d054 <__libc_init_array>:
 800d054:	b570      	push	{r4, r5, r6, lr}
 800d056:	4d0d      	ldr	r5, [pc, #52]	@ (800d08c <__libc_init_array+0x38>)
 800d058:	4c0d      	ldr	r4, [pc, #52]	@ (800d090 <__libc_init_array+0x3c>)
 800d05a:	1b64      	subs	r4, r4, r5
 800d05c:	10a4      	asrs	r4, r4, #2
 800d05e:	2600      	movs	r6, #0
 800d060:	42a6      	cmp	r6, r4
 800d062:	d109      	bne.n	800d078 <__libc_init_array+0x24>
 800d064:	4d0b      	ldr	r5, [pc, #44]	@ (800d094 <__libc_init_array+0x40>)
 800d066:	4c0c      	ldr	r4, [pc, #48]	@ (800d098 <__libc_init_array+0x44>)
 800d068:	f000 fba8 	bl	800d7bc <_init>
 800d06c:	1b64      	subs	r4, r4, r5
 800d06e:	10a4      	asrs	r4, r4, #2
 800d070:	2600      	movs	r6, #0
 800d072:	42a6      	cmp	r6, r4
 800d074:	d105      	bne.n	800d082 <__libc_init_array+0x2e>
 800d076:	bd70      	pop	{r4, r5, r6, pc}
 800d078:	f855 3b04 	ldr.w	r3, [r5], #4
 800d07c:	4798      	blx	r3
 800d07e:	3601      	adds	r6, #1
 800d080:	e7ee      	b.n	800d060 <__libc_init_array+0xc>
 800d082:	f855 3b04 	ldr.w	r3, [r5], #4
 800d086:	4798      	blx	r3
 800d088:	3601      	adds	r6, #1
 800d08a:	e7f2      	b.n	800d072 <__libc_init_array+0x1e>
 800d08c:	0800d8d4 	.word	0x0800d8d4
 800d090:	0800d8d4 	.word	0x0800d8d4
 800d094:	0800d8d4 	.word	0x0800d8d4
 800d098:	0800d8d8 	.word	0x0800d8d8

0800d09c <__retarget_lock_acquire_recursive>:
 800d09c:	4770      	bx	lr

0800d09e <__retarget_lock_release_recursive>:
 800d09e:	4770      	bx	lr

0800d0a0 <memcpy>:
 800d0a0:	440a      	add	r2, r1
 800d0a2:	4291      	cmp	r1, r2
 800d0a4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d0a8:	d100      	bne.n	800d0ac <memcpy+0xc>
 800d0aa:	4770      	bx	lr
 800d0ac:	b510      	push	{r4, lr}
 800d0ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0b6:	4291      	cmp	r1, r2
 800d0b8:	d1f9      	bne.n	800d0ae <memcpy+0xe>
 800d0ba:	bd10      	pop	{r4, pc}

0800d0bc <_free_r>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	4605      	mov	r5, r0
 800d0c0:	2900      	cmp	r1, #0
 800d0c2:	d041      	beq.n	800d148 <_free_r+0x8c>
 800d0c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0c8:	1f0c      	subs	r4, r1, #4
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	bfb8      	it	lt
 800d0ce:	18e4      	addlt	r4, r4, r3
 800d0d0:	f7ff ff20 	bl	800cf14 <__malloc_lock>
 800d0d4:	4a1d      	ldr	r2, [pc, #116]	@ (800d14c <_free_r+0x90>)
 800d0d6:	6813      	ldr	r3, [r2, #0]
 800d0d8:	b933      	cbnz	r3, 800d0e8 <_free_r+0x2c>
 800d0da:	6063      	str	r3, [r4, #4]
 800d0dc:	6014      	str	r4, [r2, #0]
 800d0de:	4628      	mov	r0, r5
 800d0e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0e4:	f7ff bf1c 	b.w	800cf20 <__malloc_unlock>
 800d0e8:	42a3      	cmp	r3, r4
 800d0ea:	d908      	bls.n	800d0fe <_free_r+0x42>
 800d0ec:	6820      	ldr	r0, [r4, #0]
 800d0ee:	1821      	adds	r1, r4, r0
 800d0f0:	428b      	cmp	r3, r1
 800d0f2:	bf01      	itttt	eq
 800d0f4:	6819      	ldreq	r1, [r3, #0]
 800d0f6:	685b      	ldreq	r3, [r3, #4]
 800d0f8:	1809      	addeq	r1, r1, r0
 800d0fa:	6021      	streq	r1, [r4, #0]
 800d0fc:	e7ed      	b.n	800d0da <_free_r+0x1e>
 800d0fe:	461a      	mov	r2, r3
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	b10b      	cbz	r3, 800d108 <_free_r+0x4c>
 800d104:	42a3      	cmp	r3, r4
 800d106:	d9fa      	bls.n	800d0fe <_free_r+0x42>
 800d108:	6811      	ldr	r1, [r2, #0]
 800d10a:	1850      	adds	r0, r2, r1
 800d10c:	42a0      	cmp	r0, r4
 800d10e:	d10b      	bne.n	800d128 <_free_r+0x6c>
 800d110:	6820      	ldr	r0, [r4, #0]
 800d112:	4401      	add	r1, r0
 800d114:	1850      	adds	r0, r2, r1
 800d116:	4283      	cmp	r3, r0
 800d118:	6011      	str	r1, [r2, #0]
 800d11a:	d1e0      	bne.n	800d0de <_free_r+0x22>
 800d11c:	6818      	ldr	r0, [r3, #0]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	6053      	str	r3, [r2, #4]
 800d122:	4408      	add	r0, r1
 800d124:	6010      	str	r0, [r2, #0]
 800d126:	e7da      	b.n	800d0de <_free_r+0x22>
 800d128:	d902      	bls.n	800d130 <_free_r+0x74>
 800d12a:	230c      	movs	r3, #12
 800d12c:	602b      	str	r3, [r5, #0]
 800d12e:	e7d6      	b.n	800d0de <_free_r+0x22>
 800d130:	6820      	ldr	r0, [r4, #0]
 800d132:	1821      	adds	r1, r4, r0
 800d134:	428b      	cmp	r3, r1
 800d136:	bf04      	itt	eq
 800d138:	6819      	ldreq	r1, [r3, #0]
 800d13a:	685b      	ldreq	r3, [r3, #4]
 800d13c:	6063      	str	r3, [r4, #4]
 800d13e:	bf04      	itt	eq
 800d140:	1809      	addeq	r1, r1, r0
 800d142:	6021      	streq	r1, [r4, #0]
 800d144:	6054      	str	r4, [r2, #4]
 800d146:	e7ca      	b.n	800d0de <_free_r+0x22>
 800d148:	bd38      	pop	{r3, r4, r5, pc}
 800d14a:	bf00      	nop
 800d14c:	20005410 	.word	0x20005410

0800d150 <__ssputs_r>:
 800d150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d154:	688e      	ldr	r6, [r1, #8]
 800d156:	461f      	mov	r7, r3
 800d158:	42be      	cmp	r6, r7
 800d15a:	680b      	ldr	r3, [r1, #0]
 800d15c:	4682      	mov	sl, r0
 800d15e:	460c      	mov	r4, r1
 800d160:	4690      	mov	r8, r2
 800d162:	d82d      	bhi.n	800d1c0 <__ssputs_r+0x70>
 800d164:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d168:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d16c:	d026      	beq.n	800d1bc <__ssputs_r+0x6c>
 800d16e:	6965      	ldr	r5, [r4, #20]
 800d170:	6909      	ldr	r1, [r1, #16]
 800d172:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d176:	eba3 0901 	sub.w	r9, r3, r1
 800d17a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d17e:	1c7b      	adds	r3, r7, #1
 800d180:	444b      	add	r3, r9
 800d182:	106d      	asrs	r5, r5, #1
 800d184:	429d      	cmp	r5, r3
 800d186:	bf38      	it	cc
 800d188:	461d      	movcc	r5, r3
 800d18a:	0553      	lsls	r3, r2, #21
 800d18c:	d527      	bpl.n	800d1de <__ssputs_r+0x8e>
 800d18e:	4629      	mov	r1, r5
 800d190:	f7ff fe40 	bl	800ce14 <_malloc_r>
 800d194:	4606      	mov	r6, r0
 800d196:	b360      	cbz	r0, 800d1f2 <__ssputs_r+0xa2>
 800d198:	6921      	ldr	r1, [r4, #16]
 800d19a:	464a      	mov	r2, r9
 800d19c:	f7ff ff80 	bl	800d0a0 <memcpy>
 800d1a0:	89a3      	ldrh	r3, [r4, #12]
 800d1a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d1a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1aa:	81a3      	strh	r3, [r4, #12]
 800d1ac:	6126      	str	r6, [r4, #16]
 800d1ae:	6165      	str	r5, [r4, #20]
 800d1b0:	444e      	add	r6, r9
 800d1b2:	eba5 0509 	sub.w	r5, r5, r9
 800d1b6:	6026      	str	r6, [r4, #0]
 800d1b8:	60a5      	str	r5, [r4, #8]
 800d1ba:	463e      	mov	r6, r7
 800d1bc:	42be      	cmp	r6, r7
 800d1be:	d900      	bls.n	800d1c2 <__ssputs_r+0x72>
 800d1c0:	463e      	mov	r6, r7
 800d1c2:	6820      	ldr	r0, [r4, #0]
 800d1c4:	4632      	mov	r2, r6
 800d1c6:	4641      	mov	r1, r8
 800d1c8:	f000 faa8 	bl	800d71c <memmove>
 800d1cc:	68a3      	ldr	r3, [r4, #8]
 800d1ce:	1b9b      	subs	r3, r3, r6
 800d1d0:	60a3      	str	r3, [r4, #8]
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	4433      	add	r3, r6
 800d1d6:	6023      	str	r3, [r4, #0]
 800d1d8:	2000      	movs	r0, #0
 800d1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1de:	462a      	mov	r2, r5
 800d1e0:	f000 fab6 	bl	800d750 <_realloc_r>
 800d1e4:	4606      	mov	r6, r0
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	d1e0      	bne.n	800d1ac <__ssputs_r+0x5c>
 800d1ea:	6921      	ldr	r1, [r4, #16]
 800d1ec:	4650      	mov	r0, sl
 800d1ee:	f7ff ff65 	bl	800d0bc <_free_r>
 800d1f2:	230c      	movs	r3, #12
 800d1f4:	f8ca 3000 	str.w	r3, [sl]
 800d1f8:	89a3      	ldrh	r3, [r4, #12]
 800d1fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1fe:	81a3      	strh	r3, [r4, #12]
 800d200:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d204:	e7e9      	b.n	800d1da <__ssputs_r+0x8a>
	...

0800d208 <_svfiprintf_r>:
 800d208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d20c:	4698      	mov	r8, r3
 800d20e:	898b      	ldrh	r3, [r1, #12]
 800d210:	061b      	lsls	r3, r3, #24
 800d212:	b09d      	sub	sp, #116	@ 0x74
 800d214:	4607      	mov	r7, r0
 800d216:	460d      	mov	r5, r1
 800d218:	4614      	mov	r4, r2
 800d21a:	d510      	bpl.n	800d23e <_svfiprintf_r+0x36>
 800d21c:	690b      	ldr	r3, [r1, #16]
 800d21e:	b973      	cbnz	r3, 800d23e <_svfiprintf_r+0x36>
 800d220:	2140      	movs	r1, #64	@ 0x40
 800d222:	f7ff fdf7 	bl	800ce14 <_malloc_r>
 800d226:	6028      	str	r0, [r5, #0]
 800d228:	6128      	str	r0, [r5, #16]
 800d22a:	b930      	cbnz	r0, 800d23a <_svfiprintf_r+0x32>
 800d22c:	230c      	movs	r3, #12
 800d22e:	603b      	str	r3, [r7, #0]
 800d230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d234:	b01d      	add	sp, #116	@ 0x74
 800d236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23a:	2340      	movs	r3, #64	@ 0x40
 800d23c:	616b      	str	r3, [r5, #20]
 800d23e:	2300      	movs	r3, #0
 800d240:	9309      	str	r3, [sp, #36]	@ 0x24
 800d242:	2320      	movs	r3, #32
 800d244:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d248:	f8cd 800c 	str.w	r8, [sp, #12]
 800d24c:	2330      	movs	r3, #48	@ 0x30
 800d24e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d3ec <_svfiprintf_r+0x1e4>
 800d252:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d256:	f04f 0901 	mov.w	r9, #1
 800d25a:	4623      	mov	r3, r4
 800d25c:	469a      	mov	sl, r3
 800d25e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d262:	b10a      	cbz	r2, 800d268 <_svfiprintf_r+0x60>
 800d264:	2a25      	cmp	r2, #37	@ 0x25
 800d266:	d1f9      	bne.n	800d25c <_svfiprintf_r+0x54>
 800d268:	ebba 0b04 	subs.w	fp, sl, r4
 800d26c:	d00b      	beq.n	800d286 <_svfiprintf_r+0x7e>
 800d26e:	465b      	mov	r3, fp
 800d270:	4622      	mov	r2, r4
 800d272:	4629      	mov	r1, r5
 800d274:	4638      	mov	r0, r7
 800d276:	f7ff ff6b 	bl	800d150 <__ssputs_r>
 800d27a:	3001      	adds	r0, #1
 800d27c:	f000 80a7 	beq.w	800d3ce <_svfiprintf_r+0x1c6>
 800d280:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d282:	445a      	add	r2, fp
 800d284:	9209      	str	r2, [sp, #36]	@ 0x24
 800d286:	f89a 3000 	ldrb.w	r3, [sl]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f000 809f 	beq.w	800d3ce <_svfiprintf_r+0x1c6>
 800d290:	2300      	movs	r3, #0
 800d292:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d296:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d29a:	f10a 0a01 	add.w	sl, sl, #1
 800d29e:	9304      	str	r3, [sp, #16]
 800d2a0:	9307      	str	r3, [sp, #28]
 800d2a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2a8:	4654      	mov	r4, sl
 800d2aa:	2205      	movs	r2, #5
 800d2ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2b0:	484e      	ldr	r0, [pc, #312]	@ (800d3ec <_svfiprintf_r+0x1e4>)
 800d2b2:	f7f2 ff95 	bl	80001e0 <memchr>
 800d2b6:	9a04      	ldr	r2, [sp, #16]
 800d2b8:	b9d8      	cbnz	r0, 800d2f2 <_svfiprintf_r+0xea>
 800d2ba:	06d0      	lsls	r0, r2, #27
 800d2bc:	bf44      	itt	mi
 800d2be:	2320      	movmi	r3, #32
 800d2c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2c4:	0711      	lsls	r1, r2, #28
 800d2c6:	bf44      	itt	mi
 800d2c8:	232b      	movmi	r3, #43	@ 0x2b
 800d2ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d2d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2d4:	d015      	beq.n	800d302 <_svfiprintf_r+0xfa>
 800d2d6:	9a07      	ldr	r2, [sp, #28]
 800d2d8:	4654      	mov	r4, sl
 800d2da:	2000      	movs	r0, #0
 800d2dc:	f04f 0c0a 	mov.w	ip, #10
 800d2e0:	4621      	mov	r1, r4
 800d2e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2e6:	3b30      	subs	r3, #48	@ 0x30
 800d2e8:	2b09      	cmp	r3, #9
 800d2ea:	d94b      	bls.n	800d384 <_svfiprintf_r+0x17c>
 800d2ec:	b1b0      	cbz	r0, 800d31c <_svfiprintf_r+0x114>
 800d2ee:	9207      	str	r2, [sp, #28]
 800d2f0:	e014      	b.n	800d31c <_svfiprintf_r+0x114>
 800d2f2:	eba0 0308 	sub.w	r3, r0, r8
 800d2f6:	fa09 f303 	lsl.w	r3, r9, r3
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	9304      	str	r3, [sp, #16]
 800d2fe:	46a2      	mov	sl, r4
 800d300:	e7d2      	b.n	800d2a8 <_svfiprintf_r+0xa0>
 800d302:	9b03      	ldr	r3, [sp, #12]
 800d304:	1d19      	adds	r1, r3, #4
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	9103      	str	r1, [sp, #12]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	bfbb      	ittet	lt
 800d30e:	425b      	neglt	r3, r3
 800d310:	f042 0202 	orrlt.w	r2, r2, #2
 800d314:	9307      	strge	r3, [sp, #28]
 800d316:	9307      	strlt	r3, [sp, #28]
 800d318:	bfb8      	it	lt
 800d31a:	9204      	strlt	r2, [sp, #16]
 800d31c:	7823      	ldrb	r3, [r4, #0]
 800d31e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d320:	d10a      	bne.n	800d338 <_svfiprintf_r+0x130>
 800d322:	7863      	ldrb	r3, [r4, #1]
 800d324:	2b2a      	cmp	r3, #42	@ 0x2a
 800d326:	d132      	bne.n	800d38e <_svfiprintf_r+0x186>
 800d328:	9b03      	ldr	r3, [sp, #12]
 800d32a:	1d1a      	adds	r2, r3, #4
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	9203      	str	r2, [sp, #12]
 800d330:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d334:	3402      	adds	r4, #2
 800d336:	9305      	str	r3, [sp, #20]
 800d338:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d3fc <_svfiprintf_r+0x1f4>
 800d33c:	7821      	ldrb	r1, [r4, #0]
 800d33e:	2203      	movs	r2, #3
 800d340:	4650      	mov	r0, sl
 800d342:	f7f2 ff4d 	bl	80001e0 <memchr>
 800d346:	b138      	cbz	r0, 800d358 <_svfiprintf_r+0x150>
 800d348:	9b04      	ldr	r3, [sp, #16]
 800d34a:	eba0 000a 	sub.w	r0, r0, sl
 800d34e:	2240      	movs	r2, #64	@ 0x40
 800d350:	4082      	lsls	r2, r0
 800d352:	4313      	orrs	r3, r2
 800d354:	3401      	adds	r4, #1
 800d356:	9304      	str	r3, [sp, #16]
 800d358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d35c:	4824      	ldr	r0, [pc, #144]	@ (800d3f0 <_svfiprintf_r+0x1e8>)
 800d35e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d362:	2206      	movs	r2, #6
 800d364:	f7f2 ff3c 	bl	80001e0 <memchr>
 800d368:	2800      	cmp	r0, #0
 800d36a:	d036      	beq.n	800d3da <_svfiprintf_r+0x1d2>
 800d36c:	4b21      	ldr	r3, [pc, #132]	@ (800d3f4 <_svfiprintf_r+0x1ec>)
 800d36e:	bb1b      	cbnz	r3, 800d3b8 <_svfiprintf_r+0x1b0>
 800d370:	9b03      	ldr	r3, [sp, #12]
 800d372:	3307      	adds	r3, #7
 800d374:	f023 0307 	bic.w	r3, r3, #7
 800d378:	3308      	adds	r3, #8
 800d37a:	9303      	str	r3, [sp, #12]
 800d37c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d37e:	4433      	add	r3, r6
 800d380:	9309      	str	r3, [sp, #36]	@ 0x24
 800d382:	e76a      	b.n	800d25a <_svfiprintf_r+0x52>
 800d384:	fb0c 3202 	mla	r2, ip, r2, r3
 800d388:	460c      	mov	r4, r1
 800d38a:	2001      	movs	r0, #1
 800d38c:	e7a8      	b.n	800d2e0 <_svfiprintf_r+0xd8>
 800d38e:	2300      	movs	r3, #0
 800d390:	3401      	adds	r4, #1
 800d392:	9305      	str	r3, [sp, #20]
 800d394:	4619      	mov	r1, r3
 800d396:	f04f 0c0a 	mov.w	ip, #10
 800d39a:	4620      	mov	r0, r4
 800d39c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3a0:	3a30      	subs	r2, #48	@ 0x30
 800d3a2:	2a09      	cmp	r2, #9
 800d3a4:	d903      	bls.n	800d3ae <_svfiprintf_r+0x1a6>
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d0c6      	beq.n	800d338 <_svfiprintf_r+0x130>
 800d3aa:	9105      	str	r1, [sp, #20]
 800d3ac:	e7c4      	b.n	800d338 <_svfiprintf_r+0x130>
 800d3ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e7f0      	b.n	800d39a <_svfiprintf_r+0x192>
 800d3b8:	ab03      	add	r3, sp, #12
 800d3ba:	9300      	str	r3, [sp, #0]
 800d3bc:	462a      	mov	r2, r5
 800d3be:	4b0e      	ldr	r3, [pc, #56]	@ (800d3f8 <_svfiprintf_r+0x1f0>)
 800d3c0:	a904      	add	r1, sp, #16
 800d3c2:	4638      	mov	r0, r7
 800d3c4:	f3af 8000 	nop.w
 800d3c8:	1c42      	adds	r2, r0, #1
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	d1d6      	bne.n	800d37c <_svfiprintf_r+0x174>
 800d3ce:	89ab      	ldrh	r3, [r5, #12]
 800d3d0:	065b      	lsls	r3, r3, #25
 800d3d2:	f53f af2d 	bmi.w	800d230 <_svfiprintf_r+0x28>
 800d3d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3d8:	e72c      	b.n	800d234 <_svfiprintf_r+0x2c>
 800d3da:	ab03      	add	r3, sp, #12
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	462a      	mov	r2, r5
 800d3e0:	4b05      	ldr	r3, [pc, #20]	@ (800d3f8 <_svfiprintf_r+0x1f0>)
 800d3e2:	a904      	add	r1, sp, #16
 800d3e4:	4638      	mov	r0, r7
 800d3e6:	f000 f879 	bl	800d4dc <_printf_i>
 800d3ea:	e7ed      	b.n	800d3c8 <_svfiprintf_r+0x1c0>
 800d3ec:	0800d898 	.word	0x0800d898
 800d3f0:	0800d8a2 	.word	0x0800d8a2
 800d3f4:	00000000 	.word	0x00000000
 800d3f8:	0800d151 	.word	0x0800d151
 800d3fc:	0800d89e 	.word	0x0800d89e

0800d400 <_printf_common>:
 800d400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d404:	4616      	mov	r6, r2
 800d406:	4698      	mov	r8, r3
 800d408:	688a      	ldr	r2, [r1, #8]
 800d40a:	690b      	ldr	r3, [r1, #16]
 800d40c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d410:	4293      	cmp	r3, r2
 800d412:	bfb8      	it	lt
 800d414:	4613      	movlt	r3, r2
 800d416:	6033      	str	r3, [r6, #0]
 800d418:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d41c:	4607      	mov	r7, r0
 800d41e:	460c      	mov	r4, r1
 800d420:	b10a      	cbz	r2, 800d426 <_printf_common+0x26>
 800d422:	3301      	adds	r3, #1
 800d424:	6033      	str	r3, [r6, #0]
 800d426:	6823      	ldr	r3, [r4, #0]
 800d428:	0699      	lsls	r1, r3, #26
 800d42a:	bf42      	ittt	mi
 800d42c:	6833      	ldrmi	r3, [r6, #0]
 800d42e:	3302      	addmi	r3, #2
 800d430:	6033      	strmi	r3, [r6, #0]
 800d432:	6825      	ldr	r5, [r4, #0]
 800d434:	f015 0506 	ands.w	r5, r5, #6
 800d438:	d106      	bne.n	800d448 <_printf_common+0x48>
 800d43a:	f104 0a19 	add.w	sl, r4, #25
 800d43e:	68e3      	ldr	r3, [r4, #12]
 800d440:	6832      	ldr	r2, [r6, #0]
 800d442:	1a9b      	subs	r3, r3, r2
 800d444:	42ab      	cmp	r3, r5
 800d446:	dc26      	bgt.n	800d496 <_printf_common+0x96>
 800d448:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d44c:	6822      	ldr	r2, [r4, #0]
 800d44e:	3b00      	subs	r3, #0
 800d450:	bf18      	it	ne
 800d452:	2301      	movne	r3, #1
 800d454:	0692      	lsls	r2, r2, #26
 800d456:	d42b      	bmi.n	800d4b0 <_printf_common+0xb0>
 800d458:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d45c:	4641      	mov	r1, r8
 800d45e:	4638      	mov	r0, r7
 800d460:	47c8      	blx	r9
 800d462:	3001      	adds	r0, #1
 800d464:	d01e      	beq.n	800d4a4 <_printf_common+0xa4>
 800d466:	6823      	ldr	r3, [r4, #0]
 800d468:	6922      	ldr	r2, [r4, #16]
 800d46a:	f003 0306 	and.w	r3, r3, #6
 800d46e:	2b04      	cmp	r3, #4
 800d470:	bf02      	ittt	eq
 800d472:	68e5      	ldreq	r5, [r4, #12]
 800d474:	6833      	ldreq	r3, [r6, #0]
 800d476:	1aed      	subeq	r5, r5, r3
 800d478:	68a3      	ldr	r3, [r4, #8]
 800d47a:	bf0c      	ite	eq
 800d47c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d480:	2500      	movne	r5, #0
 800d482:	4293      	cmp	r3, r2
 800d484:	bfc4      	itt	gt
 800d486:	1a9b      	subgt	r3, r3, r2
 800d488:	18ed      	addgt	r5, r5, r3
 800d48a:	2600      	movs	r6, #0
 800d48c:	341a      	adds	r4, #26
 800d48e:	42b5      	cmp	r5, r6
 800d490:	d11a      	bne.n	800d4c8 <_printf_common+0xc8>
 800d492:	2000      	movs	r0, #0
 800d494:	e008      	b.n	800d4a8 <_printf_common+0xa8>
 800d496:	2301      	movs	r3, #1
 800d498:	4652      	mov	r2, sl
 800d49a:	4641      	mov	r1, r8
 800d49c:	4638      	mov	r0, r7
 800d49e:	47c8      	blx	r9
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	d103      	bne.n	800d4ac <_printf_common+0xac>
 800d4a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ac:	3501      	adds	r5, #1
 800d4ae:	e7c6      	b.n	800d43e <_printf_common+0x3e>
 800d4b0:	18e1      	adds	r1, r4, r3
 800d4b2:	1c5a      	adds	r2, r3, #1
 800d4b4:	2030      	movs	r0, #48	@ 0x30
 800d4b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d4ba:	4422      	add	r2, r4
 800d4bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d4c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d4c4:	3302      	adds	r3, #2
 800d4c6:	e7c7      	b.n	800d458 <_printf_common+0x58>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	4622      	mov	r2, r4
 800d4cc:	4641      	mov	r1, r8
 800d4ce:	4638      	mov	r0, r7
 800d4d0:	47c8      	blx	r9
 800d4d2:	3001      	adds	r0, #1
 800d4d4:	d0e6      	beq.n	800d4a4 <_printf_common+0xa4>
 800d4d6:	3601      	adds	r6, #1
 800d4d8:	e7d9      	b.n	800d48e <_printf_common+0x8e>
	...

0800d4dc <_printf_i>:
 800d4dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4e0:	7e0f      	ldrb	r7, [r1, #24]
 800d4e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d4e4:	2f78      	cmp	r7, #120	@ 0x78
 800d4e6:	4691      	mov	r9, r2
 800d4e8:	4680      	mov	r8, r0
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	469a      	mov	sl, r3
 800d4ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d4f2:	d807      	bhi.n	800d504 <_printf_i+0x28>
 800d4f4:	2f62      	cmp	r7, #98	@ 0x62
 800d4f6:	d80a      	bhi.n	800d50e <_printf_i+0x32>
 800d4f8:	2f00      	cmp	r7, #0
 800d4fa:	f000 80d2 	beq.w	800d6a2 <_printf_i+0x1c6>
 800d4fe:	2f58      	cmp	r7, #88	@ 0x58
 800d500:	f000 80b9 	beq.w	800d676 <_printf_i+0x19a>
 800d504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d508:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d50c:	e03a      	b.n	800d584 <_printf_i+0xa8>
 800d50e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d512:	2b15      	cmp	r3, #21
 800d514:	d8f6      	bhi.n	800d504 <_printf_i+0x28>
 800d516:	a101      	add	r1, pc, #4	@ (adr r1, 800d51c <_printf_i+0x40>)
 800d518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d51c:	0800d575 	.word	0x0800d575
 800d520:	0800d589 	.word	0x0800d589
 800d524:	0800d505 	.word	0x0800d505
 800d528:	0800d505 	.word	0x0800d505
 800d52c:	0800d505 	.word	0x0800d505
 800d530:	0800d505 	.word	0x0800d505
 800d534:	0800d589 	.word	0x0800d589
 800d538:	0800d505 	.word	0x0800d505
 800d53c:	0800d505 	.word	0x0800d505
 800d540:	0800d505 	.word	0x0800d505
 800d544:	0800d505 	.word	0x0800d505
 800d548:	0800d689 	.word	0x0800d689
 800d54c:	0800d5b3 	.word	0x0800d5b3
 800d550:	0800d643 	.word	0x0800d643
 800d554:	0800d505 	.word	0x0800d505
 800d558:	0800d505 	.word	0x0800d505
 800d55c:	0800d6ab 	.word	0x0800d6ab
 800d560:	0800d505 	.word	0x0800d505
 800d564:	0800d5b3 	.word	0x0800d5b3
 800d568:	0800d505 	.word	0x0800d505
 800d56c:	0800d505 	.word	0x0800d505
 800d570:	0800d64b 	.word	0x0800d64b
 800d574:	6833      	ldr	r3, [r6, #0]
 800d576:	1d1a      	adds	r2, r3, #4
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6032      	str	r2, [r6, #0]
 800d57c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d580:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d584:	2301      	movs	r3, #1
 800d586:	e09d      	b.n	800d6c4 <_printf_i+0x1e8>
 800d588:	6833      	ldr	r3, [r6, #0]
 800d58a:	6820      	ldr	r0, [r4, #0]
 800d58c:	1d19      	adds	r1, r3, #4
 800d58e:	6031      	str	r1, [r6, #0]
 800d590:	0606      	lsls	r6, r0, #24
 800d592:	d501      	bpl.n	800d598 <_printf_i+0xbc>
 800d594:	681d      	ldr	r5, [r3, #0]
 800d596:	e003      	b.n	800d5a0 <_printf_i+0xc4>
 800d598:	0645      	lsls	r5, r0, #25
 800d59a:	d5fb      	bpl.n	800d594 <_printf_i+0xb8>
 800d59c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d5a0:	2d00      	cmp	r5, #0
 800d5a2:	da03      	bge.n	800d5ac <_printf_i+0xd0>
 800d5a4:	232d      	movs	r3, #45	@ 0x2d
 800d5a6:	426d      	negs	r5, r5
 800d5a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5ac:	4859      	ldr	r0, [pc, #356]	@ (800d714 <_printf_i+0x238>)
 800d5ae:	230a      	movs	r3, #10
 800d5b0:	e011      	b.n	800d5d6 <_printf_i+0xfa>
 800d5b2:	6821      	ldr	r1, [r4, #0]
 800d5b4:	6833      	ldr	r3, [r6, #0]
 800d5b6:	0608      	lsls	r0, r1, #24
 800d5b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d5bc:	d402      	bmi.n	800d5c4 <_printf_i+0xe8>
 800d5be:	0649      	lsls	r1, r1, #25
 800d5c0:	bf48      	it	mi
 800d5c2:	b2ad      	uxthmi	r5, r5
 800d5c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d5c6:	4853      	ldr	r0, [pc, #332]	@ (800d714 <_printf_i+0x238>)
 800d5c8:	6033      	str	r3, [r6, #0]
 800d5ca:	bf14      	ite	ne
 800d5cc:	230a      	movne	r3, #10
 800d5ce:	2308      	moveq	r3, #8
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d5d6:	6866      	ldr	r6, [r4, #4]
 800d5d8:	60a6      	str	r6, [r4, #8]
 800d5da:	2e00      	cmp	r6, #0
 800d5dc:	bfa2      	ittt	ge
 800d5de:	6821      	ldrge	r1, [r4, #0]
 800d5e0:	f021 0104 	bicge.w	r1, r1, #4
 800d5e4:	6021      	strge	r1, [r4, #0]
 800d5e6:	b90d      	cbnz	r5, 800d5ec <_printf_i+0x110>
 800d5e8:	2e00      	cmp	r6, #0
 800d5ea:	d04b      	beq.n	800d684 <_printf_i+0x1a8>
 800d5ec:	4616      	mov	r6, r2
 800d5ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800d5f2:	fb03 5711 	mls	r7, r3, r1, r5
 800d5f6:	5dc7      	ldrb	r7, [r0, r7]
 800d5f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d5fc:	462f      	mov	r7, r5
 800d5fe:	42bb      	cmp	r3, r7
 800d600:	460d      	mov	r5, r1
 800d602:	d9f4      	bls.n	800d5ee <_printf_i+0x112>
 800d604:	2b08      	cmp	r3, #8
 800d606:	d10b      	bne.n	800d620 <_printf_i+0x144>
 800d608:	6823      	ldr	r3, [r4, #0]
 800d60a:	07df      	lsls	r7, r3, #31
 800d60c:	d508      	bpl.n	800d620 <_printf_i+0x144>
 800d60e:	6923      	ldr	r3, [r4, #16]
 800d610:	6861      	ldr	r1, [r4, #4]
 800d612:	4299      	cmp	r1, r3
 800d614:	bfde      	ittt	le
 800d616:	2330      	movle	r3, #48	@ 0x30
 800d618:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d61c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d620:	1b92      	subs	r2, r2, r6
 800d622:	6122      	str	r2, [r4, #16]
 800d624:	f8cd a000 	str.w	sl, [sp]
 800d628:	464b      	mov	r3, r9
 800d62a:	aa03      	add	r2, sp, #12
 800d62c:	4621      	mov	r1, r4
 800d62e:	4640      	mov	r0, r8
 800d630:	f7ff fee6 	bl	800d400 <_printf_common>
 800d634:	3001      	adds	r0, #1
 800d636:	d14a      	bne.n	800d6ce <_printf_i+0x1f2>
 800d638:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d63c:	b004      	add	sp, #16
 800d63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	f043 0320 	orr.w	r3, r3, #32
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	4833      	ldr	r0, [pc, #204]	@ (800d718 <_printf_i+0x23c>)
 800d64c:	2778      	movs	r7, #120	@ 0x78
 800d64e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	6831      	ldr	r1, [r6, #0]
 800d656:	061f      	lsls	r7, r3, #24
 800d658:	f851 5b04 	ldr.w	r5, [r1], #4
 800d65c:	d402      	bmi.n	800d664 <_printf_i+0x188>
 800d65e:	065f      	lsls	r7, r3, #25
 800d660:	bf48      	it	mi
 800d662:	b2ad      	uxthmi	r5, r5
 800d664:	6031      	str	r1, [r6, #0]
 800d666:	07d9      	lsls	r1, r3, #31
 800d668:	bf44      	itt	mi
 800d66a:	f043 0320 	orrmi.w	r3, r3, #32
 800d66e:	6023      	strmi	r3, [r4, #0]
 800d670:	b11d      	cbz	r5, 800d67a <_printf_i+0x19e>
 800d672:	2310      	movs	r3, #16
 800d674:	e7ac      	b.n	800d5d0 <_printf_i+0xf4>
 800d676:	4827      	ldr	r0, [pc, #156]	@ (800d714 <_printf_i+0x238>)
 800d678:	e7e9      	b.n	800d64e <_printf_i+0x172>
 800d67a:	6823      	ldr	r3, [r4, #0]
 800d67c:	f023 0320 	bic.w	r3, r3, #32
 800d680:	6023      	str	r3, [r4, #0]
 800d682:	e7f6      	b.n	800d672 <_printf_i+0x196>
 800d684:	4616      	mov	r6, r2
 800d686:	e7bd      	b.n	800d604 <_printf_i+0x128>
 800d688:	6833      	ldr	r3, [r6, #0]
 800d68a:	6825      	ldr	r5, [r4, #0]
 800d68c:	6961      	ldr	r1, [r4, #20]
 800d68e:	1d18      	adds	r0, r3, #4
 800d690:	6030      	str	r0, [r6, #0]
 800d692:	062e      	lsls	r6, r5, #24
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	d501      	bpl.n	800d69c <_printf_i+0x1c0>
 800d698:	6019      	str	r1, [r3, #0]
 800d69a:	e002      	b.n	800d6a2 <_printf_i+0x1c6>
 800d69c:	0668      	lsls	r0, r5, #25
 800d69e:	d5fb      	bpl.n	800d698 <_printf_i+0x1bc>
 800d6a0:	8019      	strh	r1, [r3, #0]
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	6123      	str	r3, [r4, #16]
 800d6a6:	4616      	mov	r6, r2
 800d6a8:	e7bc      	b.n	800d624 <_printf_i+0x148>
 800d6aa:	6833      	ldr	r3, [r6, #0]
 800d6ac:	1d1a      	adds	r2, r3, #4
 800d6ae:	6032      	str	r2, [r6, #0]
 800d6b0:	681e      	ldr	r6, [r3, #0]
 800d6b2:	6862      	ldr	r2, [r4, #4]
 800d6b4:	2100      	movs	r1, #0
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	f7f2 fd92 	bl	80001e0 <memchr>
 800d6bc:	b108      	cbz	r0, 800d6c2 <_printf_i+0x1e6>
 800d6be:	1b80      	subs	r0, r0, r6
 800d6c0:	6060      	str	r0, [r4, #4]
 800d6c2:	6863      	ldr	r3, [r4, #4]
 800d6c4:	6123      	str	r3, [r4, #16]
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6cc:	e7aa      	b.n	800d624 <_printf_i+0x148>
 800d6ce:	6923      	ldr	r3, [r4, #16]
 800d6d0:	4632      	mov	r2, r6
 800d6d2:	4649      	mov	r1, r9
 800d6d4:	4640      	mov	r0, r8
 800d6d6:	47d0      	blx	sl
 800d6d8:	3001      	adds	r0, #1
 800d6da:	d0ad      	beq.n	800d638 <_printf_i+0x15c>
 800d6dc:	6823      	ldr	r3, [r4, #0]
 800d6de:	079b      	lsls	r3, r3, #30
 800d6e0:	d413      	bmi.n	800d70a <_printf_i+0x22e>
 800d6e2:	68e0      	ldr	r0, [r4, #12]
 800d6e4:	9b03      	ldr	r3, [sp, #12]
 800d6e6:	4298      	cmp	r0, r3
 800d6e8:	bfb8      	it	lt
 800d6ea:	4618      	movlt	r0, r3
 800d6ec:	e7a6      	b.n	800d63c <_printf_i+0x160>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	4632      	mov	r2, r6
 800d6f2:	4649      	mov	r1, r9
 800d6f4:	4640      	mov	r0, r8
 800d6f6:	47d0      	blx	sl
 800d6f8:	3001      	adds	r0, #1
 800d6fa:	d09d      	beq.n	800d638 <_printf_i+0x15c>
 800d6fc:	3501      	adds	r5, #1
 800d6fe:	68e3      	ldr	r3, [r4, #12]
 800d700:	9903      	ldr	r1, [sp, #12]
 800d702:	1a5b      	subs	r3, r3, r1
 800d704:	42ab      	cmp	r3, r5
 800d706:	dcf2      	bgt.n	800d6ee <_printf_i+0x212>
 800d708:	e7eb      	b.n	800d6e2 <_printf_i+0x206>
 800d70a:	2500      	movs	r5, #0
 800d70c:	f104 0619 	add.w	r6, r4, #25
 800d710:	e7f5      	b.n	800d6fe <_printf_i+0x222>
 800d712:	bf00      	nop
 800d714:	0800d8a9 	.word	0x0800d8a9
 800d718:	0800d8ba 	.word	0x0800d8ba

0800d71c <memmove>:
 800d71c:	4288      	cmp	r0, r1
 800d71e:	b510      	push	{r4, lr}
 800d720:	eb01 0402 	add.w	r4, r1, r2
 800d724:	d902      	bls.n	800d72c <memmove+0x10>
 800d726:	4284      	cmp	r4, r0
 800d728:	4623      	mov	r3, r4
 800d72a:	d807      	bhi.n	800d73c <memmove+0x20>
 800d72c:	1e43      	subs	r3, r0, #1
 800d72e:	42a1      	cmp	r1, r4
 800d730:	d008      	beq.n	800d744 <memmove+0x28>
 800d732:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d73a:	e7f8      	b.n	800d72e <memmove+0x12>
 800d73c:	4402      	add	r2, r0
 800d73e:	4601      	mov	r1, r0
 800d740:	428a      	cmp	r2, r1
 800d742:	d100      	bne.n	800d746 <memmove+0x2a>
 800d744:	bd10      	pop	{r4, pc}
 800d746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d74a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d74e:	e7f7      	b.n	800d740 <memmove+0x24>

0800d750 <_realloc_r>:
 800d750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d754:	4680      	mov	r8, r0
 800d756:	4615      	mov	r5, r2
 800d758:	460c      	mov	r4, r1
 800d75a:	b921      	cbnz	r1, 800d766 <_realloc_r+0x16>
 800d75c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d760:	4611      	mov	r1, r2
 800d762:	f7ff bb57 	b.w	800ce14 <_malloc_r>
 800d766:	b92a      	cbnz	r2, 800d774 <_realloc_r+0x24>
 800d768:	f7ff fca8 	bl	800d0bc <_free_r>
 800d76c:	2400      	movs	r4, #0
 800d76e:	4620      	mov	r0, r4
 800d770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d774:	f000 f81a 	bl	800d7ac <_malloc_usable_size_r>
 800d778:	4285      	cmp	r5, r0
 800d77a:	4606      	mov	r6, r0
 800d77c:	d802      	bhi.n	800d784 <_realloc_r+0x34>
 800d77e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d782:	d8f4      	bhi.n	800d76e <_realloc_r+0x1e>
 800d784:	4629      	mov	r1, r5
 800d786:	4640      	mov	r0, r8
 800d788:	f7ff fb44 	bl	800ce14 <_malloc_r>
 800d78c:	4607      	mov	r7, r0
 800d78e:	2800      	cmp	r0, #0
 800d790:	d0ec      	beq.n	800d76c <_realloc_r+0x1c>
 800d792:	42b5      	cmp	r5, r6
 800d794:	462a      	mov	r2, r5
 800d796:	4621      	mov	r1, r4
 800d798:	bf28      	it	cs
 800d79a:	4632      	movcs	r2, r6
 800d79c:	f7ff fc80 	bl	800d0a0 <memcpy>
 800d7a0:	4621      	mov	r1, r4
 800d7a2:	4640      	mov	r0, r8
 800d7a4:	f7ff fc8a 	bl	800d0bc <_free_r>
 800d7a8:	463c      	mov	r4, r7
 800d7aa:	e7e0      	b.n	800d76e <_realloc_r+0x1e>

0800d7ac <_malloc_usable_size_r>:
 800d7ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7b0:	1f18      	subs	r0, r3, #4
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	bfbc      	itt	lt
 800d7b6:	580b      	ldrlt	r3, [r1, r0]
 800d7b8:	18c0      	addlt	r0, r0, r3
 800d7ba:	4770      	bx	lr

0800d7bc <_init>:
 800d7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7be:	bf00      	nop
 800d7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7c2:	bc08      	pop	{r3}
 800d7c4:	469e      	mov	lr, r3
 800d7c6:	4770      	bx	lr

0800d7c8 <_fini>:
 800d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ca:	bf00      	nop
 800d7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ce:	bc08      	pop	{r3}
 800d7d0:	469e      	mov	lr, r3
 800d7d2:	4770      	bx	lr
