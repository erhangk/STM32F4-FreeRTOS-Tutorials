
001_Creating_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d72c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800d8bc  0800d8bc  0000e8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9c4  0800d9c4  0000f08c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9c4  0800d9c4  0000e9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9cc  0800d9cc  0000f08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9cc  0800d9cc  0000e9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9d0  0800d9d0  0000e9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800d9d4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f08c  2**0
                  CONTENTS
 10 .bss          0000548c  2000008c  2000008c  0000f08c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005518  20005518  0000f08c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f08c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002623d  00000000  00000000  0000f0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005942  00000000  00000000  000352f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f80  00000000  00000000  0003ac40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001849  00000000  00000000  0003cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007ff9  00000000  00000000  0003e409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026480  00000000  00000000  00046402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e05f7  00000000  00000000  0006c882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014ce79  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008ed8  00000000  00000000  0014cebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00155d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d8a4 	.word	0x0800d8a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800d8a4 	.word	0x0800d8a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000568:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800056c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	2b00      	cmp	r3, #0
 8000576:	d013      	beq.n	80005a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000580:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00b      	beq.n	80005a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000588:	e000      	b.n	800058c <ITM_SendChar+0x2c>
    {
      __NOP();
 800058a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800058c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000596:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <main>:

void Task1_Handler(void *params);
void Task2_Handler(void *params);

int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fd61 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f891 	bl	80006e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  printf("Starting FreeRTOS project.\r\n");
 80005be:	4816      	ldr	r0, [pc, #88]	@ (8000618 <main+0x68>)
 80005c0:	f00c f98e 	bl	800c8e0 <puts>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f98e 	bl	80008e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005c8:	f000 f8f8 	bl	80007bc <MX_I2C1_Init>
  MX_I2S3_Init();
 80005cc:	f000 f924 	bl	8000818 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005d0:	f000 f952 	bl	8000878 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d4:	f008 fcfc 	bl	8008fd0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005d8:	4a10      	ldr	r2, [pc, #64]	@ (800061c <main+0x6c>)
 80005da:	2100      	movs	r1, #0
 80005dc:	4810      	ldr	r0, [pc, #64]	@ (8000620 <main+0x70>)
 80005de:	f008 fd41 	bl	8009064 <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000624 <main+0x74>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(Task1_Handler, "Task 1", configMINIMAL_STACK_SIZE, NULL, 4, &myTask1Handle);
 80005e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <main+0x78>)
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	2304      	movs	r3, #4
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2300      	movs	r3, #0
 80005f2:	2280      	movs	r2, #128	@ 0x80
 80005f4:	490d      	ldr	r1, [pc, #52]	@ (800062c <main+0x7c>)
 80005f6:	480e      	ldr	r0, [pc, #56]	@ (8000630 <main+0x80>)
 80005f8:	f009 fe12 	bl	800a220 <xTaskCreate>
  xTaskCreate(Task2_Handler, "Task 2", configMINIMAL_STACK_SIZE, NULL, 4, &myTask2Handle);
 80005fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <main+0x84>)
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2304      	movs	r3, #4
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	2280      	movs	r2, #128	@ 0x80
 8000608:	490b      	ldr	r1, [pc, #44]	@ (8000638 <main+0x88>)
 800060a:	480c      	ldr	r0, [pc, #48]	@ (800063c <main+0x8c>)
 800060c:	f009 fe08 	bl	800a220 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000610:	f008 fd02 	bl	8009018 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x64>
 8000618:	0800d8c8 	.word	0x0800d8c8
 800061c:	0800d954 	.word	0x0800d954
 8000620:	08000ae1 	.word	0x08000ae1
 8000624:	2000019c 	.word	0x2000019c
 8000628:	200001a0 	.word	0x200001a0
 800062c:	0800d8e4 	.word	0x0800d8e4
 8000630:	08000641 	.word	0x08000641
 8000634:	200001a4 	.word	0x200001a4
 8000638:	0800d8ec 	.word	0x0800d8ec
 800063c:	08000675 	.word	0x08000675

08000640 <Task1_Handler>:
  }
  /* USER CODE END 3 */
}

void Task1_Handler(void *params)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	@ 0x40
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	int counter = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char mystr[45];

	while(1)
	{
		counter++;
 800064c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800064e:	3301      	adds	r3, #1
 8000650:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sprintf(mystr, "Task 1 has run %d times.\r\n", counter);
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000658:	4905      	ldr	r1, [pc, #20]	@ (8000670 <Task1_Handler+0x30>)
 800065a:	4618      	mov	r0, r3
 800065c:	f00c f948 	bl	800c8f0 <siprintf>
		printf(mystr);
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4618      	mov	r0, r3
 8000666:	f00c f8d3 	bl	800c810 <iprintf>
		counter++;
 800066a:	bf00      	nop
 800066c:	e7ee      	b.n	800064c <Task1_Handler+0xc>
 800066e:	bf00      	nop
 8000670:	0800d8f4 	.word	0x0800d8f4

08000674 <Task2_Handler>:
	}
}

void Task2_Handler(void *params)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b090      	sub	sp, #64	@ 0x40
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	int counter = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char mystr[45];

	while(1)
	{
		counter++;
 8000680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000682:	3301      	adds	r3, #1
 8000684:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sprintf(mystr, "Task 2 has run %d times.\r\n", counter);
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800068c:	4905      	ldr	r1, [pc, #20]	@ (80006a4 <Task2_Handler+0x30>)
 800068e:	4618      	mov	r0, r3
 8000690:	f00c f92e 	bl	800c8f0 <siprintf>
		printf(mystr);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4618      	mov	r0, r3
 800069a:	f00c f8b9 	bl	800c810 <iprintf>
		counter++;
 800069e:	bf00      	nop
 80006a0:	e7ee      	b.n	8000680 <Task2_Handler+0xc>
 80006a2:	bf00      	nop
 80006a4:	0800d910 	.word	0x0800d910

080006a8 <_write>:
	}
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	e009      	b.n	80006ce <_write+0x26>
	{
		ITM_SendChar((*ptr++));
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	60ba      	str	r2, [r7, #8]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff4c 	bl	8000560 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	3301      	adds	r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	697a      	ldr	r2, [r7, #20]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dbf1      	blt.n	80006ba <_write+0x12>
	}
	return len;
 80006d6:	687b      	ldr	r3, [r7, #4]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	@ 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	2230      	movs	r2, #48	@ 0x30
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f00c f9f6 	bl	800cae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <SystemClock_Config+0xd4>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <SystemClock_Config+0xd4>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	@ 0x40
 8000714:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <SystemClock_Config+0xd4>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <SystemClock_Config+0xd8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a23      	ldr	r2, [pc, #140]	@ (80007b8 <SystemClock_Config+0xd8>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <SystemClock_Config+0xd8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800073c:	2303      	movs	r3, #3
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000740:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000746:	2301      	movs	r3, #1
 8000748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074a:	2310      	movs	r3, #16
 800074c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000758:	2308      	movs	r3, #8
 800075a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800075c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000760:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000762:	2302      	movs	r3, #2
 8000764:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000766:	2307      	movs	r3, #7
 8000768:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fe80 	bl	8004474 <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800077a:	f000 f9cd 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800078e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000794:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f004 f8e1 	bl	8004964 <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007a8:	f000 f9b6 	bl	8000b18 <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3750      	adds	r7, #80	@ 0x50
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <MX_I2C1_Init+0x50>)
 80007c2:	4a13      	ldr	r2, [pc, #76]	@ (8000810 <MX_I2C1_Init+0x54>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_I2C1_Init+0x50>)
 80007c8:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <MX_I2C1_Init+0x58>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_I2C1_Init+0x50>)
 80007da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_I2C1_Init+0x50>)
 80007fa:	f003 f857 	bl	80038ac <HAL_I2C_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000804:	f000 f988 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000a8 	.word	0x200000a8
 8000810:	40005400 	.word	0x40005400
 8000814:	000186a0 	.word	0x000186a0

08000818 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800081c:	4b13      	ldr	r3, [pc, #76]	@ (800086c <MX_I2S3_Init+0x54>)
 800081e:	4a14      	ldr	r2, [pc, #80]	@ (8000870 <MX_I2S3_Init+0x58>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_I2S3_Init+0x54>)
 8000824:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000828:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <MX_I2S3_Init+0x54>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000830:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_I2S3_Init+0x54>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000836:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <MX_I2S3_Init+0x54>)
 8000838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800083c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_I2S3_Init+0x54>)
 8000840:	4a0c      	ldr	r2, [pc, #48]	@ (8000874 <MX_I2S3_Init+0x5c>)
 8000842:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_I2S3_Init+0x54>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_I2S3_Init+0x54>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_I2S3_Init+0x54>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_I2S3_Init+0x54>)
 8000858:	f003 f96c 	bl	8003b34 <HAL_I2S_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000862:	f000 f959 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000fc 	.word	0x200000fc
 8000870:	40003c00 	.word	0x40003c00
 8000874:	00017700 	.word	0x00017700

08000878 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800087c:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <MX_SPI1_Init+0x64>)
 800087e:	4a18      	ldr	r2, [pc, #96]	@ (80008e0 <MX_SPI1_Init+0x68>)
 8000880:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <MX_SPI1_Init+0x64>)
 8000884:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000888:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_SPI1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_SPI1_Init+0x64>)
 80008a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_SPI1_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <MX_SPI1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_SPI1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_SPI1_Init+0x64>)
 80008c4:	220a      	movs	r2, #10
 80008c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_SPI1_Init+0x64>)
 80008ca:	f004 fbcb 	bl	8005064 <HAL_SPI_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008d4:	f000 f920 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000144 	.word	0x20000144
 80008e0:	40013000 	.word	0x40013000

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	@ 0x30
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	4b72      	ldr	r3, [pc, #456]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a71      	ldr	r2, [pc, #452]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000904:	f043 0310 	orr.w	r3, r3, #16
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b6f      	ldr	r3, [pc, #444]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0310 	and.w	r3, r3, #16
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	4b6b      	ldr	r3, [pc, #428]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a6a      	ldr	r2, [pc, #424]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b68      	ldr	r3, [pc, #416]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b64      	ldr	r3, [pc, #400]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a63      	ldr	r2, [pc, #396]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b61      	ldr	r3, [pc, #388]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b5d      	ldr	r3, [pc, #372]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a5c      	ldr	r2, [pc, #368]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b56      	ldr	r3, [pc, #344]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a55      	ldr	r2, [pc, #340]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b53      	ldr	r3, [pc, #332]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b4f      	ldr	r3, [pc, #316]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a4e      	ldr	r2, [pc, #312]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b4c      	ldr	r3, [pc, #304]	@ (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2108      	movs	r1, #8
 80009a6:	4849      	ldr	r0, [pc, #292]	@ (8000acc <MX_GPIO_Init+0x1e8>)
 80009a8:	f000 fe4c 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2101      	movs	r1, #1
 80009b0:	4847      	ldr	r0, [pc, #284]	@ (8000ad0 <MX_GPIO_Init+0x1ec>)
 80009b2:	f000 fe47 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b6:	2200      	movs	r2, #0
 80009b8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80009bc:	4845      	ldr	r0, [pc, #276]	@ (8000ad4 <MX_GPIO_Init+0x1f0>)
 80009be:	f000 fe41 	bl	8001644 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009c2:	2308      	movs	r3, #8
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	483c      	ldr	r0, [pc, #240]	@ (8000acc <MX_GPIO_Init+0x1e8>)
 80009da:	f000 fc97 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009de:	2301      	movs	r3, #1
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4836      	ldr	r0, [pc, #216]	@ (8000ad0 <MX_GPIO_Init+0x1ec>)
 80009f6:	f000 fc89 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009fa:	2308      	movs	r3, #8
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	482e      	ldr	r0, [pc, #184]	@ (8000ad0 <MX_GPIO_Init+0x1ec>)
 8000a16:	f000 fc79 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a1e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	482a      	ldr	r0, [pc, #168]	@ (8000ad8 <MX_GPIO_Init+0x1f4>)
 8000a30:	f000 fc6c 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a34:	2304      	movs	r3, #4
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4825      	ldr	r0, [pc, #148]	@ (8000adc <MX_GPIO_Init+0x1f8>)
 8000a48:	f000 fc60 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a5e:	2305      	movs	r3, #5
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	481c      	ldr	r0, [pc, #112]	@ (8000adc <MX_GPIO_Init+0x1f8>)
 8000a6a:	f000 fc4f 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a6e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a72:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4813      	ldr	r0, [pc, #76]	@ (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000a88:	f000 fc40 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000aa0:	f000 fc34 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aa8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4804      	ldr	r0, [pc, #16]	@ (8000acc <MX_GPIO_Init+0x1e8>)
 8000aba:	f000 fc27 	bl	800130c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000abe:	bf00      	nop
 8000ac0:	3730      	adds	r7, #48	@ 0x30
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020c00 	.word	0x40020c00
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020400 	.word	0x40020400

08000ae0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000ae8:	f00b fa0e 	bl	800bf08 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f008 fb4b 	bl	8009188 <osDelay>
 8000af2:	e7fb      	b.n	8000aec <StartDefaultTask+0xc>

08000af4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a04      	ldr	r2, [pc, #16]	@ (8000b14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d101      	bne.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b06:	f000 fadb 	bl	80010c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40002000 	.word	0x40002000

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <Error_Handler+0x8>

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <HAL_MspInit+0x54>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	4a11      	ldr	r2, [pc, #68]	@ (8000b78 <HAL_MspInit+0x54>)
 8000b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <HAL_MspInit+0x54>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <HAL_MspInit+0x54>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <HAL_MspInit+0x54>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <HAL_MspInit+0x54>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	210f      	movs	r1, #15
 8000b66:	f06f 0001 	mvn.w	r0, #1
 8000b6a:	f000 fba5 	bl	80012b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	@ 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a19      	ldr	r2, [pc, #100]	@ (8000c00 <HAL_I2C_MspInit+0x84>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d12c      	bne.n	8000bf8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <HAL_I2C_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a17      	ldr	r2, [pc, #92]	@ (8000c04 <HAL_I2C_MspInit+0x88>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <HAL_I2C_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bba:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc0:	2312      	movs	r3, #18
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <HAL_I2C_MspInit+0x8c>)
 8000bd8:	f000 fb98 	bl	800130c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <HAL_I2C_MspInit+0x88>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be4:	4a07      	ldr	r2, [pc, #28]	@ (8000c04 <HAL_I2C_MspInit+0x88>)
 8000be6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bec:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <HAL_I2C_MspInit+0x88>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	@ 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40005400 	.word	0x40005400
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400

08000c0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	@ 0x38
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a31      	ldr	r2, [pc, #196]	@ (8000cfc <HAL_I2S_MspInit+0xf0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d15a      	bne.n	8000cf2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c40:	23c0      	movs	r3, #192	@ 0xc0
 8000c42:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 f8c7 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c58:	f7ff ff5e 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	4b27      	ldr	r3, [pc, #156]	@ (8000d00 <HAL_I2S_MspInit+0xf4>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c64:	4a26      	ldr	r2, [pc, #152]	@ (8000d00 <HAL_I2S_MspInit+0xf4>)
 8000c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6c:	4b24      	ldr	r3, [pc, #144]	@ (8000d00 <HAL_I2S_MspInit+0xf4>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	4b20      	ldr	r3, [pc, #128]	@ (8000d00 <HAL_I2S_MspInit+0xf4>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c80:	4a1f      	ldr	r2, [pc, #124]	@ (8000d00 <HAL_I2S_MspInit+0xf4>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c88:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <HAL_I2S_MspInit+0xf4>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <HAL_I2S_MspInit+0xf4>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9c:	4a18      	ldr	r2, [pc, #96]	@ (8000d00 <HAL_I2S_MspInit+0xf4>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca4:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <HAL_I2S_MspInit+0xf4>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cc0:	2306      	movs	r3, #6
 8000cc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480e      	ldr	r0, [pc, #56]	@ (8000d04 <HAL_I2S_MspInit+0xf8>)
 8000ccc:	f000 fb1e 	bl	800130c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cd0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ce2:	2306      	movs	r3, #6
 8000ce4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4806      	ldr	r0, [pc, #24]	@ (8000d08 <HAL_I2S_MspInit+0xfc>)
 8000cee:	f000 fb0d 	bl	800130c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3738      	adds	r7, #56	@ 0x38
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40003c00 	.word	0x40003c00
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000
 8000d08:	40020800 	.word	0x40020800

08000d0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a19      	ldr	r2, [pc, #100]	@ (8000d90 <HAL_SPI_MspInit+0x84>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d12b      	bne.n	8000d86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <HAL_SPI_MspInit+0x88>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d36:	4a17      	ldr	r2, [pc, #92]	@ (8000d94 <HAL_SPI_MspInit+0x88>)
 8000d38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <HAL_SPI_MspInit+0x88>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <HAL_SPI_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a10      	ldr	r2, [pc, #64]	@ (8000d94 <HAL_SPI_MspInit+0x88>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <HAL_SPI_MspInit+0x88>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d66:	23e0      	movs	r3, #224	@ 0xe0
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d76:	2305      	movs	r3, #5
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <HAL_SPI_MspInit+0x8c>)
 8000d82:	f000 fac3 	bl	800130c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	@ 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40013000 	.word	0x40013000
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020000 	.word	0x40020000

08000d9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	@ 0x38
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4b33      	ldr	r3, [pc, #204]	@ (8000e80 <HAL_InitTick+0xe4>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db4:	4a32      	ldr	r2, [pc, #200]	@ (8000e80 <HAL_InitTick+0xe4>)
 8000db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbc:	4b30      	ldr	r3, [pc, #192]	@ (8000e80 <HAL_InitTick+0xe4>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc8:	f107 0210 	add.w	r2, r7, #16
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 ffd2 	bl	8004d7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d103      	bne.n	8000dea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000de2:	f003 ffb7 	bl	8004d54 <HAL_RCC_GetPCLK1Freq>
 8000de6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000de8:	e004      	b.n	8000df4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dea:	f003 ffb3 	bl	8004d54 <HAL_RCC_GetPCLK1Freq>
 8000dee:	4603      	mov	r3, r0
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000df6:	4a23      	ldr	r2, [pc, #140]	@ (8000e84 <HAL_InitTick+0xe8>)
 8000df8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfc:	0c9b      	lsrs	r3, r3, #18
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e04:	4a21      	ldr	r2, [pc, #132]	@ (8000e8c <HAL_InitTick+0xf0>)
 8000e06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e0e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000e10:	4a1d      	ldr	r2, [pc, #116]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e14:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000e28:	4817      	ldr	r0, [pc, #92]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e2a:	f004 f9a4 	bl	8005176 <HAL_TIM_Base_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d11b      	bne.n	8000e74 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000e3c:	4812      	ldr	r0, [pc, #72]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e3e:	f004 f9f3 	bl	8005228 <HAL_TIM_Base_Start_IT>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d111      	bne.n	8000e74 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000e50:	202d      	movs	r0, #45	@ 0x2d
 8000e52:	f000 fa4d 	bl	80012f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d808      	bhi.n	8000e6e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	202d      	movs	r0, #45	@ 0x2d
 8000e62:	f000 fa29 	bl	80012b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e66:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <HAL_InitTick+0xf4>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	e002      	b.n	8000e74 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3738      	adds	r7, #56	@ 0x38
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	431bde83 	.word	0x431bde83
 8000e88:	200001a8 	.word	0x200001a8
 8000e8c:	40002000 	.word	0x40002000
 8000e90:	20000004 	.word	0x20000004

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <NMI_Handler+0x4>

08000e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000ed2:	f004 fa19 	bl	8005308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200001a8 	.word	0x200001a8

08000ee0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <OTG_FS_IRQHandler+0x10>)
 8000ee6:	f000 fea7 	bl	8001c38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20004fec 	.word	0x20004fec

08000ef4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e00a      	b.n	8000f1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f06:	f3af 8000 	nop.w
 8000f0a:	4601      	mov	r1, r0
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	60ba      	str	r2, [r7, #8]
 8000f12:	b2ca      	uxtb	r2, r1
 8000f14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbf0      	blt.n	8000f06 <_read+0x12>
  }

  return len;
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f56:	605a      	str	r2, [r3, #4]
  return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_isatty>:

int _isatty(int file)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	@ (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d207      	bcs.n	8000fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc8:	f00b fe3e 	bl	800cc48 <__errno>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fd6:	e009      	b.n	8000fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a05      	ldr	r2, [pc, #20]	@ (8000ffc <_sbrk+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20020000 	.word	0x20020000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	200001f0 	.word	0x200001f0
 8001000:	20005518 	.word	0x20005518

08001004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	@ (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001060 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800102c:	f7ff ffea 	bl	8001004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	@ (8001064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	@ (8001068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	@ (8001074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001056:	f00b fdfd 	bl	800cc54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff faa9 	bl	80005b0 <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800106c:	0800d9d4 	.word	0x0800d9d4
  ldr r2, =_sbss
 8001070:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001074:	20005518 	.word	0x20005518

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	@ (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f8fc 	bl	80012a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	200f      	movs	r0, #15
 80010ac:	f7ff fe76 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fd38 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	200001f4 	.word	0x200001f4

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200001f4 	.word	0x200001f4

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff ffee 	bl	80010e8 <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <HAL_Delay+0x44>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffde 	bl	80010e8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000008 	.word	0x20000008

08001148 <__NVIC_SetPriorityGrouping>:
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4907      	ldr	r1, [pc, #28]	@ (80011e4 <__NVIC_EnableIRQ+0x38>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	@ (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	@ (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	@ 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff4c 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ca:	f7ff ff61 	bl	8001190 <__NVIC_GetPriorityGrouping>
 80012ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	6978      	ldr	r0, [r7, #20]
 80012d6:	f7ff ffb1 	bl	800123c <NVIC_EncodePriority>
 80012da:	4602      	mov	r2, r0
 80012dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff80 	bl	80011e8 <__NVIC_SetPriority>
}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff54 	bl	80011ac <__NVIC_EnableIRQ>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	@ 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	e16b      	b.n	8001600 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001328:	2201      	movs	r2, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	429a      	cmp	r2, r3
 8001342:	f040 815a 	bne.w	80015fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b01      	cmp	r3, #1
 8001350:	d005      	beq.n	800135e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135a:	2b02      	cmp	r3, #2
 800135c:	d130      	bne.n	80013c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	2203      	movs	r2, #3
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001394:	2201      	movs	r2, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f003 0201 	and.w	r2, r3, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d017      	beq.n	80013fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d123      	bne.n	8001450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	69b9      	ldr	r1, [r7, #24]
 800144c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0203 	and.w	r2, r3, #3
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80b4 	beq.w	80015fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b60      	ldr	r3, [pc, #384]	@ (8001618 <HAL_GPIO_Init+0x30c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	4a5f      	ldr	r2, [pc, #380]	@ (8001618 <HAL_GPIO_Init+0x30c>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001618 <HAL_GPIO_Init+0x30c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ae:	4a5b      	ldr	r2, [pc, #364]	@ (800161c <HAL_GPIO_Init+0x310>)
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	220f      	movs	r2, #15
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a52      	ldr	r2, [pc, #328]	@ (8001620 <HAL_GPIO_Init+0x314>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d02b      	beq.n	8001532 <HAL_GPIO_Init+0x226>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a51      	ldr	r2, [pc, #324]	@ (8001624 <HAL_GPIO_Init+0x318>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d025      	beq.n	800152e <HAL_GPIO_Init+0x222>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a50      	ldr	r2, [pc, #320]	@ (8001628 <HAL_GPIO_Init+0x31c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01f      	beq.n	800152a <HAL_GPIO_Init+0x21e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4f      	ldr	r2, [pc, #316]	@ (800162c <HAL_GPIO_Init+0x320>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x21a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001630 <HAL_GPIO_Init+0x324>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x216>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001634 <HAL_GPIO_Init+0x328>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x212>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4c      	ldr	r2, [pc, #304]	@ (8001638 <HAL_GPIO_Init+0x32c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x20e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4b      	ldr	r2, [pc, #300]	@ (800163c <HAL_GPIO_Init+0x330>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x20a>
 8001512:	2307      	movs	r3, #7
 8001514:	e00e      	b.n	8001534 <HAL_GPIO_Init+0x228>
 8001516:	2308      	movs	r3, #8
 8001518:	e00c      	b.n	8001534 <HAL_GPIO_Init+0x228>
 800151a:	2306      	movs	r3, #6
 800151c:	e00a      	b.n	8001534 <HAL_GPIO_Init+0x228>
 800151e:	2305      	movs	r3, #5
 8001520:	e008      	b.n	8001534 <HAL_GPIO_Init+0x228>
 8001522:	2304      	movs	r3, #4
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x228>
 8001526:	2303      	movs	r3, #3
 8001528:	e004      	b.n	8001534 <HAL_GPIO_Init+0x228>
 800152a:	2302      	movs	r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_Init+0x228>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x228>
 8001532:	2300      	movs	r3, #0
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	f002 0203 	and.w	r2, r2, #3
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	4093      	lsls	r3, r2
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001544:	4935      	ldr	r1, [pc, #212]	@ (800161c <HAL_GPIO_Init+0x310>)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001552:	4b3b      	ldr	r3, [pc, #236]	@ (8001640 <HAL_GPIO_Init+0x334>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001576:	4a32      	ldr	r2, [pc, #200]	@ (8001640 <HAL_GPIO_Init+0x334>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800157c:	4b30      	ldr	r3, [pc, #192]	@ (8001640 <HAL_GPIO_Init+0x334>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a0:	4a27      	ldr	r2, [pc, #156]	@ (8001640 <HAL_GPIO_Init+0x334>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015a6:	4b26      	ldr	r3, [pc, #152]	@ (8001640 <HAL_GPIO_Init+0x334>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001640 <HAL_GPIO_Init+0x334>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <HAL_GPIO_Init+0x334>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f4:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <HAL_GPIO_Init+0x334>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3301      	adds	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b0f      	cmp	r3, #15
 8001604:	f67f ae90 	bls.w	8001328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3724      	adds	r7, #36	@ 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40013800 	.word	0x40013800
 8001620:	40020000 	.word	0x40020000
 8001624:	40020400 	.word	0x40020400
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40021000 	.word	0x40021000
 8001634:	40021400 	.word	0x40021400
 8001638:	40021800 	.word	0x40021800
 800163c:	40021c00 	.word	0x40021c00
 8001640:	40013c00 	.word	0x40013c00

08001644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001654:	787b      	ldrb	r3, [r7, #1]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001660:	e003      	b.n	800166a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	041a      	lsls	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	619a      	str	r2, [r3, #24]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af02      	add	r7, sp, #8
 800167c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e059      	b.n	800173c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d106      	bne.n	80016a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f00a fc84 	bl	800bfb0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2203      	movs	r2, #3
 80016ac:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016b6:	d102      	bne.n	80016be <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 f86d 	bl	80057a2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7c1a      	ldrb	r2, [r3, #16]
 80016d0:	f88d 2000 	strb.w	r2, [sp]
 80016d4:	3304      	adds	r3, #4
 80016d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016d8:	f003 ffee 	bl	80056b8 <USB_CoreInit>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2202      	movs	r2, #2
 80016e6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e026      	b.n	800173c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2101      	movs	r1, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f004 f865 	bl	80057c4 <USB_SetCurrentMode>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2202      	movs	r2, #2
 8001704:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e017      	b.n	800173c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7c1a      	ldrb	r2, [r3, #16]
 8001714:	f88d 2000 	strb.w	r2, [sp]
 8001718:	3304      	adds	r3, #4
 800171a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800171c:	f004 fa08 	bl	8005b30 <USB_HostInit>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2202      	movs	r2, #2
 800172a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e004      	b.n	800173c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b08b      	sub	sp, #44	@ 0x2c
 8001748:	af04      	add	r7, sp, #16
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	4608      	mov	r0, r1
 800174e:	4611      	mov	r1, r2
 8001750:	461a      	mov	r2, r3
 8001752:	4603      	mov	r3, r0
 8001754:	70fb      	strb	r3, [r7, #3]
 8001756:	460b      	mov	r3, r1
 8001758:	70bb      	strb	r3, [r7, #2]
 800175a:	4613      	mov	r3, r2
 800175c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800175e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001760:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_HCD_HC_Init+0x2c>
 800176c:	2302      	movs	r3, #2
 800176e:	e09d      	b.n	80018ac <HAL_HCD_HC_Init+0x168>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001778:	78fa      	ldrb	r2, [r7, #3]
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	3319      	adds	r3, #25
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	3314      	adds	r3, #20
 800179c:	787a      	ldrb	r2, [r7, #1]
 800179e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017a0:	78fa      	ldrb	r2, [r7, #3]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	1a9b      	subs	r3, r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	3315      	adds	r3, #21
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3326      	adds	r3, #38	@ 0x26
 80017c4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80017c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017ca:	78fa      	ldrb	r2, [r7, #3]
 80017cc:	78bb      	ldrb	r3, [r7, #2]
 80017ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017d2:	b2d8      	uxtb	r0, r3
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	3316      	adds	r3, #22
 80017e2:	4602      	mov	r2, r0
 80017e4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fbc8 	bl	8001f80 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80017f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da0a      	bge.n	800180e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	1a9b      	subs	r3, r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	3317      	adds	r3, #23
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e009      	b.n	8001822 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	1a9b      	subs	r3, r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	3317      	adds	r3, #23
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f004 fae6 	bl	8005df8 <USB_GetHostSpeed>
 800182c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800182e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001832:	2b01      	cmp	r3, #1
 8001834:	d10b      	bne.n	800184e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001836:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800183a:	2b01      	cmp	r3, #1
 800183c:	d107      	bne.n	800184e <HAL_HCD_HC_Init+0x10a>
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d104      	bne.n	800184e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2bbc      	cmp	r3, #188	@ 0xbc
 8001848:	d901      	bls.n	800184e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800184a:	23bc      	movs	r3, #188	@ 0xbc
 800184c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	1a9b      	subs	r3, r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	3318      	adds	r3, #24
 800185e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001862:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	b298      	uxth	r0, r3
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	3328      	adds	r3, #40	@ 0x28
 8001878:	4602      	mov	r2, r0
 800187a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	b29b      	uxth	r3, r3
 8001884:	787c      	ldrb	r4, [r7, #1]
 8001886:	78ba      	ldrb	r2, [r7, #2]
 8001888:	78f9      	ldrb	r1, [r7, #3]
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	4623      	mov	r3, r4
 800189a:	f004 fad5 	bl	8005e48 <USB_HC_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}

080018b4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_HCD_HC_Halt+0x1e>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e00f      	b.n	80018f2 <HAL_HCD_HC_Halt+0x3e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f004 fe67 	bl	80065b6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	4608      	mov	r0, r1
 8001906:	4611      	mov	r1, r2
 8001908:	461a      	mov	r2, r3
 800190a:	4603      	mov	r3, r0
 800190c:	70fb      	strb	r3, [r7, #3]
 800190e:	460b      	mov	r3, r1
 8001910:	70bb      	strb	r3, [r7, #2]
 8001912:	4613      	mov	r3, r2
 8001914:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	3317      	adds	r3, #23
 8001926:	78ba      	ldrb	r2, [r7, #2]
 8001928:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	3326      	adds	r3, #38	@ 0x26
 800193a:	787a      	ldrb	r2, [r7, #1]
 800193c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800193e:	7c3b      	ldrb	r3, [r7, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d114      	bne.n	800196e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	332a      	adds	r3, #42	@ 0x2a
 8001954:	2203      	movs	r2, #3
 8001956:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	3319      	adds	r3, #25
 8001968:	7f3a      	ldrb	r2, [r7, #28]
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e009      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	332a      	adds	r3, #42	@ 0x2a
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001982:	787b      	ldrb	r3, [r7, #1]
 8001984:	2b03      	cmp	r3, #3
 8001986:	f200 8102 	bhi.w	8001b8e <HAL_HCD_HC_SubmitRequest+0x292>
 800198a:	a201      	add	r2, pc, #4	@ (adr r2, 8001990 <HAL_HCD_HC_SubmitRequest+0x94>)
 800198c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001990:	080019a1 	.word	0x080019a1
 8001994:	08001b79 	.word	0x08001b79
 8001998:	08001a65 	.word	0x08001a65
 800199c:	08001aef 	.word	0x08001aef
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80019a0:	7c3b      	ldrb	r3, [r7, #16]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	f040 80f5 	bne.w	8001b92 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80019a8:	78bb      	ldrb	r3, [r7, #2]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d12d      	bne.n	8001a0a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80019ae:	8b3b      	ldrh	r3, [r7, #24]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	333d      	adds	r3, #61	@ 0x3d
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	1a9b      	subs	r3, r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	333d      	adds	r3, #61	@ 0x3d
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10a      	bne.n	80019f4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019de:	78fa      	ldrb	r2, [r7, #3]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	332a      	adds	r3, #42	@ 0x2a
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80019f2:	e0ce      	b.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	332a      	adds	r3, #42	@ 0x2a
 8001a04:	2202      	movs	r2, #2
 8001a06:	701a      	strb	r2, [r3, #0]
      break;
 8001a08:	e0c3      	b.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001a0a:	78fa      	ldrb	r2, [r7, #3]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	1a9b      	subs	r3, r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	331a      	adds	r3, #26
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	f040 80b8 	bne.w	8001b92 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a22:	78fa      	ldrb	r2, [r7, #3]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	1a9b      	subs	r3, r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	333c      	adds	r3, #60	@ 0x3c
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10a      	bne.n	8001a4e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a38:	78fa      	ldrb	r2, [r7, #3]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	332a      	adds	r3, #42	@ 0x2a
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
      break;
 8001a4c:	e0a1      	b.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a4e:	78fa      	ldrb	r2, [r7, #3]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	332a      	adds	r3, #42	@ 0x2a
 8001a5e:	2202      	movs	r2, #2
 8001a60:	701a      	strb	r2, [r3, #0]
      break;
 8001a62:	e096      	b.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a64:	78bb      	ldrb	r3, [r7, #2]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d120      	bne.n	8001aac <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a6a:	78fa      	ldrb	r2, [r7, #3]
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	1a9b      	subs	r3, r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	333d      	adds	r3, #61	@ 0x3d
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10a      	bne.n	8001a96 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	332a      	adds	r3, #42	@ 0x2a
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a94:	e07e      	b.n	8001b94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a96:	78fa      	ldrb	r2, [r7, #3]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	332a      	adds	r3, #42	@ 0x2a
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	701a      	strb	r2, [r3, #0]
      break;
 8001aaa:	e073      	b.n	8001b94 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001aac:	78fa      	ldrb	r2, [r7, #3]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	333c      	adds	r3, #60	@ 0x3c
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10a      	bne.n	8001ad8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	332a      	adds	r3, #42	@ 0x2a
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
      break;
 8001ad6:	e05d      	b.n	8001b94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ad8:	78fa      	ldrb	r2, [r7, #3]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	332a      	adds	r3, #42	@ 0x2a
 8001ae8:	2202      	movs	r2, #2
 8001aea:	701a      	strb	r2, [r3, #0]
      break;
 8001aec:	e052      	b.n	8001b94 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001aee:	78bb      	ldrb	r3, [r7, #2]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d120      	bne.n	8001b36 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	333d      	adds	r3, #61	@ 0x3d
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10a      	bne.n	8001b20 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	332a      	adds	r3, #42	@ 0x2a
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b1e:	e039      	b.n	8001b94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	332a      	adds	r3, #42	@ 0x2a
 8001b30:	2202      	movs	r2, #2
 8001b32:	701a      	strb	r2, [r3, #0]
      break;
 8001b34:	e02e      	b.n	8001b94 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	1a9b      	subs	r3, r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	333c      	adds	r3, #60	@ 0x3c
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10a      	bne.n	8001b62 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b4c:	78fa      	ldrb	r2, [r7, #3]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	332a      	adds	r3, #42	@ 0x2a
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
      break;
 8001b60:	e018      	b.n	8001b94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	332a      	adds	r3, #42	@ 0x2a
 8001b72:	2202      	movs	r2, #2
 8001b74:	701a      	strb	r2, [r3, #0]
      break;
 8001b76:	e00d      	b.n	8001b94 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	332a      	adds	r3, #42	@ 0x2a
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
      break;
 8001b8c:	e002      	b.n	8001b94 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001b8e:	bf00      	nop
 8001b90:	e000      	b.n	8001b94 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001b92:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b94:	78fa      	ldrb	r2, [r7, #3]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	332c      	adds	r3, #44	@ 0x2c
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ba8:	78fa      	ldrb	r2, [r7, #3]
 8001baa:	8b39      	ldrh	r1, [r7, #24]
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	1a9b      	subs	r3, r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4403      	add	r3, r0
 8001bb8:	3334      	adds	r3, #52	@ 0x34
 8001bba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	1a9b      	subs	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	334c      	adds	r3, #76	@ 0x4c
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	3338      	adds	r3, #56	@ 0x38
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3315      	adds	r3, #21
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	334d      	adds	r3, #77	@ 0x4d
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	4613      	mov	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	3310      	adds	r3, #16
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	1d19      	adds	r1, r3, #4
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	799b      	ldrb	r3, [r3, #6]
 8001c26:	461a      	mov	r2, r3
 8001c28:	f004 fa3a 	bl	80060a0 <USB_HC_StartXfer>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop

08001c38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 ff2e 	bl	8005ab0 <USB_GetMode>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	f040 80fb 	bne.w	8001e52 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 fef1 	bl	8005a48 <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80f1 	beq.w	8001e50 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 fee8 	bl	8005a48 <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c82:	d104      	bne.n	8001c8e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fed8 	bl	8005a48 <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ca2:	d104      	bne.n	8001cae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001cac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fec8 	bl	8005a48 <USB_ReadInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001cc2:	d104      	bne.n	8001cce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ccc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 feb8 	bl	8005a48 <USB_ReadInterrupts>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d103      	bne.n	8001cea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 feaa 	bl	8005a48 <USB_ReadInterrupts>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cfe:	d120      	bne.n	8001d42 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001d08:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d113      	bne.n	8001d42 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d1a:	2110      	movs	r1, #16
 8001d1c:	6938      	ldr	r0, [r7, #16]
 8001d1e:	f003 fd9d 	bl	800585c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d22:	6938      	ldr	r0, [r7, #16]
 8001d24:	f003 fdcc 	bl	80058c0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7a5b      	ldrb	r3, [r3, #9]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d105      	bne.n	8001d3c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 ffbe 	bl	8005cb8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f00a f9b5 	bl	800c0ac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 fe7e 	bl	8005a48 <USB_ReadInterrupts>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d56:	d102      	bne.n	8001d5e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f001 fd33 	bl	80037c4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 fe70 	bl	8005a48 <USB_ReadInterrupts>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d106      	bne.n	8001d80 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f00a f97e 	bl	800c074 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 fe5f 	bl	8005a48 <USB_ReadInterrupts>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d94:	d139      	bne.n	8001e0a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 fbfa 	bl	8006594 <USB_HC_ReadInterrupt>
 8001da0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e025      	b.n	8001df4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d018      	beq.n	8001dee <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dd2:	d106      	bne.n	8001de2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	4619      	mov	r1, r3
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f905 	bl	8001fea <HCD_HC_IN_IRQHandler>
 8001de0:	e005      	b.n	8001dee <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 ff67 	bl	8002cbc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	3301      	adds	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	795b      	ldrb	r3, [r3, #5]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d3d3      	bcc.n	8001da8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 fe1a 	bl	8005a48 <USB_ReadInterrupts>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d101      	bne.n	8001e22 <HAL_HCD_IRQHandler+0x1ea>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_HCD_IRQHandler+0x1ec>
 8001e22:	2300      	movs	r3, #0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d014      	beq.n	8001e52 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0210 	bic.w	r2, r2, #16
 8001e36:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f001 fbe4 	bl	8003606 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699a      	ldr	r2, [r3, #24]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0210 	orr.w	r2, r2, #16
 8001e4c:	619a      	str	r2, [r3, #24]
 8001e4e:	e000      	b.n	8001e52 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001e50:	bf00      	nop
    }
  }
}
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_HCD_Start+0x16>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e013      	b.n	8001e96 <HAL_HCD_Start+0x3e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 ff82 	bl	8005d86 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 fc7a 	bl	8005780 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_HCD_Stop+0x16>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e00d      	b.n	8001ed0 <HAL_HCD_Stop+0x32>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f004 fcd5 	bl	8006870 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 ff24 	bl	8005d32 <USB_ResetPort>
 8001eea:	4603      	mov	r3, r0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	334c      	adds	r3, #76	@ 0x4c
 8001f10:	781b      	ldrb	r3, [r3, #0]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	3338      	adds	r3, #56	@ 0x38
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 ff66 	bl	8005e26 <USB_GetCurrentFrame>
 8001f5a:	4603      	mov	r3, r0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 ff41 	bl	8005df8 <USB_GetHostSpeed>
 8001f76:	4603      	mov	r3, r0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	331a      	adds	r3, #26
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	331b      	adds	r3, #27
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	3325      	adds	r3, #37	@ 0x25
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3324      	adds	r3, #36	@ 0x24
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f003 fd30 	bl	8005a6e <USB_ReadChInterrupts>
 800200e:	4603      	mov	r3, r0
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b04      	cmp	r3, #4
 8002016:	d11a      	bne.n	800204e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002024:	461a      	mov	r2, r3
 8002026:	2304      	movs	r3, #4
 8002028:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	334d      	adds	r3, #77	@ 0x4d
 800203a:	2207      	movs	r2, #7
 800203c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f004 fab5 	bl	80065b6 <USB_HC_Halt>
 800204c:	e09e      	b.n	800218c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f003 fd09 	bl	8005a6e <USB_ReadChInterrupts>
 800205c:	4603      	mov	r3, r0
 800205e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002066:	d11b      	bne.n	80020a0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002074:	461a      	mov	r2, r3
 8002076:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800207a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	334d      	adds	r3, #77	@ 0x4d
 800208c:	2208      	movs	r2, #8
 800208e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f004 fa8c 	bl	80065b6 <USB_HC_Halt>
 800209e:	e075      	b.n	800218c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 fce0 	bl	8005a6e <USB_ReadChInterrupts>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d11a      	bne.n	80020ee <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020c4:	461a      	mov	r2, r3
 80020c6:	2308      	movs	r3, #8
 80020c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80020ca:	78fa      	ldrb	r2, [r7, #3]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	334d      	adds	r3, #77	@ 0x4d
 80020da:	2206      	movs	r2, #6
 80020dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 fa65 	bl	80065b6 <USB_HC_Halt>
 80020ec:	e04e      	b.n	800218c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f003 fcb9 	bl	8005a6e <USB_ReadChInterrupts>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002106:	d11b      	bne.n	8002140 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002114:	461a      	mov	r2, r3
 8002116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800211a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	334d      	adds	r3, #77	@ 0x4d
 800212c:	2209      	movs	r2, #9
 800212e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f004 fa3c 	bl	80065b6 <USB_HC_Halt>
 800213e:	e025      	b.n	800218c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f003 fc90 	bl	8005a6e <USB_ReadChInterrupts>
 800214e:	4603      	mov	r3, r0
 8002150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002154:	2b80      	cmp	r3, #128	@ 0x80
 8002156:	d119      	bne.n	800218c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002164:	461a      	mov	r2, r3
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	334d      	adds	r3, #77	@ 0x4d
 800217a:	2207      	movs	r2, #7
 800217c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f004 fa15 	bl	80065b6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f003 fc6a 	bl	8005a6e <USB_ReadChInterrupts>
 800219a:	4603      	mov	r3, r0
 800219c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021a4:	d112      	bne.n	80021cc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f004 fa01 	bl	80065b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021c0:	461a      	mov	r2, r3
 80021c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021c6:	6093      	str	r3, [r2, #8]
 80021c8:	f000 bd75 	b.w	8002cb6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f003 fc4a 	bl	8005a6e <USB_ReadChInterrupts>
 80021da:	4603      	mov	r3, r0
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	f040 8128 	bne.w	8002436 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021f2:	461a      	mov	r2, r3
 80021f4:	2320      	movs	r3, #32
 80021f6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	331b      	adds	r3, #27
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d119      	bne.n	8002242 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	331b      	adds	r3, #27
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	0151      	lsls	r1, r2, #5
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	440a      	add	r2, r1
 8002238:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800223c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002240:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	799b      	ldrb	r3, [r3, #6]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d01b      	beq.n	8002282 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	3330      	adds	r3, #48	@ 0x30
 800225a:	6819      	ldr	r1, [r3, #0]
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	1ac9      	subs	r1, r1, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4403      	add	r3, r0
 800227e:	3338      	adds	r3, #56	@ 0x38
 8002280:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	334d      	adds	r3, #77	@ 0x4d
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	3344      	adds	r3, #68	@ 0x44
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022b6:	461a      	mov	r2, r3
 80022b8:	2301      	movs	r3, #1
 80022ba:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	3326      	adds	r3, #38	@ 0x26
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	3326      	adds	r3, #38	@ 0x26
 80022e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d110      	bne.n	800230a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f004 f960 	bl	80065b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	2310      	movs	r3, #16
 8002306:	6093      	str	r3, [r2, #8]
 8002308:	e03d      	b.n	8002386 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3326      	adds	r3, #38	@ 0x26
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d00a      	beq.n	8002336 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	3326      	adds	r3, #38	@ 0x26
 8002330:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002332:	2b01      	cmp	r3, #1
 8002334:	d127      	bne.n	8002386 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	0151      	lsls	r1, r2, #5
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	440a      	add	r2, r1
 800234c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002350:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002354:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002356:	78fa      	ldrb	r2, [r7, #3]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	334c      	adds	r3, #76	@ 0x4c
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	334c      	adds	r3, #76	@ 0x4c
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	4619      	mov	r1, r3
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f009 fea1 	bl	800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	799b      	ldrb	r3, [r3, #6]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d13b      	bne.n	8002406 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	3338      	adds	r3, #56	@ 0x38
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4403      	add	r3, r0
 80023ae:	3328      	adds	r3, #40	@ 0x28
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	440b      	add	r3, r1
 80023b4:	1e59      	subs	r1, r3, #1
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4403      	add	r3, r0
 80023c4:	3328      	adds	r3, #40	@ 0x28
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 8470 	beq.w	8002cb6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	333c      	adds	r3, #60	@ 0x3c
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	f083 0301 	eor.w	r3, r3, #1
 80023ee:	b2d8      	uxtb	r0, r3
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	333c      	adds	r3, #60	@ 0x3c
 80023fe:	4602      	mov	r2, r0
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	f000 bc58 	b.w	8002cb6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	333c      	adds	r3, #60	@ 0x3c
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	f083 0301 	eor.w	r3, r3, #1
 800241e:	b2d8      	uxtb	r0, r3
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	333c      	adds	r3, #60	@ 0x3c
 800242e:	4602      	mov	r2, r0
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	f000 bc40 	b.w	8002cb6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f003 fb15 	bl	8005a6e <USB_ReadChInterrupts>
 8002444:	4603      	mov	r3, r0
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b20      	cmp	r3, #32
 800244c:	d131      	bne.n	80024b2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800245a:	461a      	mov	r2, r3
 800245c:	2320      	movs	r3, #32
 800245e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	331a      	adds	r3, #26
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	f040 841f 	bne.w	8002cb6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	331b      	adds	r3, #27
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	334d      	adds	r3, #77	@ 0x4d
 800249c:	2203      	movs	r2, #3
 800249e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f004 f884 	bl	80065b6 <USB_HC_Halt>
 80024ae:	f000 bc02 	b.w	8002cb6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	78fa      	ldrb	r2, [r7, #3]
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f003 fad7 	bl	8005a6e <USB_ReadChInterrupts>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	f040 8305 	bne.w	8002ad6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024d8:	461a      	mov	r2, r3
 80024da:	2302      	movs	r3, #2
 80024dc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	334d      	adds	r3, #77	@ 0x4d
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d114      	bne.n	800251e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	334d      	adds	r3, #77	@ 0x4d
 8002504:	2202      	movs	r2, #2
 8002506:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	334c      	adds	r3, #76	@ 0x4c
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
 800251c:	e2cc      	b.n	8002ab8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	334d      	adds	r3, #77	@ 0x4d
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b06      	cmp	r3, #6
 8002532:	d114      	bne.n	800255e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	334d      	adds	r3, #77	@ 0x4d
 8002544:	2202      	movs	r2, #2
 8002546:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	334c      	adds	r3, #76	@ 0x4c
 8002558:	2205      	movs	r2, #5
 800255a:	701a      	strb	r2, [r3, #0]
 800255c:	e2ac      	b.n	8002ab8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	334d      	adds	r3, #77	@ 0x4d
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b07      	cmp	r3, #7
 8002572:	d00b      	beq.n	800258c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	334d      	adds	r3, #77	@ 0x4d
 8002584:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002586:	2b09      	cmp	r3, #9
 8002588:	f040 80a6 	bne.w	80026d8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	334d      	adds	r3, #77	@ 0x4d
 800259c:	2202      	movs	r2, #2
 800259e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	3344      	adds	r3, #68	@ 0x44
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	1c59      	adds	r1, r3, #1
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4403      	add	r3, r0
 80025c0:	3344      	adds	r3, #68	@ 0x44
 80025c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	3344      	adds	r3, #68	@ 0x44
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d943      	bls.n	8002662 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80025da:	78fa      	ldrb	r2, [r7, #3]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	3344      	adds	r3, #68	@ 0x44
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	331a      	adds	r3, #26
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d123      	bne.n	800264c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	331b      	adds	r3, #27
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	331c      	adds	r3, #28
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	78fa      	ldrb	r2, [r7, #3]
 800263c:	0151      	lsls	r1, r2, #5
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	440a      	add	r2, r1
 8002642:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800264a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	334c      	adds	r3, #76	@ 0x4c
 800265c:	2204      	movs	r2, #4
 800265e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002660:	e229      	b.n	8002ab6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	334c      	adds	r3, #76	@ 0x4c
 8002672:	2202      	movs	r2, #2
 8002674:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	3326      	adds	r3, #38	@ 0x26
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00b      	beq.n	80026a4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3326      	adds	r3, #38	@ 0x26
 800269c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800269e:	2b02      	cmp	r3, #2
 80026a0:	f040 8209 	bne.w	8002ab6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026ba:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026c2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d0:	461a      	mov	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026d6:	e1ee      	b.n	8002ab6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	334d      	adds	r3, #77	@ 0x4d
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	f040 80c8 	bne.w	8002880 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	334d      	adds	r3, #77	@ 0x4d
 8002700:	2202      	movs	r2, #2
 8002702:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	331b      	adds	r3, #27
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	f040 81ce 	bne.w	8002ab8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800271c:	78fa      	ldrb	r2, [r7, #3]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	3326      	adds	r3, #38	@ 0x26
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d16b      	bne.n	800280a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3348      	adds	r3, #72	@ 0x48
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	1c59      	adds	r1, r3, #1
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4403      	add	r3, r0
 8002752:	3348      	adds	r3, #72	@ 0x48
 8002754:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002756:	78fa      	ldrb	r2, [r7, #3]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	3348      	adds	r3, #72	@ 0x48
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d943      	bls.n	80027f4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	3348      	adds	r3, #72	@ 0x48
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	331b      	adds	r3, #27
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	3344      	adds	r3, #68	@ 0x44
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d809      	bhi.n	80027be <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	1a9b      	subs	r3, r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	331c      	adds	r3, #28
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	0151      	lsls	r1, r2, #5
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	440a      	add	r2, r1
 80027d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027dc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	334c      	adds	r3, #76	@ 0x4c
 80027ee:	2204      	movs	r2, #4
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	e014      	b.n	800281e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	334c      	adds	r3, #76	@ 0x4c
 8002804:	2202      	movs	r2, #2
 8002806:	701a      	strb	r2, [r3, #0]
 8002808:	e009      	b.n	800281e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	334c      	adds	r3, #76	@ 0x4c
 800281a:	2202      	movs	r2, #2
 800281c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	3326      	adds	r3, #38	@ 0x26
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002834:	78fa      	ldrb	r2, [r7, #3]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	3326      	adds	r3, #38	@ 0x26
 8002844:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002846:	2b02      	cmp	r3, #2
 8002848:	f040 8136 	bne.w	8002ab8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002862:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800286a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002878:	461a      	mov	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e11b      	b.n	8002ab8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	334d      	adds	r3, #77	@ 0x4d
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b03      	cmp	r3, #3
 8002894:	f040 8081 	bne.w	800299a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	334d      	adds	r3, #77	@ 0x4d
 80028a8:	2202      	movs	r2, #2
 80028aa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	331b      	adds	r3, #27
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	f040 80fa 	bne.w	8002ab8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	334c      	adds	r3, #76	@ 0x4c
 80028d4:	2202      	movs	r2, #2
 80028d6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	0151      	lsls	r1, r2, #5
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	440a      	add	r2, r1
 80028ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	0151      	lsls	r1, r2, #5
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	440a      	add	r2, r1
 800290e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002916:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	0151      	lsls	r1, r2, #5
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	440a      	add	r2, r1
 800292e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002932:	f023 0320 	bic.w	r3, r3, #32
 8002936:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	3326      	adds	r3, #38	@ 0x26
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	3326      	adds	r3, #38	@ 0x26
 800295e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002960:	2b02      	cmp	r3, #2
 8002962:	f040 80a9 	bne.w	8002ab8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800297c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002984:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	e08e      	b.n	8002ab8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	334d      	adds	r3, #77	@ 0x4d
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d143      	bne.n	8002a38 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	334d      	adds	r3, #77	@ 0x4d
 80029c0:	2202      	movs	r2, #2
 80029c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	334c      	adds	r3, #76	@ 0x4c
 80029d4:	2202      	movs	r2, #2
 80029d6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3326      	adds	r3, #38	@ 0x26
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	3326      	adds	r3, #38	@ 0x26
 80029fe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d159      	bne.n	8002ab8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a1a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a22:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a30:	461a      	mov	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e03f      	b.n	8002ab8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	334d      	adds	r3, #77	@ 0x4d
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d126      	bne.n	8002a9c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	334d      	adds	r3, #77	@ 0x4d
 8002a5e:	2202      	movs	r2, #2
 8002a60:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	3344      	adds	r3, #68	@ 0x44
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	1c59      	adds	r1, r3, #1
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4403      	add	r3, r0
 8002a82:	3344      	adds	r3, #68	@ 0x44
 8002a84:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	334c      	adds	r3, #76	@ 0x4c
 8002a96:	2204      	movs	r2, #4
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e00d      	b.n	8002ab8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	334d      	adds	r3, #77	@ 0x4d
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	f000 8100 	beq.w	8002cb4 <HCD_HC_IN_IRQHandler+0xcca>
 8002ab4:	e000      	b.n	8002ab8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ab6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	334c      	adds	r3, #76	@ 0x4c
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f009 fafa 	bl	800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ad4:	e0ef      	b.n	8002cb6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f002 ffc5 	bl	8005a6e <USB_ReadChInterrupts>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aea:	2b40      	cmp	r3, #64	@ 0x40
 8002aec:	d12f      	bne.n	8002b4e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002afa:	461a      	mov	r2, r3
 8002afc:	2340      	movs	r3, #64	@ 0x40
 8002afe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	334d      	adds	r3, #77	@ 0x4d
 8002b10:	2205      	movs	r2, #5
 8002b12:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	331a      	adds	r3, #26
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	3344      	adds	r3, #68	@ 0x44
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fd35 	bl	80065b6 <USB_HC_Halt>
 8002b4c:	e0b3      	b.n	8002cb6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f002 ff89 	bl	8005a6e <USB_ReadChInterrupts>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	f040 80a7 	bne.w	8002cb6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	3326      	adds	r3, #38	@ 0x26
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d11b      	bne.n	8002bb6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3344      	adds	r3, #68	@ 0x44
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	334d      	adds	r3, #77	@ 0x4d
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f003 fd01 	bl	80065b6 <USB_HC_Halt>
 8002bb4:	e03f      	b.n	8002c36 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	3326      	adds	r3, #38	@ 0x26
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	3326      	adds	r3, #38	@ 0x26
 8002bdc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d129      	bne.n	8002c36 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	3344      	adds	r3, #68	@ 0x44
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	799b      	ldrb	r3, [r3, #6]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HCD_HC_IN_IRQHandler+0xc2a>
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	331b      	adds	r3, #27
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d110      	bne.n	8002c36 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	334d      	adds	r3, #77	@ 0x4d
 8002c24:	2204      	movs	r2, #4
 8002c26:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 fcc0 	bl	80065b6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	331b      	adds	r3, #27
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d129      	bne.n	8002ca0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	331b      	adds	r3, #27
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	0151      	lsls	r1, r2, #5
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	440a      	add	r2, r1
 8002c76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c7e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	0151      	lsls	r1, r2, #5
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	440a      	add	r2, r1
 8002c96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c9a:	f043 0320 	orr.w	r3, r3, #32
 8002c9e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cac:	461a      	mov	r2, r3
 8002cae:	2310      	movs	r3, #16
 8002cb0:	6093      	str	r3, [r2, #8]
 8002cb2:	e000      	b.n	8002cb6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002cb4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f002 fec7 	bl	8005a6e <USB_ReadChInterrupts>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d11b      	bne.n	8002d22 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	334d      	adds	r3, #77	@ 0x4d
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 fc4c 	bl	80065b6 <USB_HC_Halt>
 8002d1e:	f000 bc6f 	b.w	8003600 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f002 fe9f 	bl	8005a6e <USB_ReadChInterrupts>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	f040 8082 	bne.w	8002e40 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3319      	adds	r3, #25
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d124      	bne.n	8002dae <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3319      	adds	r3, #25
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	334c      	adds	r3, #76	@ 0x4c
 8002d88:	2202      	movs	r2, #2
 8002d8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	334d      	adds	r3, #77	@ 0x4d
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 fc04 	bl	80065b6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	331a      	adds	r3, #26
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	f040 841d 	bne.w	8003600 <HCD_HC_OUT_IRQHandler+0x944>
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	331b      	adds	r3, #27
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f040 8411 	bne.w	8003600 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	3326      	adds	r3, #38	@ 0x26
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d009      	beq.n	8002e08 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	331b      	adds	r3, #27
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	334d      	adds	r3, #77	@ 0x4d
 8002e18:	2203      	movs	r2, #3
 8002e1a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fbc6 	bl	80065b6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	3344      	adds	r3, #68	@ 0x44
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	e3df      	b.n	8003600 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 fe10 	bl	8005a6e <USB_ReadChInterrupts>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e58:	d111      	bne.n	8002e7e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e66:	461a      	mov	r2, r3
 8002e68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e6c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fb9d 	bl	80065b6 <USB_HC_Halt>
 8002e7c:	e3c0      	b.n	8003600 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	4611      	mov	r1, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f002 fdf1 	bl	8005a6e <USB_ReadChInterrupts>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d168      	bne.n	8002f68 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3344      	adds	r3, #68	@ 0x44
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 fddb 	bl	8005a6e <USB_ReadChInterrupts>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ebe:	2b40      	cmp	r3, #64	@ 0x40
 8002ec0:	d112      	bne.n	8002ee8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	3319      	adds	r3, #25
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2340      	movs	r3, #64	@ 0x40
 8002ee6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	331b      	adds	r3, #27
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d019      	beq.n	8002f32 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	331b      	adds	r3, #27
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	0151      	lsls	r1, r2, #5
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	440a      	add	r2, r1
 8002f28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f30:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2301      	movs	r3, #1
 8002f42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	334d      	adds	r3, #77	@ 0x4d
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fb28 	bl	80065b6 <USB_HC_Halt>
 8002f66:	e34b      	b.n	8003600 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f002 fd7c 	bl	8005a6e <USB_ReadChInterrupts>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7c:	2b40      	cmp	r3, #64	@ 0x40
 8002f7e:	d139      	bne.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	334d      	adds	r3, #77	@ 0x4d
 8002f90:	2205      	movs	r2, #5
 8002f92:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	331a      	adds	r3, #26
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	3319      	adds	r3, #25
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3344      	adds	r3, #68	@ 0x44
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f003 faeb 	bl	80065b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fec:	461a      	mov	r2, r3
 8002fee:	2340      	movs	r3, #64	@ 0x40
 8002ff0:	6093      	str	r3, [r2, #8]
 8002ff2:	e305      	b.n	8003600 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f002 fd36 	bl	8005a6e <USB_ReadChInterrupts>
 8003002:	4603      	mov	r3, r0
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b08      	cmp	r3, #8
 800300a:	d11a      	bne.n	8003042 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003018:	461a      	mov	r2, r3
 800301a:	2308      	movs	r3, #8
 800301c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	334d      	adds	r3, #77	@ 0x4d
 800302e:	2206      	movs	r2, #6
 8003030:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f003 fabb 	bl	80065b6 <USB_HC_Halt>
 8003040:	e2de      	b.n	8003600 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f002 fd0f 	bl	8005a6e <USB_ReadChInterrupts>
 8003050:	4603      	mov	r3, r0
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b10      	cmp	r3, #16
 8003058:	d144      	bne.n	80030e4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	3344      	adds	r3, #68	@ 0x44
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	334d      	adds	r3, #77	@ 0x4d
 800307e:	2204      	movs	r2, #4
 8003080:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	3319      	adds	r3, #25
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d114      	bne.n	80030c2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	3318      	adds	r3, #24
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	3319      	adds	r3, #25
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f003 fa73 	bl	80065b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030dc:	461a      	mov	r2, r3
 80030de:	2310      	movs	r3, #16
 80030e0:	6093      	str	r3, [r2, #8]
 80030e2:	e28d      	b.n	8003600 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f002 fcbe 	bl	8005a6e <USB_ReadChInterrupts>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f8:	2b80      	cmp	r3, #128	@ 0x80
 80030fa:	d169      	bne.n	80031d0 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	799b      	ldrb	r3, [r3, #6]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d111      	bne.n	8003128 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	334d      	adds	r3, #77	@ 0x4d
 8003114:	2207      	movs	r2, #7
 8003116:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f003 fa48 	bl	80065b6 <USB_HC_Halt>
 8003126:	e049      	b.n	80031bc <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	3344      	adds	r3, #68	@ 0x44
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	1c59      	adds	r1, r3, #1
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4403      	add	r3, r0
 8003148:	3344      	adds	r3, #68	@ 0x44
 800314a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	3344      	adds	r3, #68	@ 0x44
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d922      	bls.n	80031a8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	3344      	adds	r3, #68	@ 0x44
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	334c      	adds	r3, #76	@ 0x4c
 8003186:	2204      	movs	r2, #4
 8003188:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	334c      	adds	r3, #76	@ 0x4c
 800319a:	781a      	ldrb	r2, [r3, #0]
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f008 ff91 	bl	800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031a6:	e009      	b.n	80031bc <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	334c      	adds	r3, #76	@ 0x4c
 80031b8:	2202      	movs	r2, #2
 80031ba:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031c8:	461a      	mov	r2, r3
 80031ca:	2380      	movs	r3, #128	@ 0x80
 80031cc:	6093      	str	r3, [r2, #8]
 80031ce:	e217      	b.n	8003600 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f002 fc48 	bl	8005a6e <USB_ReadChInterrupts>
 80031de:	4603      	mov	r3, r0
 80031e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e8:	d11b      	bne.n	8003222 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	334d      	adds	r3, #77	@ 0x4d
 80031fa:	2209      	movs	r2, #9
 80031fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f003 f9d5 	bl	80065b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003218:	461a      	mov	r2, r3
 800321a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800321e:	6093      	str	r3, [r2, #8]
 8003220:	e1ee      	b.n	8003600 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f002 fc1f 	bl	8005a6e <USB_ReadChInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b02      	cmp	r3, #2
 8003238:	f040 81df 	bne.w	80035fa <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003248:	461a      	mov	r2, r3
 800324a:	2302      	movs	r3, #2
 800324c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	334d      	adds	r3, #77	@ 0x4d
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	f040 8093 	bne.w	800338c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	334d      	adds	r3, #77	@ 0x4d
 8003276:	2202      	movs	r2, #2
 8003278:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	334c      	adds	r3, #76	@ 0x4c
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	3326      	adds	r3, #38	@ 0x26
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d00b      	beq.n	80032bc <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	3326      	adds	r3, #38	@ 0x26
 80032b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	f040 8190 	bne.w	80035dc <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	799b      	ldrb	r3, [r3, #6]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d115      	bne.n	80032f0 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	333d      	adds	r3, #61	@ 0x3d
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	f083 0301 	eor.w	r3, r3, #1
 80032dc:	b2d8      	uxtb	r0, r3
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	333d      	adds	r3, #61	@ 0x3d
 80032ec:	4602      	mov	r2, r0
 80032ee:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	799b      	ldrb	r3, [r3, #6]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	f040 8171 	bne.w	80035dc <HCD_HC_OUT_IRQHandler+0x920>
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	3334      	adds	r3, #52	@ 0x34
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8165 	beq.w	80035dc <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	3334      	adds	r3, #52	@ 0x34
 8003322:	6819      	ldr	r1, [r3, #0]
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4403      	add	r3, r0
 8003332:	3328      	adds	r3, #40	@ 0x28
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	440b      	add	r3, r1
 8003338:	1e59      	subs	r1, r3, #1
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4403      	add	r3, r0
 8003348:	3328      	adds	r3, #40	@ 0x28
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003350:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 813f 	beq.w	80035dc <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	333d      	adds	r3, #61	@ 0x3d
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	f083 0301 	eor.w	r3, r3, #1
 8003376:	b2d8      	uxtb	r0, r3
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	333d      	adds	r3, #61	@ 0x3d
 8003386:	4602      	mov	r2, r0
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	e127      	b.n	80035dc <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	334d      	adds	r3, #77	@ 0x4d
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d120      	bne.n	80033e4 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	334d      	adds	r3, #77	@ 0x4d
 80033b2:	2202      	movs	r2, #2
 80033b4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	331b      	adds	r3, #27
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f040 8107 	bne.w	80035dc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	334c      	adds	r3, #76	@ 0x4c
 80033de:	2202      	movs	r2, #2
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e0fb      	b.n	80035dc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	334d      	adds	r3, #77	@ 0x4d
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d13a      	bne.n	8003470 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	334d      	adds	r3, #77	@ 0x4d
 800340a:	2202      	movs	r2, #2
 800340c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	334c      	adds	r3, #76	@ 0x4c
 800341e:	2202      	movs	r2, #2
 8003420:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	331b      	adds	r3, #27
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	f040 80d1 	bne.w	80035dc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	331b      	adds	r3, #27
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4413      	add	r3, r2
 8003456:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	0151      	lsls	r1, r2, #5
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	440a      	add	r2, r1
 8003464:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800346c:	6053      	str	r3, [r2, #4]
 800346e:	e0b5      	b.n	80035dc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334d      	adds	r3, #77	@ 0x4d
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b05      	cmp	r3, #5
 8003484:	d114      	bne.n	80034b0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	334d      	adds	r3, #77	@ 0x4d
 8003496:	2202      	movs	r2, #2
 8003498:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	334c      	adds	r3, #76	@ 0x4c
 80034aa:	2202      	movs	r2, #2
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e095      	b.n	80035dc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	334d      	adds	r3, #77	@ 0x4d
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d114      	bne.n	80034f0 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	334d      	adds	r3, #77	@ 0x4d
 80034d6:	2202      	movs	r2, #2
 80034d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	334c      	adds	r3, #76	@ 0x4c
 80034ea:	2205      	movs	r2, #5
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	e075      	b.n	80035dc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	334d      	adds	r3, #77	@ 0x4d
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b07      	cmp	r3, #7
 8003504:	d00a      	beq.n	800351c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	334d      	adds	r3, #77	@ 0x4d
 8003516:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003518:	2b09      	cmp	r3, #9
 800351a:	d170      	bne.n	80035fe <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	334d      	adds	r3, #77	@ 0x4d
 800352c:	2202      	movs	r2, #2
 800352e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	3344      	adds	r3, #68	@ 0x44
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	1c59      	adds	r1, r3, #1
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4403      	add	r3, r0
 8003550:	3344      	adds	r3, #68	@ 0x44
 8003552:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	3344      	adds	r3, #68	@ 0x44
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d914      	bls.n	8003594 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	3344      	adds	r3, #68	@ 0x44
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	334c      	adds	r3, #76	@ 0x4c
 800358e:	2204      	movs	r2, #4
 8003590:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003592:	e022      	b.n	80035da <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003594:	78fa      	ldrb	r2, [r7, #3]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	334c      	adds	r3, #76	@ 0x4c
 80035a4:	2202      	movs	r2, #2
 80035a6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035be:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035c6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035d4:	461a      	mov	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035da:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	334c      	adds	r3, #76	@ 0x4c
 80035ec:	781a      	ldrb	r2, [r3, #0]
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	4619      	mov	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f008 fd68 	bl	800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035f8:	e002      	b.n	8003600 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80035fa:	bf00      	nop
 80035fc:	e000      	b.n	8003600 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80035fe:	bf00      	nop
  }
}
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b08a      	sub	sp, #40	@ 0x28
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	0c5b      	lsrs	r3, r3, #17
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800363a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d004      	beq.n	800364c <HCD_RXQLVL_IRQHandler+0x46>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b05      	cmp	r3, #5
 8003646:	f000 80b6 	beq.w	80037b6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800364a:	e0b7      	b.n	80037bc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80b3 	beq.w	80037ba <HCD_RXQLVL_IRQHandler+0x1b4>
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	332c      	adds	r3, #44	@ 0x2c
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80a7 	beq.w	80037ba <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3338      	adds	r3, #56	@ 0x38
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	18d1      	adds	r1, r2, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4613      	mov	r3, r2
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4403      	add	r3, r0
 8003690:	3334      	adds	r3, #52	@ 0x34
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4299      	cmp	r1, r3
 8003696:	f200 8083 	bhi.w	80037a0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4613      	mov	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	332c      	adds	r3, #44	@ 0x2c
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	b292      	uxth	r2, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	f002 f96f 	bl	8005998 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4613      	mov	r3, r2
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	332c      	adds	r3, #44	@ 0x2c
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	18d1      	adds	r1, r2, r3
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4613      	mov	r3, r2
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4403      	add	r3, r0
 80036de:	332c      	adds	r3, #44	@ 0x2c
 80036e0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4613      	mov	r3, r2
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	3338      	adds	r3, #56	@ 0x38
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	18d1      	adds	r1, r2, r3
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4613      	mov	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4403      	add	r3, r0
 8003706:	3338      	adds	r3, #56	@ 0x38
 8003708:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	4413      	add	r3, r2
 8003712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	0cdb      	lsrs	r3, r3, #19
 800371a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800371e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	3328      	adds	r3, #40	@ 0x28
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4293      	cmp	r3, r2
 8003738:	d13f      	bne.n	80037ba <HCD_RXQLVL_IRQHandler+0x1b4>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d03c      	beq.n	80037ba <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	4413      	add	r3, r2
 8003748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003756:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800375e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	4413      	add	r3, r2
 8003768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800376c:	461a      	mov	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	333c      	adds	r3, #60	@ 0x3c
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	f083 0301 	eor.w	r3, r3, #1
 8003788:	b2d8      	uxtb	r0, r3
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	333c      	adds	r3, #60	@ 0x3c
 800379a:	4602      	mov	r2, r0
 800379c:	701a      	strb	r2, [r3, #0]
      break;
 800379e:	e00c      	b.n	80037ba <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	334c      	adds	r3, #76	@ 0x4c
 80037b0:	2204      	movs	r2, #4
 80037b2:	701a      	strb	r2, [r3, #0]
      break;
 80037b4:	e001      	b.n	80037ba <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80037ba:	bf00      	nop
  }
}
 80037bc:	bf00      	nop
 80037be:	3728      	adds	r7, #40	@ 0x28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80037f0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d10b      	bne.n	8003814 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d102      	bne.n	800380c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f008 fc42 	bl	800c090 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f043 0302 	orr.w	r3, r3, #2
 8003812:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b08      	cmp	r3, #8
 800381c:	d132      	bne.n	8003884 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f043 0308 	orr.w	r3, r3, #8
 8003824:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b04      	cmp	r3, #4
 800382e:	d126      	bne.n	800387e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7a5b      	ldrb	r3, [r3, #9]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d113      	bne.n	8003860 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800383e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003842:	d106      	bne.n	8003852 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2102      	movs	r1, #2
 800384a:	4618      	mov	r0, r3
 800384c:	f002 fa34 	bl	8005cb8 <USB_InitFSLSPClkSel>
 8003850:	e011      	b.n	8003876 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2101      	movs	r1, #1
 8003858:	4618      	mov	r0, r3
 800385a:	f002 fa2d 	bl	8005cb8 <USB_InitFSLSPClkSel>
 800385e:	e00a      	b.n	8003876 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	79db      	ldrb	r3, [r3, #7]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d106      	bne.n	8003876 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800386e:	461a      	mov	r2, r3
 8003870:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003874:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f008 fc38 	bl	800c0ec <HAL_HCD_PortEnabled_Callback>
 800387c:	e002      	b.n	8003884 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f008 fc42 	bl	800c108 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b20      	cmp	r3, #32
 800388c:	d103      	bne.n	8003896 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f043 0320 	orr.w	r3, r3, #32
 8003894:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800389c:	461a      	mov	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	6013      	str	r3, [r2, #0]
}
 80038a2:	bf00      	nop
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e12b      	b.n	8003b16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fd f952 	bl	8000b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2224      	movs	r2, #36	@ 0x24
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800390e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003910:	f001 fa20 	bl	8004d54 <HAL_RCC_GetPCLK1Freq>
 8003914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4a81      	ldr	r2, [pc, #516]	@ (8003b20 <HAL_I2C_Init+0x274>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d807      	bhi.n	8003930 <HAL_I2C_Init+0x84>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a80      	ldr	r2, [pc, #512]	@ (8003b24 <HAL_I2C_Init+0x278>)
 8003924:	4293      	cmp	r3, r2
 8003926:	bf94      	ite	ls
 8003928:	2301      	movls	r3, #1
 800392a:	2300      	movhi	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e006      	b.n	800393e <HAL_I2C_Init+0x92>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a7d      	ldr	r2, [pc, #500]	@ (8003b28 <HAL_I2C_Init+0x27c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	bf94      	ite	ls
 8003938:	2301      	movls	r3, #1
 800393a:	2300      	movhi	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e0e7      	b.n	8003b16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a78      	ldr	r2, [pc, #480]	@ (8003b2c <HAL_I2C_Init+0x280>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	0c9b      	lsrs	r3, r3, #18
 8003950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4a6a      	ldr	r2, [pc, #424]	@ (8003b20 <HAL_I2C_Init+0x274>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d802      	bhi.n	8003980 <HAL_I2C_Init+0xd4>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	3301      	adds	r3, #1
 800397e:	e009      	b.n	8003994 <HAL_I2C_Init+0xe8>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	4a69      	ldr	r2, [pc, #420]	@ (8003b30 <HAL_I2C_Init+0x284>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	3301      	adds	r3, #1
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	430b      	orrs	r3, r1
 800399a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	495c      	ldr	r1, [pc, #368]	@ (8003b20 <HAL_I2C_Init+0x274>)
 80039b0:	428b      	cmp	r3, r1
 80039b2:	d819      	bhi.n	80039e8 <HAL_I2C_Init+0x13c>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1e59      	subs	r1, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	fbb1 f3f3 	udiv	r3, r1, r3
 80039c2:	1c59      	adds	r1, r3, #1
 80039c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039c8:	400b      	ands	r3, r1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_I2C_Init+0x138>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1e59      	subs	r1, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e2:	e051      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 80039e4:	2304      	movs	r3, #4
 80039e6:	e04f      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d111      	bne.n	8003a14 <HAL_I2C_Init+0x168>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1e58      	subs	r0, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	440b      	add	r3, r1
 80039fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a02:	3301      	adds	r3, #1
 8003a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e012      	b.n	8003a3a <HAL_I2C_Init+0x18e>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1e58      	subs	r0, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6859      	ldr	r1, [r3, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	0099      	lsls	r1, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_Init+0x196>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e022      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10e      	bne.n	8003a68 <HAL_I2C_Init+0x1bc>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1e58      	subs	r0, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6859      	ldr	r1, [r3, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	440b      	add	r3, r1
 8003a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a66:	e00f      	b.n	8003a88 <HAL_I2C_Init+0x1dc>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1e58      	subs	r0, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	0099      	lsls	r1, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	6809      	ldr	r1, [r1, #0]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69da      	ldr	r2, [r3, #28]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ab6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6911      	ldr	r1, [r2, #16]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68d2      	ldr	r2, [r2, #12]
 8003ac2:	4311      	orrs	r1, r2
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	000186a0 	.word	0x000186a0
 8003b24:	001e847f 	.word	0x001e847f
 8003b28:	003d08ff 	.word	0x003d08ff
 8003b2c:	431bde83 	.word	0x431bde83
 8003b30:	10624dd3 	.word	0x10624dd3

08003b34 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e128      	b.n	8003d98 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a90      	ldr	r2, [pc, #576]	@ (8003da0 <HAL_I2S_Init+0x26c>)
 8003b5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7fd f853 	bl	8000c0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b7c:	f023 030f 	bic.w	r3, r3, #15
 8003b80:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2202      	movs	r2, #2
 8003b88:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d060      	beq.n	8003c54 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d102      	bne.n	8003ba0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b9a:	2310      	movs	r3, #16
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e001      	b.n	8003ba4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ba0:	2320      	movs	r3, #32
 8003ba2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d802      	bhi.n	8003bb2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	f001 f9f6 	bl	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bb8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc2:	d125      	bne.n	8003c10 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d010      	beq.n	8003bee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	461a      	mov	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be8:	3305      	adds	r3, #5
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	e01f      	b.n	8003c2e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	461a      	mov	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	3305      	adds	r3, #5
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	e00e      	b.n	8003c2e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	461a      	mov	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2a:	3305      	adds	r3, #5
 8003c2c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4a5c      	ldr	r2, [pc, #368]	@ (8003da4 <HAL_I2S_Init+0x270>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	08db      	lsrs	r3, r3, #3
 8003c38:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e003      	b.n	8003c5c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003c54:	2302      	movs	r3, #2
 8003c56:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d902      	bls.n	8003c68 <HAL_I2S_Init+0x134>
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	2bff      	cmp	r3, #255	@ 0xff
 8003c66:	d907      	bls.n	8003c78 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6c:	f043 0210 	orr.w	r2, r3, #16
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e08f      	b.n	8003d98 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	ea42 0103 	orr.w	r1, r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c96:	f023 030f 	bic.w	r3, r3, #15
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6851      	ldr	r1, [r2, #4]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6892      	ldr	r2, [r2, #8]
 8003ca2:	4311      	orrs	r1, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68d2      	ldr	r2, [r2, #12]
 8003ca8:	4311      	orrs	r1, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6992      	ldr	r2, [r2, #24]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d161      	bne.n	8003d88 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a38      	ldr	r2, [pc, #224]	@ (8003da8 <HAL_I2S_Init+0x274>)
 8003cc8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a37      	ldr	r2, [pc, #220]	@ (8003dac <HAL_I2S_Init+0x278>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d101      	bne.n	8003cd8 <HAL_I2S_Init+0x1a4>
 8003cd4:	4b36      	ldr	r3, [pc, #216]	@ (8003db0 <HAL_I2S_Init+0x27c>)
 8003cd6:	e001      	b.n	8003cdc <HAL_I2S_Init+0x1a8>
 8003cd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	4932      	ldr	r1, [pc, #200]	@ (8003dac <HAL_I2S_Init+0x278>)
 8003ce4:	428a      	cmp	r2, r1
 8003ce6:	d101      	bne.n	8003cec <HAL_I2S_Init+0x1b8>
 8003ce8:	4a31      	ldr	r2, [pc, #196]	@ (8003db0 <HAL_I2S_Init+0x27c>)
 8003cea:	e001      	b.n	8003cf0 <HAL_I2S_Init+0x1bc>
 8003cec:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003cf0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003cf4:	f023 030f 	bic.w	r3, r3, #15
 8003cf8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8003dac <HAL_I2S_Init+0x278>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d101      	bne.n	8003d08 <HAL_I2S_Init+0x1d4>
 8003d04:	4b2a      	ldr	r3, [pc, #168]	@ (8003db0 <HAL_I2S_Init+0x27c>)
 8003d06:	e001      	b.n	8003d0c <HAL_I2S_Init+0x1d8>
 8003d08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a25      	ldr	r2, [pc, #148]	@ (8003dac <HAL_I2S_Init+0x278>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d101      	bne.n	8003d1e <HAL_I2S_Init+0x1ea>
 8003d1a:	4b25      	ldr	r3, [pc, #148]	@ (8003db0 <HAL_I2S_Init+0x27c>)
 8003d1c:	e001      	b.n	8003d22 <HAL_I2S_Init+0x1ee>
 8003d1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d2e:	d003      	beq.n	8003d38 <HAL_I2S_Init+0x204>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d103      	bne.n	8003d40 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	e001      	b.n	8003d44 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d62:	4313      	orrs	r3, r2
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	897b      	ldrh	r3, [r7, #10]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d70:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a0d      	ldr	r2, [pc, #52]	@ (8003dac <HAL_I2S_Init+0x278>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d101      	bne.n	8003d80 <HAL_I2S_Init+0x24c>
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003db0 <HAL_I2S_Init+0x27c>)
 8003d7e:	e001      	b.n	8003d84 <HAL_I2S_Init+0x250>
 8003d80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d84:	897a      	ldrh	r2, [r7, #10]
 8003d86:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3720      	adds	r7, #32
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	08003eab 	.word	0x08003eab
 8003da4:	cccccccd 	.word	0xcccccccd
 8003da8:	08003fc1 	.word	0x08003fc1
 8003dac:	40003800 	.word	0x40003800
 8003db0:	40003400 	.word	0x40003400

08003db4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	881a      	ldrh	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	1c9a      	adds	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10e      	bne.n	8003e44 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e34:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff ffb8 	bl	8003db4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5e:	b292      	uxth	r2, r2
 8003e60:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e66:	1c9a      	adds	r2, r3, #2
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10e      	bne.n	8003ea2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e92:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff ff93 	bl	8003dc8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d13a      	bne.n	8003f3c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d109      	bne.n	8003ee4 <I2S_IRQHandler+0x3a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eda:	2b40      	cmp	r3, #64	@ 0x40
 8003edc:	d102      	bne.n	8003ee4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ffb4 	bl	8003e4c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eea:	2b40      	cmp	r3, #64	@ 0x40
 8003eec:	d126      	bne.n	8003f3c <I2S_IRQHandler+0x92>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d11f      	bne.n	8003f3c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	f043 0202 	orr.w	r2, r3, #2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff ff50 	bl	8003ddc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d136      	bne.n	8003fb6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d109      	bne.n	8003f66 <I2S_IRQHandler+0xbc>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f5c:	2b80      	cmp	r3, #128	@ 0x80
 8003f5e:	d102      	bne.n	8003f66 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ff45 	bl	8003df0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d122      	bne.n	8003fb6 <I2S_IRQHandler+0x10c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d11b      	bne.n	8003fb6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f8c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa8:	f043 0204 	orr.w	r2, r3, #4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff ff13 	bl	8003ddc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fb6:	bf00      	nop
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a92      	ldr	r2, [pc, #584]	@ (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d101      	bne.n	8003fde <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003fda:	4b92      	ldr	r3, [pc, #584]	@ (8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fdc:	e001      	b.n	8003fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003fde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a8b      	ldr	r2, [pc, #556]	@ (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ff8:	4b8a      	ldr	r3, [pc, #552]	@ (8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ffa:	e001      	b.n	8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ffc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800400c:	d004      	beq.n	8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f040 8099 	bne.w	800414a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b02      	cmp	r3, #2
 8004020:	d107      	bne.n	8004032 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f925 	bl	800427c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b01      	cmp	r3, #1
 800403a:	d107      	bne.n	800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f9c8 	bl	80043dc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004052:	2b40      	cmp	r3, #64	@ 0x40
 8004054:	d13a      	bne.n	80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d035      	beq.n	80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a6e      	ldr	r2, [pc, #440]	@ (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800406a:	4b6e      	ldr	r3, [pc, #440]	@ (8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800406c:	e001      	b.n	8004072 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800406e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4969      	ldr	r1, [pc, #420]	@ (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800407a:	428b      	cmp	r3, r1
 800407c:	d101      	bne.n	8004082 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800407e:	4b69      	ldr	r3, [pc, #420]	@ (8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004080:	e001      	b.n	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004082:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004086:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800408a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800409a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040be:	f043 0202 	orr.w	r2, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fe88 	bl	8003ddc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	f040 80c3 	bne.w	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80bd 	beq.w	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a49      	ldr	r2, [pc, #292]	@ (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80040fe:	4b49      	ldr	r3, [pc, #292]	@ (8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004100:	e001      	b.n	8004106 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004102:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4944      	ldr	r1, [pc, #272]	@ (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800410e:	428b      	cmp	r3, r1
 8004110:	d101      	bne.n	8004116 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004112:	4b44      	ldr	r3, [pc, #272]	@ (8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004114:	e001      	b.n	800411a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004116:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800411a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800411e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004120:	2300      	movs	r3, #0
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413a:	f043 0204 	orr.w	r2, r3, #4
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff fe4a 	bl	8003ddc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004148:	e089      	b.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b02      	cmp	r3, #2
 8004152:	d107      	bne.n	8004164 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f8be 	bl	80042e0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d107      	bne.n	800417e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f8fd 	bl	8004378 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004184:	2b40      	cmp	r3, #64	@ 0x40
 8004186:	d12f      	bne.n	80041e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d02a      	beq.n	80041e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d101      	bne.n	80041b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80041ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041ae:	e001      	b.n	80041b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80041b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4919      	ldr	r1, [pc, #100]	@ (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041bc:	428b      	cmp	r3, r1
 80041be:	d101      	bne.n	80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80041c0:	4b18      	ldr	r3, [pc, #96]	@ (8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041c2:	e001      	b.n	80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80041c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041da:	f043 0202 	orr.w	r2, r3, #2
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff fdfa 	bl	8003ddc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d136      	bne.n	8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d031      	beq.n	8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a07      	ldr	r2, [pc, #28]	@ (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d101      	bne.n	800420a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004206:	4b07      	ldr	r3, [pc, #28]	@ (8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004208:	e001      	b.n	800420e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800420a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4902      	ldr	r1, [pc, #8]	@ (8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004216:	428b      	cmp	r3, r1
 8004218:	d106      	bne.n	8004228 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800421a:	4b02      	ldr	r3, [pc, #8]	@ (8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800421c:	e006      	b.n	800422c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800421e:	bf00      	nop
 8004220:	40003800 	.word	0x40003800
 8004224:	40003400 	.word	0x40003400
 8004228:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800422c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004230:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004240:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424e:	f043 0204 	orr.w	r2, r3, #4
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff fdc0 	bl	8003ddc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800425c:	e000      	b.n	8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800425e:	bf00      	nop
}
 8004260:	bf00      	nop
 8004262:	3720      	adds	r7, #32
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	1c99      	adds	r1, r3, #2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6251      	str	r1, [r2, #36]	@ 0x24
 800428e:	881a      	ldrh	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d113      	bne.n	80042d6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d106      	bne.n	80042d6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ffc9 	bl	8004268 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	1c99      	adds	r1, r3, #2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6251      	str	r1, [r2, #36]	@ 0x24
 80042f2:	8819      	ldrh	r1, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004370 <I2SEx_TxISR_I2SExt+0x90>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d101      	bne.n	8004302 <I2SEx_TxISR_I2SExt+0x22>
 80042fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004374 <I2SEx_TxISR_I2SExt+0x94>)
 8004300:	e001      	b.n	8004306 <I2SEx_TxISR_I2SExt+0x26>
 8004302:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004306:	460a      	mov	r2, r1
 8004308:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d121      	bne.n	8004366 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a12      	ldr	r2, [pc, #72]	@ (8004370 <I2SEx_TxISR_I2SExt+0x90>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d101      	bne.n	8004330 <I2SEx_TxISR_I2SExt+0x50>
 800432c:	4b11      	ldr	r3, [pc, #68]	@ (8004374 <I2SEx_TxISR_I2SExt+0x94>)
 800432e:	e001      	b.n	8004334 <I2SEx_TxISR_I2SExt+0x54>
 8004330:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	490d      	ldr	r1, [pc, #52]	@ (8004370 <I2SEx_TxISR_I2SExt+0x90>)
 800433c:	428b      	cmp	r3, r1
 800433e:	d101      	bne.n	8004344 <I2SEx_TxISR_I2SExt+0x64>
 8004340:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <I2SEx_TxISR_I2SExt+0x94>)
 8004342:	e001      	b.n	8004348 <I2SEx_TxISR_I2SExt+0x68>
 8004344:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004348:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800434c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff ff81 	bl	8004268 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40003800 	.word	0x40003800
 8004374:	40003400 	.word	0x40003400

08004378 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68d8      	ldr	r0, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	1c99      	adds	r1, r3, #2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004390:	b282      	uxth	r2, r0
 8004392:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d113      	bne.n	80043d4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043ba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff ff4a 	bl	8004268 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a20      	ldr	r2, [pc, #128]	@ (800446c <I2SEx_RxISR_I2SExt+0x90>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d101      	bne.n	80043f2 <I2SEx_RxISR_I2SExt+0x16>
 80043ee:	4b20      	ldr	r3, [pc, #128]	@ (8004470 <I2SEx_RxISR_I2SExt+0x94>)
 80043f0:	e001      	b.n	80043f6 <I2SEx_RxISR_I2SExt+0x1a>
 80043f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043f6:	68d8      	ldr	r0, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	1c99      	adds	r1, r3, #2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004402:	b282      	uxth	r2, r0
 8004404:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d121      	bne.n	8004462 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a12      	ldr	r2, [pc, #72]	@ (800446c <I2SEx_RxISR_I2SExt+0x90>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d101      	bne.n	800442c <I2SEx_RxISR_I2SExt+0x50>
 8004428:	4b11      	ldr	r3, [pc, #68]	@ (8004470 <I2SEx_RxISR_I2SExt+0x94>)
 800442a:	e001      	b.n	8004430 <I2SEx_RxISR_I2SExt+0x54>
 800442c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	490d      	ldr	r1, [pc, #52]	@ (800446c <I2SEx_RxISR_I2SExt+0x90>)
 8004438:	428b      	cmp	r3, r1
 800443a:	d101      	bne.n	8004440 <I2SEx_RxISR_I2SExt+0x64>
 800443c:	4b0c      	ldr	r3, [pc, #48]	@ (8004470 <I2SEx_RxISR_I2SExt+0x94>)
 800443e:	e001      	b.n	8004444 <I2SEx_RxISR_I2SExt+0x68>
 8004440:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004444:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004448:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ff03 	bl	8004268 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40003800 	.word	0x40003800
 8004470:	40003400 	.word	0x40003400

08004474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e267      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d075      	beq.n	800457e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004492:	4b88      	ldr	r3, [pc, #544]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b04      	cmp	r3, #4
 800449c:	d00c      	beq.n	80044b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800449e:	4b85      	ldr	r3, [pc, #532]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d112      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044aa:	4b82      	ldr	r3, [pc, #520]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044b6:	d10b      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	4b7e      	ldr	r3, [pc, #504]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05b      	beq.n	800457c <HAL_RCC_OscConfig+0x108>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d157      	bne.n	800457c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e242      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d8:	d106      	bne.n	80044e8 <HAL_RCC_OscConfig+0x74>
 80044da:	4b76      	ldr	r3, [pc, #472]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a75      	ldr	r2, [pc, #468]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e01d      	b.n	8004524 <HAL_RCC_OscConfig+0xb0>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x98>
 80044f2:	4b70      	ldr	r3, [pc, #448]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a6f      	ldr	r2, [pc, #444]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b6d      	ldr	r3, [pc, #436]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a6c      	ldr	r2, [pc, #432]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0xb0>
 800450c:	4b69      	ldr	r3, [pc, #420]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a68      	ldr	r2, [pc, #416]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	4b66      	ldr	r3, [pc, #408]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a65      	ldr	r2, [pc, #404]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 800451e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d013      	beq.n	8004554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fc fddc 	bl	80010e8 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004534:	f7fc fdd8 	bl	80010e8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	@ 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e207      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	4b5b      	ldr	r3, [pc, #364]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0xc0>
 8004552:	e014      	b.n	800457e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fc fdc8 	bl	80010e8 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800455c:	f7fc fdc4 	bl	80010e8 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	@ 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e1f3      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456e:	4b51      	ldr	r3, [pc, #324]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0xe8>
 800457a:	e000      	b.n	800457e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d063      	beq.n	8004652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800458a:	4b4a      	ldr	r3, [pc, #296]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004596:	4b47      	ldr	r3, [pc, #284]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d11c      	bne.n	80045dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045a2:	4b44      	ldr	r3, [pc, #272]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d116      	bne.n	80045dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ae:	4b41      	ldr	r3, [pc, #260]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_RCC_OscConfig+0x152>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e1c7      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c6:	4b3b      	ldr	r3, [pc, #236]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	4937      	ldr	r1, [pc, #220]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045da:	e03a      	b.n	8004652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d020      	beq.n	8004626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e4:	4b34      	ldr	r3, [pc, #208]	@ (80046b8 <HAL_RCC_OscConfig+0x244>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fc fd7d 	bl	80010e8 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f2:	f7fc fd79 	bl	80010e8 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e1a8      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004604:	4b2b      	ldr	r3, [pc, #172]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004610:	4b28      	ldr	r3, [pc, #160]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4925      	ldr	r1, [pc, #148]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]
 8004624:	e015      	b.n	8004652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004626:	4b24      	ldr	r3, [pc, #144]	@ (80046b8 <HAL_RCC_OscConfig+0x244>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fc fd5c 	bl	80010e8 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004634:	f7fc fd58 	bl	80010e8 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e187      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004646:	4b1b      	ldr	r3, [pc, #108]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d036      	beq.n	80046cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004666:	4b15      	ldr	r3, [pc, #84]	@ (80046bc <HAL_RCC_OscConfig+0x248>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fc fd3c 	bl	80010e8 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004674:	f7fc fd38 	bl	80010e8 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e167      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004686:	4b0b      	ldr	r3, [pc, #44]	@ (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0x200>
 8004692:	e01b      	b.n	80046cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004694:	4b09      	ldr	r3, [pc, #36]	@ (80046bc <HAL_RCC_OscConfig+0x248>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469a:	f7fc fd25 	bl	80010e8 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a0:	e00e      	b.n	80046c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a2:	f7fc fd21 	bl	80010e8 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d907      	bls.n	80046c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e150      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
 80046b4:	40023800 	.word	0x40023800
 80046b8:	42470000 	.word	0x42470000
 80046bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c0:	4b88      	ldr	r3, [pc, #544]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1ea      	bne.n	80046a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 8097 	beq.w	8004808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046da:	2300      	movs	r3, #0
 80046dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046de:	4b81      	ldr	r3, [pc, #516]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10f      	bne.n	800470a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ea:	2300      	movs	r3, #0
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	4b7d      	ldr	r3, [pc, #500]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	4a7c      	ldr	r2, [pc, #496]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046fa:	4b7a      	ldr	r3, [pc, #488]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470a:	4b77      	ldr	r3, [pc, #476]	@ (80048e8 <HAL_RCC_OscConfig+0x474>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d118      	bne.n	8004748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004716:	4b74      	ldr	r3, [pc, #464]	@ (80048e8 <HAL_RCC_OscConfig+0x474>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a73      	ldr	r2, [pc, #460]	@ (80048e8 <HAL_RCC_OscConfig+0x474>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004722:	f7fc fce1 	bl	80010e8 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472a:	f7fc fcdd 	bl	80010e8 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e10c      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473c:	4b6a      	ldr	r3, [pc, #424]	@ (80048e8 <HAL_RCC_OscConfig+0x474>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d106      	bne.n	800475e <HAL_RCC_OscConfig+0x2ea>
 8004750:	4b64      	ldr	r3, [pc, #400]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004754:	4a63      	ldr	r2, [pc, #396]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6713      	str	r3, [r2, #112]	@ 0x70
 800475c:	e01c      	b.n	8004798 <HAL_RCC_OscConfig+0x324>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b05      	cmp	r3, #5
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0x30c>
 8004766:	4b5f      	ldr	r3, [pc, #380]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476a:	4a5e      	ldr	r2, [pc, #376]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 800476c:	f043 0304 	orr.w	r3, r3, #4
 8004770:	6713      	str	r3, [r2, #112]	@ 0x70
 8004772:	4b5c      	ldr	r3, [pc, #368]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004776:	4a5b      	ldr	r2, [pc, #364]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	6713      	str	r3, [r2, #112]	@ 0x70
 800477e:	e00b      	b.n	8004798 <HAL_RCC_OscConfig+0x324>
 8004780:	4b58      	ldr	r3, [pc, #352]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004784:	4a57      	ldr	r2, [pc, #348]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	6713      	str	r3, [r2, #112]	@ 0x70
 800478c:	4b55      	ldr	r3, [pc, #340]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004790:	4a54      	ldr	r2, [pc, #336]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004792:	f023 0304 	bic.w	r3, r3, #4
 8004796:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d015      	beq.n	80047cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a0:	f7fc fca2 	bl	80010e8 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a6:	e00a      	b.n	80047be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a8:	f7fc fc9e 	bl	80010e8 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e0cb      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047be:	4b49      	ldr	r3, [pc, #292]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0ee      	beq.n	80047a8 <HAL_RCC_OscConfig+0x334>
 80047ca:	e014      	b.n	80047f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047cc:	f7fc fc8c 	bl	80010e8 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fc fc88 	bl	80010e8 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0b5      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ea:	4b3e      	ldr	r3, [pc, #248]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ee      	bne.n	80047d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fc:	4b39      	ldr	r3, [pc, #228]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	4a38      	ldr	r2, [pc, #224]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004806:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80a1 	beq.w	8004954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004812:	4b34      	ldr	r3, [pc, #208]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b08      	cmp	r3, #8
 800481c:	d05c      	beq.n	80048d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d141      	bne.n	80048aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004826:	4b31      	ldr	r3, [pc, #196]	@ (80048ec <HAL_RCC_OscConfig+0x478>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482c:	f7fc fc5c 	bl	80010e8 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004834:	f7fc fc58 	bl	80010e8 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e087      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004846:	4b27      	ldr	r3, [pc, #156]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69da      	ldr	r2, [r3, #28]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	019b      	lsls	r3, r3, #6
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	3b01      	subs	r3, #1
 800486c:	041b      	lsls	r3, r3, #16
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004874:	061b      	lsls	r3, r3, #24
 8004876:	491b      	ldr	r1, [pc, #108]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004878:	4313      	orrs	r3, r2
 800487a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800487c:	4b1b      	ldr	r3, [pc, #108]	@ (80048ec <HAL_RCC_OscConfig+0x478>)
 800487e:	2201      	movs	r2, #1
 8004880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004882:	f7fc fc31 	bl	80010e8 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800488a:	f7fc fc2d 	bl	80010e8 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e05c      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800489c:	4b11      	ldr	r3, [pc, #68]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x416>
 80048a8:	e054      	b.n	8004954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048aa:	4b10      	ldr	r3, [pc, #64]	@ (80048ec <HAL_RCC_OscConfig+0x478>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7fc fc1a 	bl	80010e8 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b8:	f7fc fc16 	bl	80010e8 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e045      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ca:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <HAL_RCC_OscConfig+0x470>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x444>
 80048d6:	e03d      	b.n	8004954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d107      	bne.n	80048f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e038      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
 80048e4:	40023800 	.word	0x40023800
 80048e8:	40007000 	.word	0x40007000
 80048ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004960 <HAL_RCC_OscConfig+0x4ec>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d028      	beq.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d121      	bne.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004916:	429a      	cmp	r2, r3
 8004918:	d11a      	bne.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004920:	4013      	ands	r3, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004928:	4293      	cmp	r3, r2
 800492a:	d111      	bne.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	3b01      	subs	r3, #1
 800493a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d107      	bne.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800

08004964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0cc      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004978:	4b68      	ldr	r3, [pc, #416]	@ (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d90c      	bls.n	80049a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b65      	ldr	r3, [pc, #404]	@ (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b63      	ldr	r3, [pc, #396]	@ (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0b8      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d020      	beq.n	80049ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b8:	4b59      	ldr	r3, [pc, #356]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4a58      	ldr	r2, [pc, #352]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049d0:	4b53      	ldr	r3, [pc, #332]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	4a52      	ldr	r2, [pc, #328]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049dc:	4b50      	ldr	r3, [pc, #320]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	494d      	ldr	r1, [pc, #308]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d044      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d107      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	4b47      	ldr	r3, [pc, #284]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d119      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e07f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d003      	beq.n	8004a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d107      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a22:	4b3f      	ldr	r3, [pc, #252]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e06f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a32:	4b3b      	ldr	r3, [pc, #236]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e067      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a42:	4b37      	ldr	r3, [pc, #220]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f023 0203 	bic.w	r2, r3, #3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	4934      	ldr	r1, [pc, #208]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a54:	f7fc fb48 	bl	80010e8 <HAL_GetTick>
 8004a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a5c:	f7fc fb44 	bl	80010e8 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e04f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a72:	4b2b      	ldr	r3, [pc, #172]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 020c 	and.w	r2, r3, #12
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d1eb      	bne.n	8004a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a84:	4b25      	ldr	r3, [pc, #148]	@ (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d20c      	bcs.n	8004aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a92:	4b22      	ldr	r3, [pc, #136]	@ (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9a:	4b20      	ldr	r3, [pc, #128]	@ (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e032      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab8:	4b19      	ldr	r3, [pc, #100]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4916      	ldr	r1, [pc, #88]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ad6:	4b12      	ldr	r3, [pc, #72]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	490e      	ldr	r1, [pc, #56]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aea:	f000 f821 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 8004aee:	4602      	mov	r2, r0
 8004af0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	490a      	ldr	r1, [pc, #40]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c0>)
 8004afc:	5ccb      	ldrb	r3, [r1, r3]
 8004afe:	fa22 f303 	lsr.w	r3, r2, r3
 8004b02:	4a09      	ldr	r2, [pc, #36]	@ (8004b28 <HAL_RCC_ClockConfig+0x1c4>)
 8004b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b06:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fc f946 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40023c00 	.word	0x40023c00
 8004b20:	40023800 	.word	0x40023800
 8004b24:	0800d978 	.word	0x0800d978
 8004b28:	20000000 	.word	0x20000000
 8004b2c:	20000004 	.word	0x20000004

08004b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b34:	b094      	sub	sp, #80	@ 0x50
 8004b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b40:	2300      	movs	r3, #0
 8004b42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b48:	4b79      	ldr	r3, [pc, #484]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 030c 	and.w	r3, r3, #12
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d00d      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x40>
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	f200 80e1 	bhi.w	8004d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_RCC_GetSysClockFreq+0x34>
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d003      	beq.n	8004b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b62:	e0db      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b64:	4b73      	ldr	r3, [pc, #460]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b66:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004b68:	e0db      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b6a:	4b73      	ldr	r3, [pc, #460]	@ (8004d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b6e:	e0d8      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b70:	4b6f      	ldr	r3, [pc, #444]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b78:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d063      	beq.n	8004c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b86:	4b6a      	ldr	r3, [pc, #424]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ba2:	4622      	mov	r2, r4
 8004ba4:	462b      	mov	r3, r5
 8004ba6:	f04f 0000 	mov.w	r0, #0
 8004baa:	f04f 0100 	mov.w	r1, #0
 8004bae:	0159      	lsls	r1, r3, #5
 8004bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb4:	0150      	lsls	r0, r2, #5
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4621      	mov	r1, r4
 8004bbc:	1a51      	subs	r1, r2, r1
 8004bbe:	6139      	str	r1, [r7, #16]
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bd4:	4659      	mov	r1, fp
 8004bd6:	018b      	lsls	r3, r1, #6
 8004bd8:	4651      	mov	r1, sl
 8004bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bde:	4651      	mov	r1, sl
 8004be0:	018a      	lsls	r2, r1, #6
 8004be2:	4651      	mov	r1, sl
 8004be4:	ebb2 0801 	subs.w	r8, r2, r1
 8004be8:	4659      	mov	r1, fp
 8004bea:	eb63 0901 	sbc.w	r9, r3, r1
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c02:	4690      	mov	r8, r2
 8004c04:	4699      	mov	r9, r3
 8004c06:	4623      	mov	r3, r4
 8004c08:	eb18 0303 	adds.w	r3, r8, r3
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	462b      	mov	r3, r5
 8004c10:	eb49 0303 	adc.w	r3, r9, r3
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c22:	4629      	mov	r1, r5
 8004c24:	024b      	lsls	r3, r1, #9
 8004c26:	4621      	mov	r1, r4
 8004c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	024a      	lsls	r2, r1, #9
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c36:	2200      	movs	r2, #0
 8004c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c40:	f7fb fb16 	bl	8000270 <__aeabi_uldivmod>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4613      	mov	r3, r2
 8004c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c4c:	e058      	b.n	8004d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c4e:	4b38      	ldr	r3, [pc, #224]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	099b      	lsrs	r3, r3, #6
 8004c54:	2200      	movs	r2, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	4611      	mov	r1, r2
 8004c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c5e:	623b      	str	r3, [r7, #32]
 8004c60:	2300      	movs	r3, #0
 8004c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c68:	4642      	mov	r2, r8
 8004c6a:	464b      	mov	r3, r9
 8004c6c:	f04f 0000 	mov.w	r0, #0
 8004c70:	f04f 0100 	mov.w	r1, #0
 8004c74:	0159      	lsls	r1, r3, #5
 8004c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c7a:	0150      	lsls	r0, r2, #5
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4641      	mov	r1, r8
 8004c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c86:	4649      	mov	r1, r9
 8004c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	00eb      	lsls	r3, r5, #3
 8004cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cb6:	00e2      	lsls	r2, r4, #3
 8004cb8:	4614      	mov	r4, r2
 8004cba:	461d      	mov	r5, r3
 8004cbc:	4643      	mov	r3, r8
 8004cbe:	18e3      	adds	r3, r4, r3
 8004cc0:	603b      	str	r3, [r7, #0]
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	eb45 0303 	adc.w	r3, r5, r3
 8004cc8:	607b      	str	r3, [r7, #4]
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	028b      	lsls	r3, r1, #10
 8004cda:	4621      	mov	r1, r4
 8004cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	028a      	lsls	r2, r1, #10
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cea:	2200      	movs	r2, #0
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	61fa      	str	r2, [r7, #28]
 8004cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cf4:	f7fb fabc 	bl	8000270 <__aeabi_uldivmod>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d00:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	0c1b      	lsrs	r3, r3, #16
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004d10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d1a:	e002      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d1c:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3750      	adds	r7, #80	@ 0x50
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d2e:	bf00      	nop
 8004d30:	40023800 	.word	0x40023800
 8004d34:	00f42400 	.word	0x00f42400
 8004d38:	007a1200 	.word	0x007a1200

08004d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d40:	4b03      	ldr	r3, [pc, #12]	@ (8004d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d42:	681b      	ldr	r3, [r3, #0]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	20000000 	.word	0x20000000

08004d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d58:	f7ff fff0 	bl	8004d3c <HAL_RCC_GetHCLKFreq>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	0a9b      	lsrs	r3, r3, #10
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	4903      	ldr	r1, [pc, #12]	@ (8004d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d6a:	5ccb      	ldrb	r3, [r1, r3]
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40023800 	.word	0x40023800
 8004d78:	0800d988 	.word	0x0800d988

08004d7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	220f      	movs	r2, #15
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d8c:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 0203 	and.w	r2, r3, #3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d98:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004da4:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004db0:	4b09      	ldr	r3, [pc, #36]	@ (8004dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	08db      	lsrs	r3, r3, #3
 8004db6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dbe:	4b07      	ldr	r3, [pc, #28]	@ (8004ddc <HAL_RCC_GetClockConfig+0x60>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0207 	and.w	r2, r3, #7
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	601a      	str	r2, [r3, #0]
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	40023c00 	.word	0x40023c00

08004de0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d105      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d035      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e08:	4b62      	ldr	r3, [pc, #392]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e0e:	f7fc f96b 	bl	80010e8 <HAL_GetTick>
 8004e12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e16:	f7fc f967 	bl	80010e8 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e0b0      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e28:	4b5b      	ldr	r3, [pc, #364]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f0      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	019a      	lsls	r2, r3, #6
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	071b      	lsls	r3, r3, #28
 8004e40:	4955      	ldr	r1, [pc, #340]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e48:	4b52      	ldr	r3, [pc, #328]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e4e:	f7fc f94b 	bl	80010e8 <HAL_GetTick>
 8004e52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e54:	e008      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e56:	f7fc f947 	bl	80010e8 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e090      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e68:	4b4b      	ldr	r3, [pc, #300]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 8083 	beq.w	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	4b44      	ldr	r3, [pc, #272]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	4a43      	ldr	r2, [pc, #268]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e92:	4b41      	ldr	r3, [pc, #260]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e9e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a3e      	ldr	r2, [pc, #248]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004eaa:	f7fc f91d 	bl	80010e8 <HAL_GetTick>
 8004eae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004eb2:	f7fc f919 	bl	80010e8 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e062      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ec4:	4b35      	ldr	r3, [pc, #212]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ed0:	4b31      	ldr	r3, [pc, #196]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ed8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d02f      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d028      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eee:	4b2a      	ldr	r3, [pc, #168]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ef8:	4b29      	ldr	r3, [pc, #164]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004efe:	4b28      	ldr	r3, [pc, #160]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f04:	4a24      	ldr	r2, [pc, #144]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f0a:	4b23      	ldr	r3, [pc, #140]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d114      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f16:	f7fc f8e7 	bl	80010e8 <HAL_GetTick>
 8004f1a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1c:	e00a      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f1e:	f7fc f8e3 	bl	80010e8 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e02a      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f34:	4b18      	ldr	r3, [pc, #96]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0ee      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f4c:	d10d      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004f4e:	4b12      	ldr	r3, [pc, #72]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f62:	490d      	ldr	r1, [pc, #52]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	608b      	str	r3, [r1, #8]
 8004f68:	e005      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f70:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f74:	6093      	str	r3, [r2, #8]
 8004f76:	4b08      	ldr	r3, [pc, #32]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f82:	4905      	ldr	r1, [pc, #20]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	42470068 	.word	0x42470068
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	40007000 	.word	0x40007000
 8004fa0:	42470e40 	.word	0x42470e40

08004fa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d13f      	bne.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004fc2:	4b24      	ldr	r3, [pc, #144]	@ (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d006      	beq.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fd8:	d12f      	bne.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fda:	4b1f      	ldr	r3, [pc, #124]	@ (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fdc:	617b      	str	r3, [r7, #20]
          break;
 8004fde:	e02f      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fec:	d108      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004fee:	4b19      	ldr	r3, [pc, #100]	@ (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ff6:	4a19      	ldr	r2, [pc, #100]	@ (800505c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	e007      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005000:	4b14      	ldr	r3, [pc, #80]	@ (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005008:	4a15      	ldr	r2, [pc, #84]	@ (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800500a:	fbb2 f3f3 	udiv	r3, r2, r3
 800500e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005010:	4b10      	ldr	r3, [pc, #64]	@ (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005016:	099b      	lsrs	r3, r3, #6
 8005018:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	fb02 f303 	mul.w	r3, r2, r3
 8005022:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005024:	4b0b      	ldr	r3, [pc, #44]	@ (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800502a:	0f1b      	lsrs	r3, r3, #28
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	fbb2 f3f3 	udiv	r3, r2, r3
 8005036:	617b      	str	r3, [r7, #20]
          break;
 8005038:	e002      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]
          break;
 800503e:	bf00      	nop
        }
      }
      break;
 8005040:	e000      	b.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8005042:	bf00      	nop
    }
  }
  return frequency;
 8005044:	697b      	ldr	r3, [r7, #20]
}
 8005046:	4618      	mov	r0, r3
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40023800 	.word	0x40023800
 8005058:	00bb8000 	.word	0x00bb8000
 800505c:	007a1200 	.word	0x007a1200
 8005060:	00f42400 	.word	0x00f42400

08005064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e07b      	b.n	800516e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507a:	2b00      	cmp	r3, #0
 800507c:	d108      	bne.n	8005090 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005086:	d009      	beq.n	800509c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	61da      	str	r2, [r3, #28]
 800508e:	e005      	b.n	800509c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fb fe28 	bl	8000d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005120:	ea42 0103 	orr.w	r1, r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005128:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	f003 0104 	and.w	r1, r3, #4
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005142:	f003 0210 	and.w	r2, r3, #16
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69da      	ldr	r2, [r3, #28]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800515c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e041      	b.n	800520c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f839 	bl	8005214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f000 f9bf 	bl	8005538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b01      	cmp	r3, #1
 800523a:	d001      	beq.n	8005240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e04e      	b.n	80052de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a23      	ldr	r2, [pc, #140]	@ (80052ec <HAL_TIM_Base_Start_IT+0xc4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d022      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x80>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800526a:	d01d      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x80>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1f      	ldr	r2, [pc, #124]	@ (80052f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d018      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x80>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1e      	ldr	r2, [pc, #120]	@ (80052f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d013      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x80>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1c      	ldr	r2, [pc, #112]	@ (80052f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00e      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x80>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1b      	ldr	r2, [pc, #108]	@ (80052fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d009      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x80>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a19      	ldr	r2, [pc, #100]	@ (8005300 <HAL_TIM_Base_Start_IT+0xd8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d004      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x80>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a18      	ldr	r2, [pc, #96]	@ (8005304 <HAL_TIM_Base_Start_IT+0xdc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d111      	bne.n	80052cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b06      	cmp	r3, #6
 80052b8:	d010      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0201 	orr.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ca:	e007      	b.n	80052dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0201 	orr.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40010000 	.word	0x40010000
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	40000c00 	.word	0x40000c00
 80052fc:	40010400 	.word	0x40010400
 8005300:	40014000 	.word	0x40014000
 8005304:	40001800 	.word	0x40001800

08005308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d020      	beq.n	800536c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01b      	beq.n	800536c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0202 	mvn.w	r2, #2
 800533c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8d2 	bl	80054fc <HAL_TIM_IC_CaptureCallback>
 8005358:	e005      	b.n	8005366 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8c4 	bl	80054e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f8d5 	bl	8005510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d020      	beq.n	80053b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01b      	beq.n	80053b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0204 	mvn.w	r2, #4
 8005388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f8ac 	bl	80054fc <HAL_TIM_IC_CaptureCallback>
 80053a4:	e005      	b.n	80053b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f89e 	bl	80054e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f8af 	bl	8005510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d020      	beq.n	8005404 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01b      	beq.n	8005404 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0208 	mvn.w	r2, #8
 80053d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2204      	movs	r2, #4
 80053da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f886 	bl	80054fc <HAL_TIM_IC_CaptureCallback>
 80053f0:	e005      	b.n	80053fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f878 	bl	80054e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f889 	bl	8005510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 0310 	and.w	r3, r3, #16
 800540a:	2b00      	cmp	r3, #0
 800540c:	d020      	beq.n	8005450 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01b      	beq.n	8005450 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0210 	mvn.w	r2, #16
 8005420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2208      	movs	r2, #8
 8005426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f860 	bl	80054fc <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f852 	bl	80054e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f863 	bl	8005510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00c      	beq.n	8005474 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0201 	mvn.w	r2, #1
 800546c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fb fb40 	bl	8000af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00c      	beq.n	8005498 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f906 	bl	80056a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00c      	beq.n	80054bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d007      	beq.n	80054bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f834 	bl	8005524 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00c      	beq.n	80054e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0220 	mvn.w	r2, #32
 80054d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f8d8 	bl	8005690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054e0:	bf00      	nop
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a46      	ldr	r2, [pc, #280]	@ (8005664 <TIM_Base_SetConfig+0x12c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d013      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005556:	d00f      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a43      	ldr	r2, [pc, #268]	@ (8005668 <TIM_Base_SetConfig+0x130>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00b      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a42      	ldr	r2, [pc, #264]	@ (800566c <TIM_Base_SetConfig+0x134>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d007      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a41      	ldr	r2, [pc, #260]	@ (8005670 <TIM_Base_SetConfig+0x138>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_Base_SetConfig+0x40>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a40      	ldr	r2, [pc, #256]	@ (8005674 <TIM_Base_SetConfig+0x13c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d108      	bne.n	800558a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a35      	ldr	r2, [pc, #212]	@ (8005664 <TIM_Base_SetConfig+0x12c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d02b      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005598:	d027      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a32      	ldr	r2, [pc, #200]	@ (8005668 <TIM_Base_SetConfig+0x130>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d023      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a31      	ldr	r2, [pc, #196]	@ (800566c <TIM_Base_SetConfig+0x134>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01f      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a30      	ldr	r2, [pc, #192]	@ (8005670 <TIM_Base_SetConfig+0x138>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d01b      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a2f      	ldr	r2, [pc, #188]	@ (8005674 <TIM_Base_SetConfig+0x13c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d017      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005678 <TIM_Base_SetConfig+0x140>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d013      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2d      	ldr	r2, [pc, #180]	@ (800567c <TIM_Base_SetConfig+0x144>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00f      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005680 <TIM_Base_SetConfig+0x148>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00b      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005684 <TIM_Base_SetConfig+0x14c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d007      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005688 <TIM_Base_SetConfig+0x150>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <TIM_Base_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a29      	ldr	r2, [pc, #164]	@ (800568c <TIM_Base_SetConfig+0x154>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d108      	bne.n	80055fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a10      	ldr	r2, [pc, #64]	@ (8005664 <TIM_Base_SetConfig+0x12c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_Base_SetConfig+0xf8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a12      	ldr	r2, [pc, #72]	@ (8005674 <TIM_Base_SetConfig+0x13c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d103      	bne.n	8005638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	d105      	bne.n	8005656 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f023 0201 	bic.w	r2, r3, #1
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	611a      	str	r2, [r3, #16]
  }
}
 8005656:	bf00      	nop
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40010000 	.word	0x40010000
 8005668:	40000400 	.word	0x40000400
 800566c:	40000800 	.word	0x40000800
 8005670:	40000c00 	.word	0x40000c00
 8005674:	40010400 	.word	0x40010400
 8005678:	40014000 	.word	0x40014000
 800567c:	40014400 	.word	0x40014400
 8005680:	40014800 	.word	0x40014800
 8005684:	40001800 	.word	0x40001800
 8005688:	40001c00 	.word	0x40001c00
 800568c:	40002000 	.word	0x40002000

08005690 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056b8:	b084      	sub	sp, #16
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	f107 001c 	add.w	r0, r7, #28
 80056c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d123      	bne.n	800571a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80056e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d105      	bne.n	800570e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f9dc 	bl	8005acc <USB_CoreReset>
 8005714:	4603      	mov	r3, r0
 8005716:	73fb      	strb	r3, [r7, #15]
 8005718:	e01b      	b.n	8005752 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f9d0 	bl	8005acc <USB_CoreReset>
 800572c:	4603      	mov	r3, r0
 800572e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005730:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800573c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	639a      	str	r2, [r3, #56]	@ 0x38
 8005744:	e005      	b.n	8005752 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005752:	7fbb      	ldrb	r3, [r7, #30]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d10b      	bne.n	8005770 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f043 0206 	orr.w	r2, r3, #6
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f043 0220 	orr.w	r2, r3, #32
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005770:	7bfb      	ldrb	r3, [r7, #15]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800577c:	b004      	add	sp, #16
 800577e:	4770      	bx	lr

08005780 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f043 0201 	orr.w	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f023 0201 	bic.w	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	460b      	mov	r3, r1
 80057ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d115      	bne.n	8005812 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057f2:	200a      	movs	r0, #10
 80057f4:	f7fb fc84 	bl	8001100 <HAL_Delay>
      ms += 10U;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	330a      	adds	r3, #10
 80057fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f956 	bl	8005ab0 <USB_GetMode>
 8005804:	4603      	mov	r3, r0
 8005806:	2b01      	cmp	r3, #1
 8005808:	d01e      	beq.n	8005848 <USB_SetCurrentMode+0x84>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2bc7      	cmp	r3, #199	@ 0xc7
 800580e:	d9f0      	bls.n	80057f2 <USB_SetCurrentMode+0x2e>
 8005810:	e01a      	b.n	8005848 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d115      	bne.n	8005844 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005824:	200a      	movs	r0, #10
 8005826:	f7fb fc6b 	bl	8001100 <HAL_Delay>
      ms += 10U;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	330a      	adds	r3, #10
 800582e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f93d 	bl	8005ab0 <USB_GetMode>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <USB_SetCurrentMode+0x84>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005840:	d9f0      	bls.n	8005824 <USB_SetCurrentMode+0x60>
 8005842:	e001      	b.n	8005848 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e005      	b.n	8005854 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2bc8      	cmp	r3, #200	@ 0xc8
 800584c:	d101      	bne.n	8005852 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3301      	adds	r3, #1
 800586e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005876:	d901      	bls.n	800587c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e01b      	b.n	80058b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	daf2      	bge.n	800586a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	019b      	lsls	r3, r3, #6
 800588c:	f043 0220 	orr.w	r2, r3, #32
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058a0:	d901      	bls.n	80058a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e006      	b.n	80058b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	d0f0      	beq.n	8005894 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058d8:	d901      	bls.n	80058de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e018      	b.n	8005910 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	daf2      	bge.n	80058cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2210      	movs	r2, #16
 80058ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3301      	adds	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058fc:	d901      	bls.n	8005902 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e006      	b.n	8005910 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b10      	cmp	r3, #16
 800590c:	d0f0      	beq.n	80058f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800591c:	b480      	push	{r7}
 800591e:	b089      	sub	sp, #36	@ 0x24
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	4611      	mov	r1, r2
 8005928:	461a      	mov	r2, r3
 800592a:	460b      	mov	r3, r1
 800592c:	71fb      	strb	r3, [r7, #7]
 800592e:	4613      	mov	r3, r2
 8005930:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800593a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800593e:	2b00      	cmp	r3, #0
 8005940:	d123      	bne.n	800598a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005942:	88bb      	ldrh	r3, [r7, #4]
 8005944:	3303      	adds	r3, #3
 8005946:	089b      	lsrs	r3, r3, #2
 8005948:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800594a:	2300      	movs	r3, #0
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	e018      	b.n	8005982 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	031a      	lsls	r2, r3, #12
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	4413      	add	r3, r2
 8005958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800595c:	461a      	mov	r2, r3
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	3301      	adds	r3, #1
 8005968:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3301      	adds	r3, #1
 800596e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	3301      	adds	r3, #1
 8005974:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	3301      	adds	r3, #1
 800597a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	3301      	adds	r3, #1
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	429a      	cmp	r2, r3
 8005988:	d3e2      	bcc.n	8005950 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3724      	adds	r7, #36	@ 0x24
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005998:	b480      	push	{r7}
 800599a:	b08b      	sub	sp, #44	@ 0x2c
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	089b      	lsrs	r3, r3, #2
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	f003 0303 	and.w	r3, r3, #3
 80059bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059be:	2300      	movs	r3, #0
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	e014      	b.n	80059ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	3301      	adds	r3, #1
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	3301      	adds	r3, #1
 80059da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059de:	3301      	adds	r3, #1
 80059e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	3301      	adds	r3, #1
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	3301      	adds	r3, #1
 80059ec:	623b      	str	r3, [r7, #32]
 80059ee:	6a3a      	ldr	r2, [r7, #32]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d3e6      	bcc.n	80059c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059f6:	8bfb      	ldrh	r3, [r7, #30]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01e      	beq.n	8005a3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a06:	461a      	mov	r2, r3
 8005a08:	f107 0310 	add.w	r3, r7, #16
 8005a0c:	6812      	ldr	r2, [r2, #0]
 8005a0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	701a      	strb	r2, [r3, #0]
      i++;
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	3301      	adds	r3, #1
 8005a26:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005a2e:	8bfb      	ldrh	r3, [r7, #30]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a34:	8bfb      	ldrh	r3, [r7, #30]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1ea      	bne.n	8005a10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	372c      	adds	r7, #44	@ 0x2c
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a60:	68fb      	ldr	r3, [r7, #12]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f003 0301 	and.w	r3, r3, #1
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3301      	adds	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ae4:	d901      	bls.n	8005aea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e01b      	b.n	8005b22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	daf2      	bge.n	8005ad8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f043 0201 	orr.w	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3301      	adds	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b0e:	d901      	bls.n	8005b14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e006      	b.n	8005b22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d0f0      	beq.n	8005b02 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
	...

08005b30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b30:	b084      	sub	sp, #16
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b086      	sub	sp, #24
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b50:	461a      	mov	r2, r3
 8005b52:	2300      	movs	r3, #0
 8005b54:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b66:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b72:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d119      	bne.n	8005bba <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005b86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d10a      	bne.n	8005ba4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b9c:	f043 0304 	orr.w	r3, r3, #4
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e014      	b.n	8005bce <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005bb2:	f023 0304 	bic.w	r3, r3, #4
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	e009      	b.n	8005bce <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005bc8:	f023 0304 	bic.w	r3, r3, #4
 8005bcc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bce:	2110      	movs	r1, #16
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff fe43 	bl	800585c <USB_FlushTxFifo>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7ff fe6d 	bl	80058c0 <USB_FlushRxFifo>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	613b      	str	r3, [r7, #16]
 8005bf4:	e015      	b.n	8005c22 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c02:	461a      	mov	r2, r3
 8005c04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c08:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c16:	461a      	mov	r2, r3
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005c26:	461a      	mov	r2, r3
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d3e3      	bcc.n	8005bf6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c3a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a18      	ldr	r2, [pc, #96]	@ (8005ca0 <USB_HostInit+0x170>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d10b      	bne.n	8005c5c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c4a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a15      	ldr	r2, [pc, #84]	@ (8005ca4 <USB_HostInit+0x174>)
 8005c50:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a14      	ldr	r2, [pc, #80]	@ (8005ca8 <USB_HostInit+0x178>)
 8005c56:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005c5a:	e009      	b.n	8005c70 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2280      	movs	r2, #128	@ 0x80
 8005c60:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a11      	ldr	r2, [pc, #68]	@ (8005cac <USB_HostInit+0x17c>)
 8005c66:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a11      	ldr	r2, [pc, #68]	@ (8005cb0 <USB_HostInit+0x180>)
 8005c6c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d105      	bne.n	8005c84 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f043 0210 	orr.w	r2, r3, #16
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699a      	ldr	r2, [r3, #24]
 8005c88:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb4 <USB_HostInit+0x184>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c9c:	b004      	add	sp, #16
 8005c9e:	4770      	bx	lr
 8005ca0:	40040000 	.word	0x40040000
 8005ca4:	01000200 	.word	0x01000200
 8005ca8:	00e00300 	.word	0x00e00300
 8005cac:	00600080 	.word	0x00600080
 8005cb0:	004000e0 	.word	0x004000e0
 8005cb4:	a3200008 	.word	0xa3200008

08005cb8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	68f9      	ldr	r1, [r7, #12]
 8005cec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d107      	bne.n	8005d0a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d00:	461a      	mov	r2, r3
 8005d02:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005d06:	6053      	str	r3, [r2, #4]
 8005d08:	e00c      	b.n	8005d24 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d107      	bne.n	8005d20 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d16:	461a      	mov	r2, r3
 8005d18:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005d1c:	6053      	str	r3, [r2, #4]
 8005d1e:	e001      	b.n	8005d24 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005d52:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d60:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005d62:	2064      	movs	r0, #100	@ 0x64
 8005d64:	f7fb f9cc 	bl	8001100 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d74:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005d76:	200a      	movs	r0, #10
 8005d78:	f7fb f9c2 	bl	8001100 <HAL_Delay>

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005daa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <USB_DriveVbus+0x44>
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d106      	bne.n	8005dca <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005dc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005dc8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dd4:	d109      	bne.n	8005dea <USB_DriveVbus+0x64>
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d106      	bne.n	8005dea <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005de4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005de8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	0c5b      	lsrs	r3, r3, #17
 8005e16:	f003 0303 	and.w	r3, r3, #3
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	b29b      	uxth	r3, r3
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	4608      	mov	r0, r1
 8005e52:	4611      	mov	r1, r2
 8005e54:	461a      	mov	r2, r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	70fb      	strb	r3, [r7, #3]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	70bb      	strb	r3, [r7, #2]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e76:	461a      	mov	r2, r3
 8005e78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d87c      	bhi.n	8005f80 <USB_HC_Init+0x138>
 8005e86:	a201      	add	r2, pc, #4	@ (adr r2, 8005e8c <USB_HC_Init+0x44>)
 8005e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8c:	08005e9d 	.word	0x08005e9d
 8005e90:	08005f43 	.word	0x08005f43
 8005e94:	08005e9d 	.word	0x08005e9d
 8005e98:	08005f05 	.word	0x08005f05
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005eae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005eb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	da10      	bge.n	8005eda <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	78fa      	ldrb	r2, [r7, #3]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ed6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005ed8:	e055      	b.n	8005f86 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a6f      	ldr	r2, [pc, #444]	@ (800609c <USB_HC_Init+0x254>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d151      	bne.n	8005f86 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005ee2:	78fb      	ldrb	r3, [r7, #3]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	78fa      	ldrb	r2, [r7, #3]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005efc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005f00:	60d3      	str	r3, [r2, #12]
      break;
 8005f02:	e040      	b.n	8005f86 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f10:	461a      	mov	r2, r3
 8005f12:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005f16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	da34      	bge.n	8005f8a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	78fa      	ldrb	r2, [r7, #3]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f3e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f40:	e023      	b.n	8005f8a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f240 2325 	movw	r3, #549	@ 0x225
 8005f54:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da17      	bge.n	8005f8e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	78fa      	ldrb	r2, [r7, #3]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f78:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005f7c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005f7e:	e006      	b.n	8005f8e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	77fb      	strb	r3, [r7, #31]
      break;
 8005f84:	e004      	b.n	8005f90 <USB_HC_Init+0x148>
      break;
 8005f86:	bf00      	nop
 8005f88:	e002      	b.n	8005f90 <USB_HC_Init+0x148>
      break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <USB_HC_Init+0x148>
      break;
 8005f8e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	78fa      	ldrb	r2, [r7, #3]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fbc:	f043 0302 	orr.w	r3, r3, #2
 8005fc0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd6:	6939      	ldr	r1, [r7, #16]
 8005fd8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005fec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	da03      	bge.n	8005ffc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005ff4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	e001      	b.n	8006000 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff fef9 	bl	8005df8 <USB_GetHostSpeed>
 8006006:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006008:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800600c:	2b02      	cmp	r3, #2
 800600e:	d106      	bne.n	800601e <USB_HC_Init+0x1d6>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d003      	beq.n	800601e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006016:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	e001      	b.n	8006022 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006022:	787b      	ldrb	r3, [r7, #1]
 8006024:	059b      	lsls	r3, r3, #22
 8006026:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800602a:	78bb      	ldrb	r3, [r7, #2]
 800602c:	02db      	lsls	r3, r3, #11
 800602e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006032:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006034:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006038:	049b      	lsls	r3, r3, #18
 800603a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800603e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006040:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006042:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006046:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	431a      	orrs	r2, r3
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006050:	78fa      	ldrb	r2, [r7, #3]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	440a      	add	r2, r1
 8006058:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800605c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006060:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006062:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006066:	2b03      	cmp	r3, #3
 8006068:	d003      	beq.n	8006072 <USB_HC_Init+0x22a>
 800606a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d10f      	bne.n	8006092 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	440a      	add	r2, r1
 8006088:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800608c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006090:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006092:	7ffb      	ldrb	r3, [r7, #31]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3720      	adds	r7, #32
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40040000 	.word	0x40040000

080060a0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08c      	sub	sp, #48	@ 0x30
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	4613      	mov	r3, r2
 80060ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	785b      	ldrb	r3, [r3, #1]
 80060b6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80060b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060bc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4a5d      	ldr	r2, [pc, #372]	@ (8006238 <USB_HC_StartXfer+0x198>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d12f      	bne.n	8006126 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d11c      	bne.n	8006106 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	7c9b      	ldrb	r3, [r3, #18]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <USB_HC_StartXfer+0x3c>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	7c9b      	ldrb	r3, [r3, #18]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d124      	bne.n	8006126 <USB_HC_StartXfer+0x86>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	799b      	ldrb	r3, [r3, #6]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d120      	bne.n	8006126 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	6a3a      	ldr	r2, [r7, #32]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006102:	60d3      	str	r3, [r2, #12]
 8006104:	e00f      	b.n	8006126 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	791b      	ldrb	r3, [r3, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10b      	bne.n	8006126 <USB_HC_StartXfer+0x86>
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	795b      	ldrb	r3, [r3, #5]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d107      	bne.n	8006126 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	785b      	ldrb	r3, [r3, #1]
 800611a:	4619      	mov	r1, r3
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 fb6b 	bl	80067f8 <USB_DoPing>
        return HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	e232      	b.n	800658c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	799b      	ldrb	r3, [r3, #6]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d158      	bne.n	80061e0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800612e:	2301      	movs	r3, #1
 8006130:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	78db      	ldrb	r3, [r3, #3]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800613a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	8a92      	ldrh	r2, [r2, #20]
 8006140:	fb03 f202 	mul.w	r2, r3, r2
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	61da      	str	r2, [r3, #28]
 8006148:	e07c      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	7c9b      	ldrb	r3, [r3, #18]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d130      	bne.n	80061b4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	2bbc      	cmp	r3, #188	@ 0xbc
 8006158:	d918      	bls.n	800618c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	8a9b      	ldrh	r3, [r3, #20]
 800615e:	461a      	mov	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d003      	beq.n	800617c <USB_HC_StartXfer+0xdc>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d103      	bne.n	8006184 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2202      	movs	r2, #2
 8006180:	60da      	str	r2, [r3, #12]
 8006182:	e05f      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2201      	movs	r2, #1
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	e05b      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6a1a      	ldr	r2, [r3, #32]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d007      	beq.n	80061ac <USB_HC_StartXfer+0x10c>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d003      	beq.n	80061ac <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2204      	movs	r2, #4
 80061a8:	60da      	str	r2, [r3, #12]
 80061aa:	e04b      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2203      	movs	r2, #3
 80061b0:	60da      	str	r2, [r3, #12]
 80061b2:	e047      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d10d      	bne.n	80061d6 <USB_HC_StartXfer+0x136>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	8a92      	ldrh	r2, [r2, #20]
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d907      	bls.n	80061d6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	8a92      	ldrh	r2, [r2, #20]
 80061cc:	fb03 f202 	mul.w	r2, r3, r2
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	61da      	str	r2, [r3, #28]
 80061d4:	e036      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	6a1a      	ldr	r2, [r3, #32]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	61da      	str	r2, [r3, #28]
 80061de:	e031      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d018      	beq.n	800621a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	8a92      	ldrh	r2, [r2, #20]
 80061f0:	4413      	add	r3, r2
 80061f2:	3b01      	subs	r3, #1
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	8a92      	ldrh	r2, [r2, #20]
 80061f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061fc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80061fe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006200:	8b7b      	ldrh	r3, [r7, #26]
 8006202:	429a      	cmp	r2, r3
 8006204:	d90b      	bls.n	800621e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006206:	8b7b      	ldrh	r3, [r7, #26]
 8006208:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800620a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	8a92      	ldrh	r2, [r2, #20]
 8006210:	fb03 f202 	mul.w	r2, r3, r2
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	61da      	str	r2, [r3, #28]
 8006218:	e001      	b.n	800621e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800621a:	2301      	movs	r3, #1
 800621c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	78db      	ldrb	r3, [r3, #3]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006226:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	8a92      	ldrh	r2, [r2, #20]
 800622c:	fb03 f202 	mul.w	r2, r3, r2
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	61da      	str	r2, [r3, #28]
 8006234:	e006      	b.n	8006244 <USB_HC_StartXfer+0x1a4>
 8006236:	bf00      	nop
 8006238:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	6a1a      	ldr	r2, [r3, #32]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800624c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800624e:	04d9      	lsls	r1, r3, #19
 8006250:	4ba3      	ldr	r3, [pc, #652]	@ (80064e0 <USB_HC_StartXfer+0x440>)
 8006252:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006254:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	7d9b      	ldrb	r3, [r3, #22]
 800625a:	075b      	lsls	r3, r3, #29
 800625c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006260:	69f9      	ldr	r1, [r7, #28]
 8006262:	0148      	lsls	r0, r1, #5
 8006264:	6a39      	ldr	r1, [r7, #32]
 8006266:	4401      	add	r1, r0
 8006268:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800626c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800626e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d009      	beq.n	800628a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	6999      	ldr	r1, [r3, #24]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	4413      	add	r3, r2
 8006282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006286:	460a      	mov	r2, r1
 8006288:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	bf0c      	ite	eq
 800629a:	2301      	moveq	r3, #1
 800629c:	2300      	movne	r3, #0
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	6a3a      	ldr	r2, [r7, #32]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062c0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	7e7b      	ldrb	r3, [r7, #25]
 80062d2:	075b      	lsls	r3, r3, #29
 80062d4:	69f9      	ldr	r1, [r7, #28]
 80062d6:	0148      	lsls	r0, r1, #5
 80062d8:	6a39      	ldr	r1, [r7, #32]
 80062da:	4401      	add	r1, r0
 80062dc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80062e0:	4313      	orrs	r3, r2
 80062e2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	799b      	ldrb	r3, [r3, #6]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	f040 80c3 	bne.w	8006474 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	7c5b      	ldrb	r3, [r3, #17]
 80062f2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80062f8:	4313      	orrs	r3, r2
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	0151      	lsls	r1, r2, #5
 80062fe:	6a3a      	ldr	r2, [r7, #32]
 8006300:	440a      	add	r2, r1
 8006302:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006306:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800630a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	4413      	add	r3, r2
 8006314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	0151      	lsls	r1, r2, #5
 800631e:	6a3a      	ldr	r2, [r7, #32]
 8006320:	440a      	add	r2, r1
 8006322:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006326:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800632a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	79db      	ldrb	r3, [r3, #7]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d123      	bne.n	800637c <USB_HC_StartXfer+0x2dc>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	78db      	ldrb	r3, [r3, #3]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d11f      	bne.n	800637c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	6a3a      	ldr	r2, [r7, #32]
 8006350:	440a      	add	r2, r1
 8006352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800635a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	6a3a      	ldr	r2, [r7, #32]
 8006370:	440a      	add	r2, r1
 8006372:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800637a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	7c9b      	ldrb	r3, [r3, #18]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d003      	beq.n	800638c <USB_HC_StartXfer+0x2ec>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	7c9b      	ldrb	r3, [r3, #18]
 8006388:	2b03      	cmp	r3, #3
 800638a:	d117      	bne.n	80063bc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006390:	2b01      	cmp	r3, #1
 8006392:	d113      	bne.n	80063bc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	78db      	ldrb	r3, [r3, #3]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d10f      	bne.n	80063bc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	6a3a      	ldr	r2, [r7, #32]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ba:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	7c9b      	ldrb	r3, [r3, #18]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d162      	bne.n	800648a <USB_HC_StartXfer+0x3ea>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	78db      	ldrb	r3, [r3, #3]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d15e      	bne.n	800648a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d858      	bhi.n	8006488 <USB_HC_StartXfer+0x3e8>
 80063d6:	a201      	add	r2, pc, #4	@ (adr r2, 80063dc <USB_HC_StartXfer+0x33c>)
 80063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063dc:	080063ed 	.word	0x080063ed
 80063e0:	0800640f 	.word	0x0800640f
 80063e4:	08006431 	.word	0x08006431
 80063e8:	08006453 	.word	0x08006453
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	6a3a      	ldr	r2, [r7, #32]
 8006400:	440a      	add	r2, r1
 8006402:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800640a:	6053      	str	r3, [r2, #4]
          break;
 800640c:	e03d      	b.n	800648a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	4413      	add	r3, r2
 8006416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	6a3a      	ldr	r2, [r7, #32]
 8006422:	440a      	add	r2, r1
 8006424:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006428:	f043 030e 	orr.w	r3, r3, #14
 800642c:	6053      	str	r3, [r2, #4]
          break;
 800642e:	e02c      	b.n	800648a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	4413      	add	r3, r2
 8006438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	0151      	lsls	r1, r2, #5
 8006442:	6a3a      	ldr	r2, [r7, #32]
 8006444:	440a      	add	r2, r1
 8006446:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800644a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800644e:	6053      	str	r3, [r2, #4]
          break;
 8006450:	e01b      	b.n	800648a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	6a3a      	ldr	r2, [r7, #32]
 8006466:	440a      	add	r2, r1
 8006468:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800646c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006470:	6053      	str	r3, [r2, #4]
          break;
 8006472:	e00a      	b.n	800648a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	4413      	add	r3, r2
 800647c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006480:	461a      	mov	r2, r3
 8006482:	2300      	movs	r3, #0
 8006484:	6053      	str	r3, [r2, #4]
 8006486:	e000      	b.n	800648a <USB_HC_StartXfer+0x3ea>
          break;
 8006488:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064a0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	78db      	ldrb	r3, [r3, #3]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d004      	beq.n	80064b4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	e003      	b.n	80064bc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064ba:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064c2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064d0:	461a      	mov	r2, r3
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	e055      	b.n	800658c <USB_HC_StartXfer+0x4ec>
 80064e0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	78db      	ldrb	r3, [r3, #3]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d14e      	bne.n	800658a <USB_HC_StartXfer+0x4ea>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d04a      	beq.n	800658a <USB_HC_StartXfer+0x4ea>
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	79db      	ldrb	r3, [r3, #7]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d146      	bne.n	800658a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	7c9b      	ldrb	r3, [r3, #18]
 8006500:	2b03      	cmp	r3, #3
 8006502:	d831      	bhi.n	8006568 <USB_HC_StartXfer+0x4c8>
 8006504:	a201      	add	r2, pc, #4	@ (adr r2, 800650c <USB_HC_StartXfer+0x46c>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	0800651d 	.word	0x0800651d
 8006510:	08006541 	.word	0x08006541
 8006514:	0800651d 	.word	0x0800651d
 8006518:	08006541 	.word	0x08006541
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	3303      	adds	r3, #3
 8006522:	089b      	lsrs	r3, r3, #2
 8006524:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006526:	8afa      	ldrh	r2, [r7, #22]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652c:	b29b      	uxth	r3, r3
 800652e:	429a      	cmp	r2, r3
 8006530:	d91c      	bls.n	800656c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	f043 0220 	orr.w	r2, r3, #32
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	619a      	str	r2, [r3, #24]
        }
        break;
 800653e:	e015      	b.n	800656c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	3303      	adds	r3, #3
 8006546:	089b      	lsrs	r3, r3, #2
 8006548:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800654a:	8afa      	ldrh	r2, [r7, #22]
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	b29b      	uxth	r3, r3
 8006556:	429a      	cmp	r2, r3
 8006558:	d90a      	bls.n	8006570 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	619a      	str	r2, [r3, #24]
        }
        break;
 8006566:	e003      	b.n	8006570 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006568:	bf00      	nop
 800656a:	e002      	b.n	8006572 <USB_HC_StartXfer+0x4d2>
        break;
 800656c:	bf00      	nop
 800656e:	e000      	b.n	8006572 <USB_HC_StartXfer+0x4d2>
        break;
 8006570:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	6999      	ldr	r1, [r3, #24]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	785a      	ldrb	r2, [r3, #1]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	b29b      	uxth	r3, r3
 8006580:	2000      	movs	r0, #0
 8006582:	9000      	str	r0, [sp, #0]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7ff f9c9 	bl	800591c <USB_WritePacket>
  }

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3728      	adds	r7, #40	@ 0x28
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	b29b      	uxth	r3, r3
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b089      	sub	sp, #36	@ 0x24
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80065c6:	78fb      	ldrb	r3, [r7, #3]
 80065c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	0c9b      	lsrs	r3, r3, #18
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	0fdb      	lsrs	r3, r3, #31
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4413      	add	r3, r2
 8006602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	0fdb      	lsrs	r3, r3, #31
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b20      	cmp	r3, #32
 800661a:	d10d      	bne.n	8006638 <USB_HC_Halt+0x82>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <USB_HC_Halt+0x82>
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d002      	beq.n	8006634 <USB_HC_Halt+0x7e>
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b03      	cmp	r3, #3
 8006632:	d101      	bne.n	8006638 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	e0d8      	b.n	80067ea <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <USB_HC_Halt+0x8e>
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d173      	bne.n	800672c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	4413      	add	r3, r2
 800664c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	440a      	add	r2, r1
 800665a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800665e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006662:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	d14a      	bne.n	8006706 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006674:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d133      	bne.n	80066e4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	440a      	add	r2, r1
 8006692:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006696:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800669a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	0151      	lsls	r1, r2, #5
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	440a      	add	r2, r1
 80066b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066ba:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	3301      	adds	r3, #1
 80066c0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066c8:	d82e      	bhi.n	8006728 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066e0:	d0ec      	beq.n	80066bc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066e2:	e081      	b.n	80067e8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006702:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006704:	e070      	b.n	80067e8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	440a      	add	r2, r1
 800671c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006720:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006724:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006726:	e05f      	b.n	80067e8 <USB_HC_Halt+0x232>
            break;
 8006728:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800672a:	e05d      	b.n	80067e8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4413      	add	r3, r2
 8006734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	440a      	add	r2, r1
 8006742:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006746:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800674a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d133      	bne.n	80067c4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	4413      	add	r3, r2
 8006764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	0151      	lsls	r1, r2, #5
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	440a      	add	r2, r1
 8006772:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006776:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800677a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	4413      	add	r3, r2
 8006784:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	0151      	lsls	r1, r2, #5
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	440a      	add	r2, r1
 8006792:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006796:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800679a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	3301      	adds	r3, #1
 80067a0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067a8:	d81d      	bhi.n	80067e6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067c0:	d0ec      	beq.n	800679c <USB_HC_Halt+0x1e6>
 80067c2:	e011      	b.n	80067e8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	0151      	lsls	r1, r2, #5
 80067d6:	69fa      	ldr	r2, [r7, #28]
 80067d8:	440a      	add	r2, r1
 80067da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	e000      	b.n	80067e8 <USB_HC_Halt+0x232>
          break;
 80067e6:	bf00      	nop
    }
  }

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3724      	adds	r7, #36	@ 0x24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
	...

080067f8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800680c:	2301      	movs	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	04da      	lsls	r2, r3, #19
 8006814:	4b15      	ldr	r3, [pc, #84]	@ (800686c <USB_DoPing+0x74>)
 8006816:	4013      	ands	r3, r2
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	440a      	add	r2, r1
 8006820:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006824:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006828:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	4413      	add	r3, r2
 8006832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006840:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006848:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006856:	461a      	mov	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	1ff80000 	.word	0x1ff80000

08006870 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7fe ff8c 	bl	80057a2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800688a:	2110      	movs	r1, #16
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7fe ffe5 	bl	800585c <USB_FlushTxFifo>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff f80f 	bl	80058c0 <USB_FlushRxFifo>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80068ac:	2300      	movs	r3, #0
 80068ae:	61bb      	str	r3, [r7, #24]
 80068b0:	e01f      	b.n	80068f2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e6:	461a      	mov	r2, r3
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	3301      	adds	r3, #1
 80068f0:	61bb      	str	r3, [r7, #24]
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b0f      	cmp	r3, #15
 80068f6:	d9dc      	bls.n	80068b2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80068f8:	2300      	movs	r3, #0
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	e034      	b.n	8006968 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006914:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800691c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006924:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	4413      	add	r3, r2
 800692e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006932:	461a      	mov	r2, r3
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3301      	adds	r3, #1
 800693c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006944:	d80c      	bhi.n	8006960 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006958:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800695c:	d0ec      	beq.n	8006938 <USB_StopHost+0xc8>
 800695e:	e000      	b.n	8006962 <USB_StopHost+0xf2>
        break;
 8006960:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	3301      	adds	r3, #1
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	2b0f      	cmp	r3, #15
 800696c:	d9c7      	bls.n	80068fe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006974:	461a      	mov	r2, r3
 8006976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800697a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006982:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7fe fefb 	bl	8005780 <USB_EnableGlobalInt>

  return ret;
 800698a:	7ffb      	ldrb	r3, [r7, #31]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3720      	adds	r7, #32
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b089      	sub	sp, #36	@ 0x24
 8006998:	af04      	add	r7, sp, #16
 800699a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800699c:	2301      	movs	r3, #1
 800699e:	2202      	movs	r2, #2
 80069a0:	2102      	movs	r1, #2
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fcd1 	bl	800734a <USBH_FindInterface>
 80069a8:	4603      	mov	r3, r0
 80069aa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	2bff      	cmp	r3, #255	@ 0xff
 80069b0:	d002      	beq.n	80069b8 <USBH_CDC_InterfaceInit+0x24>
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d901      	bls.n	80069bc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069b8:	2302      	movs	r3, #2
 80069ba:	e13d      	b.n	8006c38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fca6 	bl	8007312 <USBH_SelectInterface>
 80069c6:	4603      	mov	r3, r0
 80069c8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80069d0:	2302      	movs	r3, #2
 80069d2:	e131      	b.n	8006c38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80069da:	2050      	movs	r0, #80	@ 0x50
 80069dc:	f005 fd98 	bl	800c510 <malloc>
 80069e0:	4603      	mov	r3, r0
 80069e2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80069f4:	2302      	movs	r3, #2
 80069f6:	e11f      	b.n	8006c38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80069f8:	2250      	movs	r2, #80	@ 0x50
 80069fa:	2100      	movs	r1, #0
 80069fc:	68b8      	ldr	r0, [r7, #8]
 80069fe:	f006 f86f 	bl	800cae0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	211a      	movs	r1, #26
 8006a08:	fb01 f303 	mul.w	r3, r1, r3
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	b25b      	sxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	da15      	bge.n	8006a46 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	211a      	movs	r1, #26
 8006a20:	fb01 f303 	mul.w	r3, r1, r3
 8006a24:	4413      	add	r3, r2
 8006a26:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006a2a:	781a      	ldrb	r2, [r3, #0]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	211a      	movs	r1, #26
 8006a36:	fb01 f303 	mul.w	r3, r1, r3
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006a40:	881a      	ldrh	r2, [r3, #0]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	785b      	ldrb	r3, [r3, #1]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f002 fa18 	bl	8008e82 <USBH_AllocPipe>
 8006a52:	4603      	mov	r3, r0
 8006a54:	461a      	mov	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	7819      	ldrb	r1, [r3, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	7858      	ldrb	r0, [r3, #1]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	8952      	ldrh	r2, [r2, #10]
 8006a72:	9202      	str	r2, [sp, #8]
 8006a74:	2203      	movs	r2, #3
 8006a76:	9201      	str	r2, [sp, #4]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	4623      	mov	r3, r4
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f002 f9d0 	bl	8008e24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f005 fcb9 	bl	800c404 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006a92:	2300      	movs	r3, #0
 8006a94:	2200      	movs	r2, #0
 8006a96:	210a      	movs	r1, #10
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fc56 	bl	800734a <USBH_FindInterface>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2bff      	cmp	r3, #255	@ 0xff
 8006aa6:	d002      	beq.n	8006aae <USBH_CDC_InterfaceInit+0x11a>
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d901      	bls.n	8006ab2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e0c2      	b.n	8006c38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	211a      	movs	r1, #26
 8006ab8:	fb01 f303 	mul.w	r3, r1, r3
 8006abc:	4413      	add	r3, r2
 8006abe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	b25b      	sxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	da16      	bge.n	8006af8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	211a      	movs	r1, #26
 8006ad0:	fb01 f303 	mul.w	r3, r1, r3
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ada:	781a      	ldrb	r2, [r3, #0]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	211a      	movs	r1, #26
 8006ae6:	fb01 f303 	mul.w	r3, r1, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006af0:	881a      	ldrh	r2, [r3, #0]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	835a      	strh	r2, [r3, #26]
 8006af6:	e015      	b.n	8006b24 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	211a      	movs	r1, #26
 8006afe:	fb01 f303 	mul.w	r3, r1, r3
 8006b02:	4413      	add	r3, r2
 8006b04:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006b08:	781a      	ldrb	r2, [r3, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	211a      	movs	r1, #26
 8006b14:	fb01 f303 	mul.w	r3, r1, r3
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006b1e:	881a      	ldrh	r2, [r3, #0]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	211a      	movs	r1, #26
 8006b2a:	fb01 f303 	mul.w	r3, r1, r3
 8006b2e:	4413      	add	r3, r2
 8006b30:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	b25b      	sxtb	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	da16      	bge.n	8006b6a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	211a      	movs	r1, #26
 8006b42:	fb01 f303 	mul.w	r3, r1, r3
 8006b46:	4413      	add	r3, r2
 8006b48:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b4c:	781a      	ldrb	r2, [r3, #0]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	211a      	movs	r1, #26
 8006b58:	fb01 f303 	mul.w	r3, r1, r3
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006b62:	881a      	ldrh	r2, [r3, #0]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	835a      	strh	r2, [r3, #26]
 8006b68:	e015      	b.n	8006b96 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	211a      	movs	r1, #26
 8006b70:	fb01 f303 	mul.w	r3, r1, r3
 8006b74:	4413      	add	r3, r2
 8006b76:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006b7a:	781a      	ldrb	r2, [r3, #0]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	211a      	movs	r1, #26
 8006b86:	fb01 f303 	mul.w	r3, r1, r3
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006b90:	881a      	ldrh	r2, [r3, #0]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	7b9b      	ldrb	r3, [r3, #14]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f002 f970 	bl	8008e82 <USBH_AllocPipe>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	7bdb      	ldrb	r3, [r3, #15]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f002 f966 	bl	8008e82 <USBH_AllocPipe>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	7b59      	ldrb	r1, [r3, #13]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	7b98      	ldrb	r0, [r3, #14]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	8b12      	ldrh	r2, [r2, #24]
 8006bd6:	9202      	str	r2, [sp, #8]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	9201      	str	r2, [sp, #4]
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	4623      	mov	r3, r4
 8006be0:	4602      	mov	r2, r0
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f002 f91e 	bl	8008e24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	7b19      	ldrb	r1, [r3, #12]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	7bd8      	ldrb	r0, [r3, #15]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	8b52      	ldrh	r2, [r2, #26]
 8006c00:	9202      	str	r2, [sp, #8]
 8006c02:	2202      	movs	r2, #2
 8006c04:	9201      	str	r2, [sp, #4]
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	4623      	mov	r3, r4
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f002 f909 	bl	8008e24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	7b5b      	ldrb	r3, [r3, #13]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f005 fbee 	bl	800c404 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	7b1b      	ldrb	r3, [r3, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f005 fbe7 	bl	800c404 <USBH_LL_SetToggle>

  return USBH_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd90      	pop	{r4, r7, pc}

08006c40 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00e      	beq.n	8006c78 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f002 f8fe 	bl	8008e62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f002 f929 	bl	8008ec4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	7b1b      	ldrb	r3, [r3, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00e      	beq.n	8006c9e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	7b1b      	ldrb	r3, [r3, #12]
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f002 f8eb 	bl	8008e62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	7b1b      	ldrb	r3, [r3, #12]
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f002 f916 	bl	8008ec4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	7b5b      	ldrb	r3, [r3, #13]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00e      	beq.n	8006cc4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	7b5b      	ldrb	r3, [r3, #13]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f002 f8d8 	bl	8008e62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	7b5b      	ldrb	r3, [r3, #13]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f002 f903 	bl	8008ec4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00b      	beq.n	8006ce8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f005 fc21 	bl	800c520 <free>
    phost->pActiveClass->pData = 0U;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	3340      	adds	r3, #64	@ 0x40
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f8b1 	bl	8006e72 <GetLineCoding>
 8006d10:	4603      	mov	r3, r0
 8006d12:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006d14:	7afb      	ldrb	r3, [r7, #11]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d105      	bne.n	8006d26 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d20:	2102      	movs	r1, #2
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d26:	7afb      	ldrb	r3, [r7, #11]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006d50:	2b04      	cmp	r3, #4
 8006d52:	d877      	bhi.n	8006e44 <USBH_CDC_Process+0x114>
 8006d54:	a201      	add	r2, pc, #4	@ (adr r2, 8006d5c <USBH_CDC_Process+0x2c>)
 8006d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5a:	bf00      	nop
 8006d5c:	08006d71 	.word	0x08006d71
 8006d60:	08006d77 	.word	0x08006d77
 8006d64:	08006da7 	.word	0x08006da7
 8006d68:	08006e1b 	.word	0x08006e1b
 8006d6c:	08006e29 	.word	0x08006e29
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]
      break;
 8006d74:	e06d      	b.n	8006e52 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f897 	bl	8006eb0 <SetLineCoding>
 8006d82:	4603      	mov	r3, r0
 8006d84:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d86:	7bbb      	ldrb	r3, [r7, #14]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d94:	e058      	b.n	8006e48 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d055      	beq.n	8006e48 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2204      	movs	r2, #4
 8006da0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006da4:	e050      	b.n	8006e48 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	3340      	adds	r3, #64	@ 0x40
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f860 	bl	8006e72 <GetLineCoding>
 8006db2:	4603      	mov	r3, r0
 8006db4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d126      	bne.n	8006e0a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dce:	791b      	ldrb	r3, [r3, #4]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d13b      	bne.n	8006e4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dde:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d133      	bne.n	8006e4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d12b      	bne.n	8006e4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dfc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d124      	bne.n	8006e4c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f982 	bl	800710c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e08:	e020      	b.n	8006e4c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d01d      	beq.n	8006e4c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2204      	movs	r2, #4
 8006e14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006e18:	e018      	b.n	8006e4c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f867 	bl	8006eee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f8f6 	bl	8007012 <CDC_ProcessReception>
      break;
 8006e26:	e014      	b.n	8006e52 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e28:	2100      	movs	r1, #0
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 f984 	bl	8008138 <USBH_ClrFeature>
 8006e30:	4603      	mov	r3, r0
 8006e32:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006e42:	e005      	b.n	8006e50 <USBH_CDC_Process+0x120>

    default:
      break;
 8006e44:	bf00      	nop
 8006e46:	e004      	b.n	8006e52 <USBH_CDC_Process+0x122>
      break;
 8006e48:	bf00      	nop
 8006e4a:	e002      	b.n	8006e52 <USBH_CDC_Process+0x122>
      break;
 8006e4c:	bf00      	nop
 8006e4e:	e000      	b.n	8006e52 <USBH_CDC_Process+0x122>
      break;
 8006e50:	bf00      	nop

  }

  return status;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	22a1      	movs	r2, #161	@ 0xa1
 8006e80:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2221      	movs	r2, #33	@ 0x21
 8006e86:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2207      	movs	r2, #7
 8006e98:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2207      	movs	r2, #7
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f001 fc7e 	bl	80087a2 <USBH_CtlReq>
 8006ea6:	4603      	mov	r3, r0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2221      	movs	r2, #33	@ 0x21
 8006ebe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2207      	movs	r2, #7
 8006ed6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2207      	movs	r2, #7
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 fc5f 	bl	80087a2 <USBH_CtlReq>
 8006ee4:	4603      	mov	r3, r0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b086      	sub	sp, #24
 8006ef2:	af02      	add	r7, sp, #8
 8006ef4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f00:	2300      	movs	r3, #0
 8006f02:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d002      	beq.n	8006f14 <CDC_ProcessTransmission+0x26>
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d023      	beq.n	8006f5a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006f12:	e07a      	b.n	800700a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	8b12      	ldrh	r2, [r2, #24]
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d90b      	bls.n	8006f38 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	69d9      	ldr	r1, [r3, #28]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8b1a      	ldrh	r2, [r3, #24]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	7b5b      	ldrb	r3, [r3, #13]
 8006f2c:	2001      	movs	r0, #1
 8006f2e:	9000      	str	r0, [sp, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 ff34 	bl	8008d9e <USBH_BulkSendData>
 8006f36:	e00b      	b.n	8006f50 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	7b5b      	ldrb	r3, [r3, #13]
 8006f46:	2001      	movs	r0, #1
 8006f48:	9000      	str	r0, [sp, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 ff27 	bl	8008d9e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006f58:	e057      	b.n	800700a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	7b5b      	ldrb	r3, [r3, #13]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f005 fa25 	bl	800c3b0 <USBH_LL_GetURBState>
 8006f66:	4603      	mov	r3, r0
 8006f68:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d136      	bne.n	8006fde <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	8b12      	ldrh	r2, [r2, #24]
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d90e      	bls.n	8006f9a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	8b12      	ldrh	r2, [r2, #24]
 8006f84:	1a9a      	subs	r2, r3, r2
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	8b12      	ldrh	r2, [r2, #24]
 8006f92:	441a      	add	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	61da      	str	r2, [r3, #28]
 8006f98:	e002      	b.n	8006fa0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8006fb0:	e006      	b.n	8006fc0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f892 	bl	80070e4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2204      	movs	r2, #4
 8006fc4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f002 f964 	bl	80092a4 <osMessageQueuePut>
      break;
 8006fdc:	e014      	b.n	8007008 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006fde:	7afb      	ldrb	r3, [r7, #11]
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d111      	bne.n	8007008 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2204      	movs	r2, #4
 8006ff0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007000:	2300      	movs	r3, #0
 8007002:	2200      	movs	r2, #0
 8007004:	f002 f94e 	bl	80092a4 <osMessageQueuePut>
      break;
 8007008:	bf00      	nop
  }
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b086      	sub	sp, #24
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007024:	2300      	movs	r3, #0
 8007026:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800702e:	2b03      	cmp	r3, #3
 8007030:	d002      	beq.n	8007038 <CDC_ProcessReception+0x26>
 8007032:	2b04      	cmp	r3, #4
 8007034:	d00e      	beq.n	8007054 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007036:	e051      	b.n	80070dc <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	6a19      	ldr	r1, [r3, #32]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	8b5a      	ldrh	r2, [r3, #26]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	7b1b      	ldrb	r3, [r3, #12]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 fecf 	bl	8008de8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2204      	movs	r2, #4
 800704e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007052:	e043      	b.n	80070dc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	7b1b      	ldrb	r3, [r3, #12]
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f005 f9a8 	bl	800c3b0 <USBH_LL_GetURBState>
 8007060:	4603      	mov	r3, r0
 8007062:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007064:	7cfb      	ldrb	r3, [r7, #19]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d137      	bne.n	80070da <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	7b1b      	ldrb	r3, [r3, #12]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f005 f90b 	bl	800c28c <USBH_LL_GetLastXferSize>
 8007076:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	429a      	cmp	r2, r3
 8007080:	d016      	beq.n	80070b0 <CDC_ProcessReception+0x9e>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	8b5b      	ldrh	r3, [r3, #26]
 8007086:	461a      	mov	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4293      	cmp	r3, r2
 800708c:	d910      	bls.n	80070b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	1ad2      	subs	r2, r2, r3
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	6a1a      	ldr	r2, [r3, #32]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	441a      	add	r2, r3
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2203      	movs	r2, #3
 80070aa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 80070ae:	e006      	b.n	80070be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f81d 	bl	80070f8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2204      	movs	r2, #4
 80070c2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80070d2:	2300      	movs	r3, #0
 80070d4:	2200      	movs	r2, #0
 80070d6:	f002 f8e5 	bl	80092a4 <osMessageQueuePut>
      break;
 80070da:	bf00      	nop
  }
}
 80070dc:	bf00      	nop
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	4613      	mov	r3, r2
 800712c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007134:	2302      	movs	r3, #2
 8007136:	e044      	b.n	80071c2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	79fa      	ldrb	r2, [r7, #7]
 800713c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 f841 	bl	80071d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007184:	2200      	movs	r2, #0
 8007186:	2104      	movs	r1, #4
 8007188:	2010      	movs	r0, #16
 800718a:	f002 f818 	bl	80091be <osMessageQueueNew>
 800718e:	4602      	mov	r2, r0
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8007196:	4b0d      	ldr	r3, [pc, #52]	@ (80071cc <USBH_Init+0xac>)
 8007198:	4a0d      	ldr	r2, [pc, #52]	@ (80071d0 <USBH_Init+0xb0>)
 800719a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800719c:	4b0b      	ldr	r3, [pc, #44]	@ (80071cc <USBH_Init+0xac>)
 800719e:	2280      	movs	r2, #128	@ 0x80
 80071a0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80071a2:	4b0a      	ldr	r3, [pc, #40]	@ (80071cc <USBH_Init+0xac>)
 80071a4:	2218      	movs	r2, #24
 80071a6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80071a8:	4a08      	ldr	r2, [pc, #32]	@ (80071cc <USBH_Init+0xac>)
 80071aa:	68f9      	ldr	r1, [r7, #12]
 80071ac:	4809      	ldr	r0, [pc, #36]	@ (80071d4 <USBH_Init+0xb4>)
 80071ae:	f001 ff59 	bl	8009064 <osThreadNew>
 80071b2:	4602      	mov	r2, r0
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f004 ffb2 	bl	800c124 <USBH_LL_Init>

  return USBH_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	200001f8 	.word	0x200001f8
 80071d0:	0800d930 	.word	0x0800d930
 80071d4:	08007e89 	.word	0x08007e89

080071d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	e009      	b.n	80071fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	33e0      	adds	r3, #224	@ 0xe0
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	2200      	movs	r2, #0
 80071f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3301      	adds	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b0f      	cmp	r3, #15
 8007202:	d9f2      	bls.n	80071ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007204:	2300      	movs	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	e009      	b.n	800721e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4413      	add	r3, r2
 8007210:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007214:	2200      	movs	r2, #0
 8007216:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3301      	adds	r3, #1
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007224:	d3f1      	bcc.n	800720a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2240      	movs	r2, #64	@ 0x40
 800724a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	331c      	adds	r3, #28
 8007276:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800727a:	2100      	movs	r1, #0
 800727c:	4618      	mov	r0, r3
 800727e:	f005 fc2f 	bl	800cae0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007288:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800728c:	2100      	movs	r1, #0
 800728e:	4618      	mov	r0, r3
 8007290:	f005 fc26 	bl	800cae0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800729a:	2212      	movs	r2, #18
 800729c:	2100      	movs	r1, #0
 800729e:	4618      	mov	r0, r3
 80072a0:	f005 fc1e 	bl	800cae0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80072aa:	223e      	movs	r2, #62	@ 0x3e
 80072ac:	2100      	movs	r1, #0
 80072ae:	4618      	mov	r0, r3
 80072b0:	f005 fc16 	bl	800cae0 <memset>

  return USBH_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d016      	beq.n	8007300 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10e      	bne.n	80072fa <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80072e2:	1c59      	adds	r1, r3, #1
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	33de      	adds	r3, #222	@ 0xde
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	73fb      	strb	r3, [r7, #15]
 80072f8:	e004      	b.n	8007304 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072fa:	2302      	movs	r3, #2
 80072fc:	73fb      	strb	r3, [r7, #15]
 80072fe:	e001      	b.n	8007304 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007300:	2302      	movs	r3, #2
 8007302:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007312:	b480      	push	{r7}
 8007314:	b085      	sub	sp, #20
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	460b      	mov	r3, r1
 800731c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007328:	78fa      	ldrb	r2, [r7, #3]
 800732a:	429a      	cmp	r2, r3
 800732c:	d204      	bcs.n	8007338 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	78fa      	ldrb	r2, [r7, #3]
 8007332:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007336:	e001      	b.n	800733c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007338:	2302      	movs	r3, #2
 800733a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800734a:	b480      	push	{r7}
 800734c:	b087      	sub	sp, #28
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	4608      	mov	r0, r1
 8007354:	4611      	mov	r1, r2
 8007356:	461a      	mov	r2, r3
 8007358:	4603      	mov	r3, r0
 800735a:	70fb      	strb	r3, [r7, #3]
 800735c:	460b      	mov	r3, r1
 800735e:	70bb      	strb	r3, [r7, #2]
 8007360:	4613      	mov	r3, r2
 8007362:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007368:	2300      	movs	r3, #0
 800736a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007372:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007374:	e025      	b.n	80073c2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007376:	7dfb      	ldrb	r3, [r7, #23]
 8007378:	221a      	movs	r2, #26
 800737a:	fb02 f303 	mul.w	r3, r2, r3
 800737e:	3308      	adds	r3, #8
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4413      	add	r3, r2
 8007384:	3302      	adds	r3, #2
 8007386:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	795b      	ldrb	r3, [r3, #5]
 800738c:	78fa      	ldrb	r2, [r7, #3]
 800738e:	429a      	cmp	r2, r3
 8007390:	d002      	beq.n	8007398 <USBH_FindInterface+0x4e>
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	2bff      	cmp	r3, #255	@ 0xff
 8007396:	d111      	bne.n	80073bc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800739c:	78ba      	ldrb	r2, [r7, #2]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d002      	beq.n	80073a8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073a2:	78bb      	ldrb	r3, [r7, #2]
 80073a4:	2bff      	cmp	r3, #255	@ 0xff
 80073a6:	d109      	bne.n	80073bc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073ac:	787a      	ldrb	r2, [r7, #1]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d002      	beq.n	80073b8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073b2:	787b      	ldrb	r3, [r7, #1]
 80073b4:	2bff      	cmp	r3, #255	@ 0xff
 80073b6:	d101      	bne.n	80073bc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	e006      	b.n	80073ca <USBH_FindInterface+0x80>
    }
    if_ix++;
 80073bc:	7dfb      	ldrb	r3, [r7, #23]
 80073be:	3301      	adds	r3, #1
 80073c0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d9d6      	bls.n	8007376 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80073c8:	23ff      	movs	r3, #255	@ 0xff
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b082      	sub	sp, #8
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f004 fedc 	bl	800c19c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80073e4:	2101      	movs	r1, #1
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f004 fff5 	bl	800c3d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af04      	add	r7, sp, #16
 80073fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007400:	2302      	movs	r3, #2
 8007402:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	d102      	bne.n	800741a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2203      	movs	r2, #3
 8007418:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b0b      	cmp	r3, #11
 8007422:	f200 8244 	bhi.w	80078ae <USBH_Process+0x4b6>
 8007426:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <USBH_Process+0x34>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	0800745d 	.word	0x0800745d
 8007430:	080074ab 	.word	0x080074ab
 8007434:	0800752f 	.word	0x0800752f
 8007438:	0800782d 	.word	0x0800782d
 800743c:	080078af 	.word	0x080078af
 8007440:	080075eb 	.word	0x080075eb
 8007444:	080077b7 	.word	0x080077b7
 8007448:	0800763d 	.word	0x0800763d
 800744c:	08007679 	.word	0x08007679
 8007450:	080076b1 	.word	0x080076b1
 8007454:	0800770f 	.word	0x0800770f
 8007458:	08007815 	.word	0x08007815
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 8224 	beq.w	80078b2 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007470:	20c8      	movs	r0, #200	@ 0xc8
 8007472:	f004 fffa 	bl	800c46a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f004 feed 	bl	800c256 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80074a0:	2300      	movs	r3, #0
 80074a2:	2200      	movs	r2, #0
 80074a4:	f001 fefe 	bl	80092a4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80074a8:	e203      	b.n	80078b2 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d107      	bne.n	80074c4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	701a      	strb	r2, [r3, #0]
 80074c2:	e025      	b.n	8007510 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80074ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074ce:	d914      	bls.n	80074fa <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80074d6:	3301      	adds	r3, #1
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d903      	bls.n	80074f2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	220d      	movs	r2, #13
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	e00e      	b.n	8007510 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	e00a      	b.n	8007510 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007500:	f103 020a 	add.w	r2, r3, #10
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800750a:	200a      	movs	r0, #10
 800750c:	f004 ffad 	bl	800c46a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007524:	2300      	movs	r3, #0
 8007526:	2200      	movs	r2, #0
 8007528:	f001 febc 	bl	80092a4 <osMessageQueuePut>
#endif
#endif
      break;
 800752c:	e1c8      	b.n	80078c0 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800753e:	2104      	movs	r1, #4
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007544:	2064      	movs	r0, #100	@ 0x64
 8007546:	f004 ff90 	bl	800c46a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f004 fe5c 	bl	800c208 <USBH_LL_GetSpeed>
 8007550:	4603      	mov	r3, r0
 8007552:	461a      	mov	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2205      	movs	r2, #5
 800755e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007560:	2100      	movs	r1, #0
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 fc8d 	bl	8008e82 <USBH_AllocPipe>
 8007568:	4603      	mov	r3, r0
 800756a:	461a      	mov	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007570:	2180      	movs	r1, #128	@ 0x80
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fc85 	bl	8008e82 <USBH_AllocPipe>
 8007578:	4603      	mov	r3, r0
 800757a:	461a      	mov	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	7919      	ldrb	r1, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007594:	9202      	str	r2, [sp, #8]
 8007596:	2200      	movs	r2, #0
 8007598:	9201      	str	r2, [sp, #4]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	4603      	mov	r3, r0
 800759e:	2280      	movs	r2, #128	@ 0x80
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 fc3f 	bl	8008e24 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	7959      	ldrb	r1, [r3, #5]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075ba:	9202      	str	r2, [sp, #8]
 80075bc:	2200      	movs	r2, #0
 80075be:	9201      	str	r2, [sp, #4]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	4603      	mov	r3, r0
 80075c4:	2200      	movs	r2, #0
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 fc2c 	bl	8008e24 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80075e0:	2300      	movs	r3, #0
 80075e2:	2200      	movs	r2, #0
 80075e4:	f001 fe5e 	bl	80092a4 <osMessageQueuePut>
#endif
#endif
      break;
 80075e8:	e16a      	b.n	80078c0 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f96e 	bl	80078cc <USBH_HandleEnum>
 80075f0:	4603      	mov	r3, r0
 80075f2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f040 815c 	bne.w	80078b6 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800760c:	2b01      	cmp	r3, #1
 800760e:	d103      	bne.n	8007618 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2208      	movs	r2, #8
 8007614:	701a      	strb	r2, [r3, #0]
 8007616:	e002      	b.n	800761e <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2207      	movs	r2, #7
 800761c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2205      	movs	r2, #5
 8007622:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007632:	2300      	movs	r3, #0
 8007634:	2200      	movs	r2, #0
 8007636:	f001 fe35 	bl	80092a4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800763a:	e13c      	b.n	80078b6 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 8139 	beq.w	80078ba <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800764e:	2101      	movs	r1, #1
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2208      	movs	r2, #8
 8007658:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2205      	movs	r2, #5
 800765e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800766e:	2300      	movs	r3, #0
 8007670:	2200      	movs	r2, #0
 8007672:	f001 fe17 	bl	80092a4 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8007676:	e120      	b.n	80078ba <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fd12 	bl	80080aa <USBH_SetCfg>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2209      	movs	r2, #9
 8007690:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80076a6:	2300      	movs	r3, #0
 80076a8:	2200      	movs	r2, #0
 80076aa:	f001 fdfb 	bl	80092a4 <osMessageQueuePut>
#endif
#endif
      break;
 80076ae:	e107      	b.n	80078c0 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80076b6:	f003 0320 	and.w	r3, r3, #32
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d015      	beq.n	80076ea <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80076be:	2101      	movs	r1, #1
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fd15 	bl	80080f0 <USBH_SetFeature>
 80076c6:	4603      	mov	r3, r0
 80076c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d103      	bne.n	80076da <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	220a      	movs	r2, #10
 80076d6:	701a      	strb	r2, [r3, #0]
 80076d8:	e00a      	b.n	80076f0 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d106      	bne.n	80076f0 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	220a      	movs	r2, #10
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	e002      	b.n	80076f0 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	220a      	movs	r2, #10
 80076ee:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007704:	2300      	movs	r3, #0
 8007706:	2200      	movs	r2, #0
 8007708:	f001 fdcc 	bl	80092a4 <osMessageQueuePut>
#endif
#endif
      break;
 800770c:	e0d8      	b.n	80078c0 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007714:	2b00      	cmp	r3, #0
 8007716:	d03f      	beq.n	8007798 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007720:	2300      	movs	r3, #0
 8007722:	73fb      	strb	r3, [r7, #15]
 8007724:	e016      	b.n	8007754 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007726:	7bfa      	ldrb	r2, [r7, #15]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	32de      	adds	r2, #222	@ 0xde
 800772c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007730:	791a      	ldrb	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007738:	429a      	cmp	r2, r3
 800773a:	d108      	bne.n	800774e <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800773c:	7bfa      	ldrb	r2, [r7, #15]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	32de      	adds	r2, #222	@ 0xde
 8007742:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800774c:	e005      	b.n	800775a <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	3301      	adds	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0e5      	beq.n	8007726 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d016      	beq.n	8007792 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	4798      	blx	r3
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2206      	movs	r2, #6
 800777a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007782:	2103      	movs	r1, #3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
 8007788:	e006      	b.n	8007798 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	220d      	movs	r2, #13
 800778e:	701a      	strb	r2, [r3, #0]
 8007790:	e002      	b.n	8007798 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	220d      	movs	r2, #13
 8007796:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2205      	movs	r2, #5
 800779c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80077ac:	2300      	movs	r3, #0
 80077ae:	2200      	movs	r2, #0
 80077b0:	f001 fd78 	bl	80092a4 <osMessageQueuePut>
#endif
#endif
      break;
 80077b4:	e084      	b.n	80078c0 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d017      	beq.n	80077f0 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4798      	blx	r3
 80077cc:	4603      	mov	r3, r0
 80077ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d103      	bne.n	80077e0 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	220b      	movs	r2, #11
 80077dc:	701a      	strb	r2, [r3, #0]
 80077de:	e00a      	b.n	80077f6 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d106      	bne.n	80077f6 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	220d      	movs	r2, #13
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	e002      	b.n	80077f6 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	220d      	movs	r2, #13
 80077f4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2205      	movs	r2, #5
 80077fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800780a:	2300      	movs	r3, #0
 800780c:	2200      	movs	r2, #0
 800780e:	f001 fd49 	bl	80092a4 <osMessageQueuePut>
#endif
#endif
      break;
 8007812:	e055      	b.n	80078c0 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d04f      	beq.n	80078be <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
      }
      break;
 800782a:	e048      	b.n	80078be <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff fccf 	bl	80071d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d009      	beq.n	8007858 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007868:	2105      	movs	r1, #5
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b01      	cmp	r3, #1
 8007878:	d107      	bne.n	800788a <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff fda7 	bl	80073d6 <USBH_Start>
 8007888:	e002      	b.n	8007890 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f004 fc86 	bl	800c19c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80078a4:	2300      	movs	r3, #0
 80078a6:	2200      	movs	r2, #0
 80078a8:	f001 fcfc 	bl	80092a4 <osMessageQueuePut>
#endif
#endif
      break;
 80078ac:	e008      	b.n	80078c0 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80078ae:	bf00      	nop
 80078b0:	e006      	b.n	80078c0 <USBH_Process+0x4c8>
      break;
 80078b2:	bf00      	nop
 80078b4:	e004      	b.n	80078c0 <USBH_Process+0x4c8>
      break;
 80078b6:	bf00      	nop
 80078b8:	e002      	b.n	80078c0 <USBH_Process+0x4c8>
    break;
 80078ba:	bf00      	nop
 80078bc:	e000      	b.n	80078c0 <USBH_Process+0x4c8>
      break;
 80078be:	bf00      	nop
  }
  return USBH_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop

080078cc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af04      	add	r7, sp, #16
 80078d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80078d8:	2301      	movs	r3, #1
 80078da:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	785b      	ldrb	r3, [r3, #1]
 80078e0:	2b07      	cmp	r3, #7
 80078e2:	f200 8204 	bhi.w	8007cee <USBH_HandleEnum+0x422>
 80078e6:	a201      	add	r2, pc, #4	@ (adr r2, 80078ec <USBH_HandleEnum+0x20>)
 80078e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ec:	0800790d 	.word	0x0800790d
 80078f0:	080079c7 	.word	0x080079c7
 80078f4:	08007a31 	.word	0x08007a31
 80078f8:	08007abb 	.word	0x08007abb
 80078fc:	08007b25 	.word	0x08007b25
 8007900:	08007b95 	.word	0x08007b95
 8007904:	08007c31 	.word	0x08007c31
 8007908:	08007caf 	.word	0x08007caf
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800790c:	2108      	movs	r1, #8
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fae8 	bl	8007ee4 <USBH_Get_DevDesc>
 8007914:	4603      	mov	r3, r0
 8007916:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d12e      	bne.n	800797c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	7919      	ldrb	r1, [r3, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007942:	9202      	str	r2, [sp, #8]
 8007944:	2200      	movs	r2, #0
 8007946:	9201      	str	r2, [sp, #4]
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	4603      	mov	r3, r0
 800794c:	2280      	movs	r2, #128	@ 0x80
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 fa68 	bl	8008e24 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	7959      	ldrb	r1, [r3, #5]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007968:	9202      	str	r2, [sp, #8]
 800796a:	2200      	movs	r2, #0
 800796c:	9201      	str	r2, [sp, #4]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	4603      	mov	r3, r0
 8007972:	2200      	movs	r2, #0
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 fa55 	bl	8008e24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800797a:	e1ba      	b.n	8007cf2 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	2b03      	cmp	r3, #3
 8007980:	f040 81b7 	bne.w	8007cf2 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800798a:	3301      	adds	r3, #1
 800798c:	b2da      	uxtb	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800799a:	2b03      	cmp	r3, #3
 800799c:	d903      	bls.n	80079a6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	220d      	movs	r2, #13
 80079a2:	701a      	strb	r2, [r3, #0]
      break;
 80079a4:	e1a5      	b.n	8007cf2 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	795b      	ldrb	r3, [r3, #5]
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 fa89 	bl	8008ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	791b      	ldrb	r3, [r3, #4]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 fa83 	bl	8008ec4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
      break;
 80079c4:	e195      	b.n	8007cf2 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80079c6:	2112      	movs	r1, #18
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fa8b 	bl	8007ee4 <USBH_Get_DevDesc>
 80079ce:	4603      	mov	r3, r0
 80079d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d103      	bne.n	80079e0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079de:	e18a      	b.n	8007cf6 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	f040 8187 	bne.w	8007cf6 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079ee:	3301      	adds	r3, #1
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d903      	bls.n	8007a0a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	220d      	movs	r2, #13
 8007a06:	701a      	strb	r2, [r3, #0]
      break;
 8007a08:	e175      	b.n	8007cf6 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	795b      	ldrb	r3, [r3, #5]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 fa57 	bl	8008ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	791b      	ldrb	r3, [r3, #4]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 fa51 	bl	8008ec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
      break;
 8007a2e:	e162      	b.n	8007cf6 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a30:	2101      	movs	r1, #1
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fb15 	bl	8008062 <USBH_SetAddress>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d130      	bne.n	8007aa4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007a42:	2002      	movs	r0, #2
 8007a44:	f004 fd11 	bl	800c46a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2203      	movs	r2, #3
 8007a54:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	7919      	ldrb	r1, [r3, #4]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a6a:	9202      	str	r2, [sp, #8]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	9201      	str	r2, [sp, #4]
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	4603      	mov	r3, r0
 8007a74:	2280      	movs	r2, #128	@ 0x80
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 f9d4 	bl	8008e24 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	7959      	ldrb	r1, [r3, #5]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a90:	9202      	str	r2, [sp, #8]
 8007a92:	2200      	movs	r2, #0
 8007a94:	9201      	str	r2, [sp, #4]
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 f9c1 	bl	8008e24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007aa2:	e12a      	b.n	8007cfa <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	f040 8127 	bne.w	8007cfa <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	220d      	movs	r2, #13
 8007ab0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	705a      	strb	r2, [r3, #1]
      break;
 8007ab8:	e11f      	b.n	8007cfa <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007aba:	2109      	movs	r1, #9
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fa3d 	bl	8007f3c <USBH_Get_CfgDesc>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d103      	bne.n	8007ad4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2204      	movs	r2, #4
 8007ad0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ad2:	e114      	b.n	8007cfe <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	f040 8111 	bne.w	8007cfe <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d903      	bls.n	8007afe <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	220d      	movs	r2, #13
 8007afa:	701a      	strb	r2, [r3, #0]
      break;
 8007afc:	e0ff      	b.n	8007cfe <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	795b      	ldrb	r3, [r3, #5]
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 f9dd 	bl	8008ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	791b      	ldrb	r3, [r3, #4]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 f9d7 	bl	8008ec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	701a      	strb	r2, [r3, #0]
      break;
 8007b22:	e0ec      	b.n	8007cfe <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fa05 	bl	8007f3c <USBH_Get_CfgDesc>
 8007b32:	4603      	mov	r3, r0
 8007b34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d103      	bne.n	8007b44 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2205      	movs	r2, #5
 8007b40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b42:	e0de      	b.n	8007d02 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	f040 80db 	bne.w	8007d02 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b52:	3301      	adds	r3, #1
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d903      	bls.n	8007b6e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	220d      	movs	r2, #13
 8007b6a:	701a      	strb	r2, [r3, #0]
      break;
 8007b6c:	e0c9      	b.n	8007d02 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	795b      	ldrb	r3, [r3, #5]
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 f9a5 	bl	8008ec4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	791b      	ldrb	r3, [r3, #4]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 f99f 	bl	8008ec4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
      break;
 8007b92:	e0b6      	b.n	8007d02 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d036      	beq.n	8007c0c <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007baa:	23ff      	movs	r3, #255	@ 0xff
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f9ef 	bl	8007f90 <USBH_Get_StringDesc>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d111      	bne.n	8007be0 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2206      	movs	r2, #6
 8007bc0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2205      	movs	r2, #5
 8007bc6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f001 fb63 	bl	80092a4 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bde:	e092      	b.n	8007d06 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	f040 808f 	bne.w	8007d06 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2206      	movs	r2, #6
 8007bec:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2205      	movs	r2, #5
 8007bf2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007c02:	2300      	movs	r3, #0
 8007c04:	2200      	movs	r2, #0
 8007c06:	f001 fb4d 	bl	80092a4 <osMessageQueuePut>
      break;
 8007c0a:	e07c      	b.n	8007d06 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2206      	movs	r2, #6
 8007c10:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2205      	movs	r2, #5
 8007c16:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007c26:	2300      	movs	r3, #0
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f001 fb3b 	bl	80092a4 <osMessageQueuePut>
      break;
 8007c2e:	e06a      	b.n	8007d06 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d027      	beq.n	8007c8a <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c46:	23ff      	movs	r3, #255	@ 0xff
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f9a1 	bl	8007f90 <USBH_Get_StringDesc>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d103      	bne.n	8007c60 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2207      	movs	r2, #7
 8007c5c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c5e:	e054      	b.n	8007d0a <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d151      	bne.n	8007d0a <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2207      	movs	r2, #7
 8007c6a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2205      	movs	r2, #5
 8007c70:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007c80:	2300      	movs	r3, #0
 8007c82:	2200      	movs	r2, #0
 8007c84:	f001 fb0e 	bl	80092a4 <osMessageQueuePut>
      break;
 8007c88:	e03f      	b.n	8007d0a <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2207      	movs	r2, #7
 8007c8e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2205      	movs	r2, #5
 8007c94:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f001 fafc 	bl	80092a4 <osMessageQueuePut>
      break;
 8007cac:	e02d      	b.n	8007d0a <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d017      	beq.n	8007ce8 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cc4:	23ff      	movs	r3, #255	@ 0xff
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f962 	bl	8007f90 <USBH_Get_StringDesc>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d102      	bne.n	8007cdc <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007cda:	e018      	b.n	8007d0e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d115      	bne.n	8007d0e <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce6:	e012      	b.n	8007d0e <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	73fb      	strb	r3, [r7, #15]
      break;
 8007cec:	e00f      	b.n	8007d0e <USBH_HandleEnum+0x442>

    default:
      break;
 8007cee:	bf00      	nop
 8007cf0:	e00e      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007cf2:	bf00      	nop
 8007cf4:	e00c      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007cf6:	bf00      	nop
 8007cf8:	e00a      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007cfa:	bf00      	nop
 8007cfc:	e008      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007cfe:	bf00      	nop
 8007d00:	e006      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007d02:	bf00      	nop
 8007d04:	e004      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007d06:	bf00      	nop
 8007d08:	e002      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007d0a:	bf00      	nop
 8007d0c:	e000      	b.n	8007d10 <USBH_HandleEnum+0x444>
      break;
 8007d0e:	bf00      	nop
  }
  return Status;
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop

08007d1c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b082      	sub	sp, #8
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f804 	bl	8007d5e <USBH_HandleSof>
}
 8007d56:	bf00      	nop
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b0b      	cmp	r3, #11
 8007d6e:	d10a      	bne.n	8007d86 <USBH_HandleSof+0x28>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d005      	beq.n	8007d86 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	4798      	blx	r3
  }
}
 8007d86:	bf00      	nop
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007db2:	2300      	movs	r3, #0
 8007db4:	2200      	movs	r2, #0
 8007db6:	f001 fa75 	bl	80092a4 <osMessageQueuePut>
#endif
#endif

  return;
 8007dba:	bf00      	nop
}
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007dd2:	bf00      	nop
}
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007e12:	2300      	movs	r3, #0
 8007e14:	2200      	movs	r2, #0
 8007e16:	f001 fa45 	bl	80092a4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f004 f9c4 	bl	800c1d2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	791b      	ldrb	r3, [r3, #4]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 f837 	bl	8008ec4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	795b      	ldrb	r3, [r3, #5]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 f831 	bl	8008ec4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007e76:	2300      	movs	r3, #0
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f001 fa13 	bl	80092a4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007e9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f001 fa5f 	bl	8009364 <osMessageQueueGet>
 8007ea6:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1f0      	bne.n	8007e90 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff faa2 	bl	80073f8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007eb4:	e7ec      	b.n	8007e90 <USBH_Process_OS+0x8>

08007eb6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f001 f9e5 	bl	80092a4 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af02      	add	r7, sp, #8
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007ef0:	887b      	ldrh	r3, [r7, #2]
 8007ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ef6:	d901      	bls.n	8007efc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e01b      	b.n	8007f34 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007f02:	887b      	ldrh	r3, [r7, #2]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	4613      	mov	r3, r2
 8007f08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f872 	bl	8007ff8 <USBH_GetDescriptor>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d109      	bne.n	8007f32 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f24:	887a      	ldrh	r2, [r7, #2]
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f929 	bl	8008180 <USBH_ParseDevDesc>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af02      	add	r7, sp, #8
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	331c      	adds	r3, #28
 8007f4c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007f4e:	887b      	ldrh	r3, [r7, #2]
 8007f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f54:	d901      	bls.n	8007f5a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e016      	b.n	8007f88 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f5a:	887b      	ldrh	r3, [r7, #2]
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f64:	2100      	movs	r1, #0
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f846 	bl	8007ff8 <USBH_GetDescriptor>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d107      	bne.n	8007f86 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007f76:	887b      	ldrh	r3, [r7, #2]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f9af 	bl	80082e0 <USBH_ParseCfgDesc>
 8007f82:	4603      	mov	r3, r0
 8007f84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	607a      	str	r2, [r7, #4]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	72fb      	strb	r3, [r7, #11]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007fa4:	893b      	ldrh	r3, [r7, #8]
 8007fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007faa:	d802      	bhi.n	8007fb2 <USBH_Get_StringDesc+0x22>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e01c      	b.n	8007ff0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007fb6:	7afb      	ldrb	r3, [r7, #11]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007fbe:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007fc6:	893b      	ldrh	r3, [r7, #8]
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	2100      	movs	r1, #0
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 f812 	bl	8007ff8 <USBH_GetDescriptor>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d107      	bne.n	8007fee <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007fe4:	893a      	ldrh	r2, [r7, #8]
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 fb8d 	bl	8008708 <USBH_ParseStringDesc>
  }

  return status;
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3718      	adds	r7, #24
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	607b      	str	r3, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	72fb      	strb	r3, [r7, #11]
 8008006:	4613      	mov	r3, r2
 8008008:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	789b      	ldrb	r3, [r3, #2]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d11c      	bne.n	800804c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008012:	7afb      	ldrb	r3, [r7, #11]
 8008014:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008018:	b2da      	uxtb	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2206      	movs	r2, #6
 8008022:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	893a      	ldrh	r2, [r7, #8]
 8008028:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800802a:	893b      	ldrh	r3, [r7, #8]
 800802c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008030:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008034:	d104      	bne.n	8008040 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f240 4209 	movw	r2, #1033	@ 0x409
 800803c:	829a      	strh	r2, [r3, #20]
 800803e:	e002      	b.n	8008046 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8b3a      	ldrh	r2, [r7, #24]
 800804a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800804c:	8b3b      	ldrh	r3, [r7, #24]
 800804e:	461a      	mov	r2, r3
 8008050:	6879      	ldr	r1, [r7, #4]
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 fba5 	bl	80087a2 <USBH_CtlReq>
 8008058:	4603      	mov	r3, r0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	789b      	ldrb	r3, [r3, #2]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d10f      	bne.n	8008096 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2205      	movs	r2, #5
 8008080:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008082:	78fb      	ldrb	r3, [r7, #3]
 8008084:	b29a      	uxth	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008096:	2200      	movs	r2, #0
 8008098:	2100      	movs	r1, #0
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fb81 	bl	80087a2 <USBH_CtlReq>
 80080a0:	4603      	mov	r3, r0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	789b      	ldrb	r3, [r3, #2]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d10e      	bne.n	80080dc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2209      	movs	r2, #9
 80080c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	887a      	ldrh	r2, [r7, #2]
 80080ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080dc:	2200      	movs	r2, #0
 80080de:	2100      	movs	r1, #0
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fb5e 	bl	80087a2 <USBH_CtlReq>
 80080e6:	4603      	mov	r3, r0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	789b      	ldrb	r3, [r3, #2]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d10f      	bne.n	8008124 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2203      	movs	r2, #3
 800810e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	b29a      	uxth	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008124:	2200      	movs	r2, #0
 8008126:	2100      	movs	r1, #0
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fb3a 	bl	80087a2 <USBH_CtlReq>
 800812e:	4603      	mov	r3, r0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	789b      	ldrb	r3, [r3, #2]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d10f      	bne.n	800816c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800815e:	78fb      	ldrb	r3, [r7, #3]
 8008160:	b29a      	uxth	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800816c:	2200      	movs	r2, #0
 800816e:	2100      	movs	r1, #0
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fb16 	bl	80087a2 <USBH_CtlReq>
 8008176:	4603      	mov	r3, r0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	4613      	mov	r3, r2
 800818c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008194:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80081a0:	2302      	movs	r3, #2
 80081a2:	e094      	b.n	80082ce <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	781a      	ldrb	r2, [r3, #0]
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	785a      	ldrb	r2, [r3, #1]
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	3302      	adds	r3, #2
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	3303      	adds	r3, #3
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	4313      	orrs	r3, r2
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	791a      	ldrb	r2, [r3, #4]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	795a      	ldrb	r2, [r3, #5]
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	799a      	ldrb	r2, [r3, #6]
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	79da      	ldrb	r2, [r3, #7]
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d004      	beq.n	8008202 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d11b      	bne.n	800823a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	79db      	ldrb	r3, [r3, #7]
 8008206:	2b20      	cmp	r3, #32
 8008208:	dc0f      	bgt.n	800822a <USBH_ParseDevDesc+0xaa>
 800820a:	2b08      	cmp	r3, #8
 800820c:	db0f      	blt.n	800822e <USBH_ParseDevDesc+0xae>
 800820e:	3b08      	subs	r3, #8
 8008210:	4a32      	ldr	r2, [pc, #200]	@ (80082dc <USBH_ParseDevDesc+0x15c>)
 8008212:	fa22 f303 	lsr.w	r3, r2, r3
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	bf14      	ite	ne
 800821e:	2301      	movne	r3, #1
 8008220:	2300      	moveq	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	d106      	bne.n	8008236 <USBH_ParseDevDesc+0xb6>
 8008228:	e001      	b.n	800822e <USBH_ParseDevDesc+0xae>
 800822a:	2b40      	cmp	r3, #64	@ 0x40
 800822c:	d003      	beq.n	8008236 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2208      	movs	r2, #8
 8008232:	71da      	strb	r2, [r3, #7]
        break;
 8008234:	e000      	b.n	8008238 <USBH_ParseDevDesc+0xb8>
        break;
 8008236:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008238:	e00e      	b.n	8008258 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008240:	2b02      	cmp	r3, #2
 8008242:	d107      	bne.n	8008254 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	79db      	ldrb	r3, [r3, #7]
 8008248:	2b08      	cmp	r3, #8
 800824a:	d005      	beq.n	8008258 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	2208      	movs	r2, #8
 8008250:	71da      	strb	r2, [r3, #7]
 8008252:	e001      	b.n	8008258 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008254:	2303      	movs	r3, #3
 8008256:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008258:	88fb      	ldrh	r3, [r7, #6]
 800825a:	2b08      	cmp	r3, #8
 800825c:	d936      	bls.n	80082cc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	3308      	adds	r3, #8
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	3309      	adds	r3, #9
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	b29b      	uxth	r3, r3
 8008270:	4313      	orrs	r3, r2
 8008272:	b29a      	uxth	r2, r3
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	330a      	adds	r3, #10
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	330b      	adds	r3, #11
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	021b      	lsls	r3, r3, #8
 8008288:	b29b      	uxth	r3, r3
 800828a:	4313      	orrs	r3, r2
 800828c:	b29a      	uxth	r2, r3
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	330c      	adds	r3, #12
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	461a      	mov	r2, r3
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	330d      	adds	r3, #13
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	021b      	lsls	r3, r3, #8
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	4313      	orrs	r3, r2
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	7b9a      	ldrb	r2, [r3, #14]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	7bda      	ldrb	r2, [r3, #15]
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	7c1a      	ldrb	r2, [r3, #16]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	7c5a      	ldrb	r2, [r3, #17]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	371c      	adds	r7, #28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	01000101 	.word	0x01000101

080082e0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08c      	sub	sp, #48	@ 0x30
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	4613      	mov	r3, r2
 80082ec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80082f4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800830e:	2302      	movs	r3, #2
 8008310:	e0da      	b.n	80084c8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	781a      	ldrb	r2, [r3, #0]
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	785a      	ldrb	r2, [r3, #1]
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	3302      	adds	r3, #2
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	461a      	mov	r2, r3
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	3303      	adds	r3, #3
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	021b      	lsls	r3, r3, #8
 8008336:	b29b      	uxth	r3, r3
 8008338:	4313      	orrs	r3, r2
 800833a:	b29b      	uxth	r3, r3
 800833c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008340:	bf28      	it	cs
 8008342:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008346:	b29a      	uxth	r2, r3
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	791a      	ldrb	r2, [r3, #4]
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	795a      	ldrb	r2, [r3, #5]
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	799a      	ldrb	r2, [r3, #6]
 8008360:	6a3b      	ldr	r3, [r7, #32]
 8008362:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	79da      	ldrb	r2, [r3, #7]
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	7a1a      	ldrb	r2, [r3, #8]
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b09      	cmp	r3, #9
 800837a:	d002      	beq.n	8008382 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	2209      	movs	r2, #9
 8008380:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008382:	88fb      	ldrh	r3, [r7, #6]
 8008384:	2b09      	cmp	r3, #9
 8008386:	f240 809d 	bls.w	80084c4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800838a:	2309      	movs	r3, #9
 800838c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800838e:	2300      	movs	r3, #0
 8008390:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008392:	e081      	b.n	8008498 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008394:	f107 0316 	add.w	r3, r7, #22
 8008398:	4619      	mov	r1, r3
 800839a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800839c:	f000 f9e7 	bl	800876e <USBH_GetNextDesc>
 80083a0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80083a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d176      	bne.n	8008498 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80083aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b09      	cmp	r3, #9
 80083b0:	d002      	beq.n	80083b8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80083b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b4:	2209      	movs	r2, #9
 80083b6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80083b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083bc:	221a      	movs	r2, #26
 80083be:	fb02 f303 	mul.w	r3, r2, r3
 80083c2:	3308      	adds	r3, #8
 80083c4:	6a3a      	ldr	r2, [r7, #32]
 80083c6:	4413      	add	r3, r2
 80083c8:	3302      	adds	r3, #2
 80083ca:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80083cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083ce:	69f8      	ldr	r0, [r7, #28]
 80083d0:	f000 f87e 	bl	80084d0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083de:	e043      	b.n	8008468 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80083e0:	f107 0316 	add.w	r3, r7, #22
 80083e4:	4619      	mov	r1, r3
 80083e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083e8:	f000 f9c1 	bl	800876e <USBH_GetNextDesc>
 80083ec:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	2b05      	cmp	r3, #5
 80083f4:	d138      	bne.n	8008468 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	795b      	ldrb	r3, [r3, #5]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d113      	bne.n	8008426 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008402:	2b02      	cmp	r3, #2
 8008404:	d003      	beq.n	800840e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	799b      	ldrb	r3, [r3, #6]
 800840a:	2b03      	cmp	r3, #3
 800840c:	d10b      	bne.n	8008426 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	79db      	ldrb	r3, [r3, #7]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10b      	bne.n	800842e <USBH_ParseCfgDesc+0x14e>
 8008416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b09      	cmp	r3, #9
 800841c:	d007      	beq.n	800842e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800841e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008420:	2209      	movs	r2, #9
 8008422:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008424:	e003      	b.n	800842e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008428:	2207      	movs	r2, #7
 800842a:	701a      	strb	r2, [r3, #0]
 800842c:	e000      	b.n	8008430 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800842e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008434:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008438:	3201      	adds	r2, #1
 800843a:	00d2      	lsls	r2, r2, #3
 800843c:	211a      	movs	r1, #26
 800843e:	fb01 f303 	mul.w	r3, r1, r3
 8008442:	4413      	add	r3, r2
 8008444:	3308      	adds	r3, #8
 8008446:	6a3a      	ldr	r2, [r7, #32]
 8008448:	4413      	add	r3, r2
 800844a:	3304      	adds	r3, #4
 800844c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800844e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008450:	69b9      	ldr	r1, [r7, #24]
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 f870 	bl	8008538 <USBH_ParseEPDesc>
 8008458:	4603      	mov	r3, r0
 800845a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800845e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008462:	3301      	adds	r3, #1
 8008464:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	791b      	ldrb	r3, [r3, #4]
 800846c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008470:	429a      	cmp	r2, r3
 8008472:	d204      	bcs.n	800847e <USBH_ParseCfgDesc+0x19e>
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	885a      	ldrh	r2, [r3, #2]
 8008478:	8afb      	ldrh	r3, [r7, #22]
 800847a:	429a      	cmp	r2, r3
 800847c:	d8b0      	bhi.n	80083e0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	791b      	ldrb	r3, [r3, #4]
 8008482:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008486:	429a      	cmp	r2, r3
 8008488:	d201      	bcs.n	800848e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800848a:	2303      	movs	r3, #3
 800848c:	e01c      	b.n	80084c8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800848e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008492:	3301      	adds	r3, #1
 8008494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800849c:	2b01      	cmp	r3, #1
 800849e:	d805      	bhi.n	80084ac <USBH_ParseCfgDesc+0x1cc>
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	885a      	ldrh	r2, [r3, #2]
 80084a4:	8afb      	ldrh	r3, [r7, #22]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	f63f af74 	bhi.w	8008394 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	791b      	ldrb	r3, [r3, #4]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	bf28      	it	cs
 80084b4:	2302      	movcs	r3, #2
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80084bc:	429a      	cmp	r2, r3
 80084be:	d201      	bcs.n	80084c4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e001      	b.n	80084c8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80084c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3730      	adds	r7, #48	@ 0x30
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	781a      	ldrb	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	785a      	ldrb	r2, [r3, #1]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	789a      	ldrb	r2, [r3, #2]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	78da      	ldrb	r2, [r3, #3]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	3304      	adds	r3, #4
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	2b02      	cmp	r3, #2
 8008502:	bf28      	it	cs
 8008504:	2302      	movcs	r3, #2
 8008506:	b2da      	uxtb	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	795a      	ldrb	r2, [r3, #5]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	799a      	ldrb	r2, [r3, #6]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	79da      	ldrb	r2, [r3, #7]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	7a1a      	ldrb	r2, [r3, #8]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	721a      	strb	r2, [r3, #8]
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	781a      	ldrb	r2, [r3, #0]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	785a      	ldrb	r2, [r3, #1]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	789a      	ldrb	r2, [r3, #2]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	78da      	ldrb	r2, [r3, #3]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3304      	adds	r3, #4
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3305      	adds	r3, #5
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	021b      	lsls	r3, r3, #8
 8008578:	b29b      	uxth	r3, r3
 800857a:	4313      	orrs	r3, r2
 800857c:	b29a      	uxth	r2, r3
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	799a      	ldrb	r2, [r3, #6]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	889b      	ldrh	r3, [r3, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d009      	beq.n	80085a6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800859a:	d804      	bhi.n	80085a6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80085a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085a4:	d901      	bls.n	80085aa <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80085a6:	2303      	movs	r3, #3
 80085a8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d136      	bne.n	8008622 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	78db      	ldrb	r3, [r3, #3]
 80085b8:	f003 0303 	and.w	r3, r3, #3
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d108      	bne.n	80085d2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	889b      	ldrh	r3, [r3, #4]
 80085c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085c8:	f240 8097 	bls.w	80086fa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085cc:	2303      	movs	r3, #3
 80085ce:	75fb      	strb	r3, [r7, #23]
 80085d0:	e093      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	78db      	ldrb	r3, [r3, #3]
 80085d6:	f003 0303 	and.w	r3, r3, #3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d107      	bne.n	80085ee <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	889b      	ldrh	r3, [r3, #4]
 80085e2:	2b40      	cmp	r3, #64	@ 0x40
 80085e4:	f240 8089 	bls.w	80086fa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085e8:	2303      	movs	r3, #3
 80085ea:	75fb      	strb	r3, [r7, #23]
 80085ec:	e085      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	78db      	ldrb	r3, [r3, #3]
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d005      	beq.n	8008606 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	78db      	ldrb	r3, [r3, #3]
 80085fe:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008602:	2b03      	cmp	r3, #3
 8008604:	d10a      	bne.n	800861c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	799b      	ldrb	r3, [r3, #6]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <USBH_ParseEPDesc+0xde>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	799b      	ldrb	r3, [r3, #6]
 8008612:	2b10      	cmp	r3, #16
 8008614:	d970      	bls.n	80086f8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008616:	2303      	movs	r3, #3
 8008618:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800861a:	e06d      	b.n	80086f8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800861c:	2303      	movs	r3, #3
 800861e:	75fb      	strb	r3, [r7, #23]
 8008620:	e06b      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008628:	2b01      	cmp	r3, #1
 800862a:	d13c      	bne.n	80086a6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	78db      	ldrb	r3, [r3, #3]
 8008630:	f003 0303 	and.w	r3, r3, #3
 8008634:	2b02      	cmp	r3, #2
 8008636:	d005      	beq.n	8008644 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	78db      	ldrb	r3, [r3, #3]
 800863c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	889b      	ldrh	r3, [r3, #4]
 8008648:	2b40      	cmp	r3, #64	@ 0x40
 800864a:	d956      	bls.n	80086fa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800864c:	2303      	movs	r3, #3
 800864e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008650:	e053      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	78db      	ldrb	r3, [r3, #3]
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	2b01      	cmp	r3, #1
 800865c:	d10e      	bne.n	800867c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	799b      	ldrb	r3, [r3, #6]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800866a:	2b10      	cmp	r3, #16
 800866c:	d803      	bhi.n	8008676 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008672:	2b40      	cmp	r3, #64	@ 0x40
 8008674:	d941      	bls.n	80086fa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008676:	2303      	movs	r3, #3
 8008678:	75fb      	strb	r3, [r7, #23]
 800867a:	e03e      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	78db      	ldrb	r3, [r3, #3]
 8008680:	f003 0303 	and.w	r3, r3, #3
 8008684:	2b03      	cmp	r3, #3
 8008686:	d10b      	bne.n	80086a0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	799b      	ldrb	r3, [r3, #6]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d004      	beq.n	800869a <USBH_ParseEPDesc+0x162>
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	889b      	ldrh	r3, [r3, #4]
 8008694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008698:	d32f      	bcc.n	80086fa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800869a:	2303      	movs	r3, #3
 800869c:	75fb      	strb	r3, [r7, #23]
 800869e:	e02c      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80086a0:	2303      	movs	r3, #3
 80086a2:	75fb      	strb	r3, [r7, #23]
 80086a4:	e029      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d120      	bne.n	80086f2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	78db      	ldrb	r3, [r3, #3]
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d106      	bne.n	80086ca <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	889b      	ldrh	r3, [r3, #4]
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d01a      	beq.n	80086fa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086c4:	2303      	movs	r3, #3
 80086c6:	75fb      	strb	r3, [r7, #23]
 80086c8:	e017      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	78db      	ldrb	r3, [r3, #3]
 80086ce:	f003 0303 	and.w	r3, r3, #3
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d10a      	bne.n	80086ec <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	799b      	ldrb	r3, [r3, #6]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <USBH_ParseEPDesc+0x1ae>
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	889b      	ldrh	r3, [r3, #4]
 80086e2:	2b08      	cmp	r3, #8
 80086e4:	d909      	bls.n	80086fa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086e6:	2303      	movs	r3, #3
 80086e8:	75fb      	strb	r3, [r7, #23]
 80086ea:	e006      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80086ec:	2303      	movs	r3, #3
 80086ee:	75fb      	strb	r3, [r7, #23]
 80086f0:	e003      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80086f2:	2303      	movs	r3, #3
 80086f4:	75fb      	strb	r3, [r7, #23]
 80086f6:	e000      	b.n	80086fa <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80086f8:	bf00      	nop
  }

  return status;
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	371c      	adds	r7, #28
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	4613      	mov	r3, r2
 8008714:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3301      	adds	r3, #1
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	2b03      	cmp	r3, #3
 800871e:	d120      	bne.n	8008762 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	1e9a      	subs	r2, r3, #2
 8008726:	88fb      	ldrh	r3, [r7, #6]
 8008728:	4293      	cmp	r3, r2
 800872a:	bf28      	it	cs
 800872c:	4613      	movcs	r3, r2
 800872e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	3302      	adds	r3, #2
 8008734:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008736:	2300      	movs	r3, #0
 8008738:	82fb      	strh	r3, [r7, #22]
 800873a:	e00b      	b.n	8008754 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800873c:	8afb      	ldrh	r3, [r7, #22]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	4413      	add	r3, r2
 8008742:	781a      	ldrb	r2, [r3, #0]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	3301      	adds	r3, #1
 800874c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800874e:	8afb      	ldrh	r3, [r7, #22]
 8008750:	3302      	adds	r3, #2
 8008752:	82fb      	strh	r3, [r7, #22]
 8008754:	8afa      	ldrh	r2, [r7, #22]
 8008756:	8abb      	ldrh	r3, [r7, #20]
 8008758:	429a      	cmp	r2, r3
 800875a:	d3ef      	bcc.n	800873c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2200      	movs	r2, #0
 8008760:	701a      	strb	r2, [r3, #0]
  }
}
 8008762:	bf00      	nop
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800876e:	b480      	push	{r7}
 8008770:	b085      	sub	sp, #20
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	7812      	ldrb	r2, [r2, #0]
 8008780:	4413      	add	r3, r2
 8008782:	b29a      	uxth	r2, r3
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4413      	add	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008794:	68fb      	ldr	r3, [r7, #12]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b086      	sub	sp, #24
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	4613      	mov	r3, r2
 80087ae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80087b0:	2301      	movs	r3, #1
 80087b2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	789b      	ldrb	r3, [r3, #2]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d002      	beq.n	80087c2 <USBH_CtlReq+0x20>
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d01d      	beq.n	80087fc <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80087c0:	e043      	b.n	800884a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	88fa      	ldrh	r2, [r7, #6]
 80087cc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2202      	movs	r2, #2
 80087d8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80087da:	2301      	movs	r3, #1
 80087dc:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2203      	movs	r2, #3
 80087e2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087f2:	2300      	movs	r3, #0
 80087f4:	2200      	movs	r2, #0
 80087f6:	f000 fd55 	bl	80092a4 <osMessageQueuePut>
      break;
 80087fa:	e026      	b.n	800884a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 f829 	bl	8008854 <USBH_HandleControl>
 8008802:	4603      	mov	r3, r0
 8008804:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <USBH_CtlReq+0x70>
 800880c:	7dfb      	ldrb	r3, [r7, #23]
 800880e:	2b03      	cmp	r3, #3
 8008810:	d106      	bne.n	8008820 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2201      	movs	r2, #1
 8008816:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	761a      	strb	r2, [r3, #24]
 800881e:	e005      	b.n	800882c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d102      	bne.n	800882c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2201      	movs	r2, #1
 800882a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2203      	movs	r2, #3
 8008830:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008840:	2300      	movs	r3, #0
 8008842:	2200      	movs	r2, #0
 8008844:	f000 fd2e 	bl	80092a4 <osMessageQueuePut>
      break;
 8008848:	bf00      	nop
  }
  return status;
 800884a:	7dfb      	ldrb	r3, [r7, #23]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3718      	adds	r7, #24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af02      	add	r7, sp, #8
 800885a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800885c:	2301      	movs	r3, #1
 800885e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008860:	2300      	movs	r3, #0
 8008862:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	7e1b      	ldrb	r3, [r3, #24]
 8008868:	3b01      	subs	r3, #1
 800886a:	2b0a      	cmp	r3, #10
 800886c:	f200 8229 	bhi.w	8008cc2 <USBH_HandleControl+0x46e>
 8008870:	a201      	add	r2, pc, #4	@ (adr r2, 8008878 <USBH_HandleControl+0x24>)
 8008872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008876:	bf00      	nop
 8008878:	080088a5 	.word	0x080088a5
 800887c:	080088bf 	.word	0x080088bf
 8008880:	08008961 	.word	0x08008961
 8008884:	08008987 	.word	0x08008987
 8008888:	08008a13 	.word	0x08008a13
 800888c:	08008a3d 	.word	0x08008a3d
 8008890:	08008aff 	.word	0x08008aff
 8008894:	08008b21 	.word	0x08008b21
 8008898:	08008bb3 	.word	0x08008bb3
 800889c:	08008bd9 	.word	0x08008bd9
 80088a0:	08008c6b 	.word	0x08008c6b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f103 0110 	add.w	r1, r3, #16
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	795b      	ldrb	r3, [r3, #5]
 80088ae:	461a      	mov	r2, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fa17 	bl	8008ce4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2202      	movs	r2, #2
 80088ba:	761a      	strb	r2, [r3, #24]
      break;
 80088bc:	e20c      	b.n	8008cd8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	795b      	ldrb	r3, [r3, #5]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f003 fd73 	bl	800c3b0 <USBH_LL_GetURBState>
 80088ca:	4603      	mov	r3, r0
 80088cc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d12c      	bne.n	800892e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	7c1b      	ldrb	r3, [r3, #16]
 80088d8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80088dc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	8adb      	ldrh	r3, [r3, #22]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00a      	beq.n	80088fc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80088e6:	7b7b      	ldrb	r3, [r7, #13]
 80088e8:	2b80      	cmp	r3, #128	@ 0x80
 80088ea:	d103      	bne.n	80088f4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2203      	movs	r2, #3
 80088f0:	761a      	strb	r2, [r3, #24]
 80088f2:	e00d      	b.n	8008910 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2205      	movs	r2, #5
 80088f8:	761a      	strb	r2, [r3, #24]
 80088fa:	e009      	b.n	8008910 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80088fc:	7b7b      	ldrb	r3, [r7, #13]
 80088fe:	2b80      	cmp	r3, #128	@ 0x80
 8008900:	d103      	bne.n	800890a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2209      	movs	r2, #9
 8008906:	761a      	strb	r2, [r3, #24]
 8008908:	e002      	b.n	8008910 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2207      	movs	r2, #7
 800890e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2203      	movs	r2, #3
 8008914:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008924:	2300      	movs	r3, #0
 8008926:	2200      	movs	r2, #0
 8008928:	f000 fcbc 	bl	80092a4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800892c:	e1cb      	b.n	8008cc6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800892e:	7bbb      	ldrb	r3, [r7, #14]
 8008930:	2b04      	cmp	r3, #4
 8008932:	d003      	beq.n	800893c <USBH_HandleControl+0xe8>
 8008934:	7bbb      	ldrb	r3, [r7, #14]
 8008936:	2b02      	cmp	r3, #2
 8008938:	f040 81c5 	bne.w	8008cc6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	220b      	movs	r2, #11
 8008940:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2203      	movs	r2, #3
 8008946:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008956:	2300      	movs	r3, #0
 8008958:	2200      	movs	r2, #0
 800895a:	f000 fca3 	bl	80092a4 <osMessageQueuePut>
      break;
 800895e:	e1b2      	b.n	8008cc6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008966:	b29a      	uxth	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6899      	ldr	r1, [r3, #8]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	899a      	ldrh	r2, [r3, #12]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	791b      	ldrb	r3, [r3, #4]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f9f2 	bl	8008d62 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2204      	movs	r2, #4
 8008982:	761a      	strb	r2, [r3, #24]
      break;
 8008984:	e1a8      	b.n	8008cd8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	791b      	ldrb	r3, [r3, #4]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f003 fd0f 	bl	800c3b0 <USBH_LL_GetURBState>
 8008992:	4603      	mov	r3, r0
 8008994:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d110      	bne.n	80089be <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2209      	movs	r2, #9
 80089a0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2203      	movs	r2, #3
 80089a6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80089b6:	2300      	movs	r3, #0
 80089b8:	2200      	movs	r2, #0
 80089ba:	f000 fc73 	bl	80092a4 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	2b05      	cmp	r3, #5
 80089c2:	d110      	bne.n	80089e6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80089c4:	2303      	movs	r3, #3
 80089c6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2203      	movs	r2, #3
 80089cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80089dc:	2300      	movs	r3, #0
 80089de:	2200      	movs	r2, #0
 80089e0:	f000 fc60 	bl	80092a4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089e4:	e171      	b.n	8008cca <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b04      	cmp	r3, #4
 80089ea:	f040 816e 	bne.w	8008cca <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	220b      	movs	r2, #11
 80089f2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2203      	movs	r2, #3
 80089f8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f000 fc4a 	bl	80092a4 <osMessageQueuePut>
      break;
 8008a10:	e15b      	b.n	8008cca <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6899      	ldr	r1, [r3, #8]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	899a      	ldrh	r2, [r3, #12]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	795b      	ldrb	r3, [r3, #5]
 8008a1e:	2001      	movs	r0, #1
 8008a20:	9000      	str	r0, [sp, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f978 	bl	8008d18 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2206      	movs	r2, #6
 8008a38:	761a      	strb	r2, [r3, #24]
      break;
 8008a3a:	e14d      	b.n	8008cd8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	795b      	ldrb	r3, [r3, #5]
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f003 fcb4 	bl	800c3b0 <USBH_LL_GetURBState>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d111      	bne.n	8008a76 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2207      	movs	r2, #7
 8008a56:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2203      	movs	r2, #3
 8008a5c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f000 fc18 	bl	80092a4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a74:	e12b      	b.n	8008cce <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	2b05      	cmp	r3, #5
 8008a7a:	d113      	bne.n	8008aa4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	220c      	movs	r2, #12
 8008a80:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a82:	2303      	movs	r3, #3
 8008a84:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2203      	movs	r2, #3
 8008a8a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f000 fc01 	bl	80092a4 <osMessageQueuePut>
      break;
 8008aa2:	e114      	b.n	8008cce <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d111      	bne.n	8008ace <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2205      	movs	r2, #5
 8008aae:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2203      	movs	r2, #3
 8008ab4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f000 fbec 	bl	80092a4 <osMessageQueuePut>
      break;
 8008acc:	e0ff      	b.n	8008cce <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	f040 80fc 	bne.w	8008cce <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	220b      	movs	r2, #11
 8008ada:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008adc:	2302      	movs	r3, #2
 8008ade:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2203      	movs	r2, #3
 8008ae4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008af4:	2300      	movs	r3, #0
 8008af6:	2200      	movs	r2, #0
 8008af8:	f000 fbd4 	bl	80092a4 <osMessageQueuePut>
      break;
 8008afc:	e0e7      	b.n	8008cce <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	791b      	ldrb	r3, [r3, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	2100      	movs	r1, #0
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f92b 	bl	8008d62 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2208      	movs	r2, #8
 8008b1c:	761a      	strb	r2, [r3, #24]

      break;
 8008b1e:	e0db      	b.n	8008cd8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	791b      	ldrb	r3, [r3, #4]
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f003 fc42 	bl	800c3b0 <USBH_LL_GetURBState>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d113      	bne.n	8008b5e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	220d      	movs	r2, #13
 8008b3a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2203      	movs	r2, #3
 8008b44:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b54:	2300      	movs	r3, #0
 8008b56:	2200      	movs	r2, #0
 8008b58:	f000 fba4 	bl	80092a4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b5c:	e0b9      	b.n	8008cd2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d111      	bne.n	8008b88 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	220b      	movs	r2, #11
 8008b68:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2203      	movs	r2, #3
 8008b6e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b7e:	2300      	movs	r3, #0
 8008b80:	2200      	movs	r2, #0
 8008b82:	f000 fb8f 	bl	80092a4 <osMessageQueuePut>
      break;
 8008b86:	e0a4      	b.n	8008cd2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	2b05      	cmp	r3, #5
 8008b8c:	f040 80a1 	bne.w	8008cd2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8008b90:	2303      	movs	r3, #3
 8008b92:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2203      	movs	r2, #3
 8008b98:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ba8:	2300      	movs	r3, #0
 8008baa:	2200      	movs	r2, #0
 8008bac:	f000 fb7a 	bl	80092a4 <osMessageQueuePut>
      break;
 8008bb0:	e08f      	b.n	8008cd2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	795b      	ldrb	r3, [r3, #5]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	9200      	str	r2, [sp, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f8aa 	bl	8008d18 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	220a      	movs	r2, #10
 8008bd4:	761a      	strb	r2, [r3, #24]
      break;
 8008bd6:	e07f      	b.n	8008cd8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	795b      	ldrb	r3, [r3, #5]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f003 fbe6 	bl	800c3b0 <USBH_LL_GetURBState>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d113      	bne.n	8008c16 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	220d      	movs	r2, #13
 8008bf6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2203      	movs	r2, #3
 8008bfc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f000 fb48 	bl	80092a4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c14:	e05f      	b.n	8008cd6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d111      	bne.n	8008c40 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2209      	movs	r2, #9
 8008c20:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2203      	movs	r2, #3
 8008c26:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c36:	2300      	movs	r3, #0
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f000 fb33 	bl	80092a4 <osMessageQueuePut>
      break;
 8008c3e:	e04a      	b.n	8008cd6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	d147      	bne.n	8008cd6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	220b      	movs	r2, #11
 8008c4a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2203      	movs	r2, #3
 8008c50:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c60:	2300      	movs	r3, #0
 8008c62:	2200      	movs	r2, #0
 8008c64:	f000 fb1e 	bl	80092a4 <osMessageQueuePut>
      break;
 8008c68:	e035      	b.n	8008cd6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	7e5b      	ldrb	r3, [r3, #25]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	765a      	strb	r2, [r3, #25]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	7e5b      	ldrb	r3, [r3, #25]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d806      	bhi.n	8008c8c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008c8a:	e025      	b.n	8008cd8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c92:	2106      	movs	r1, #6
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	795b      	ldrb	r3, [r3, #5]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f90d 	bl	8008ec4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	791b      	ldrb	r3, [r3, #4]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f907 	bl	8008ec4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8008cc0:	e00a      	b.n	8008cd8 <USBH_HandleControl+0x484>

    default:
      break;
 8008cc2:	bf00      	nop
 8008cc4:	e008      	b.n	8008cd8 <USBH_HandleControl+0x484>
      break;
 8008cc6:	bf00      	nop
 8008cc8:	e006      	b.n	8008cd8 <USBH_HandleControl+0x484>
      break;
 8008cca:	bf00      	nop
 8008ccc:	e004      	b.n	8008cd8 <USBH_HandleControl+0x484>
      break;
 8008cce:	bf00      	nop
 8008cd0:	e002      	b.n	8008cd8 <USBH_HandleControl+0x484>
      break;
 8008cd2:	bf00      	nop
 8008cd4:	e000      	b.n	8008cd8 <USBH_HandleControl+0x484>
      break;
 8008cd6:	bf00      	nop
  }

  return status;
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop

08008ce4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b088      	sub	sp, #32
 8008ce8:	af04      	add	r7, sp, #16
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cf2:	79f9      	ldrb	r1, [r7, #7]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	9303      	str	r3, [sp, #12]
 8008cf8:	2308      	movs	r3, #8
 8008cfa:	9302      	str	r3, [sp, #8]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	2300      	movs	r3, #0
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	2300      	movs	r3, #0
 8008d06:	2200      	movs	r2, #0
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f003 fb20 	bl	800c34e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b088      	sub	sp, #32
 8008d1c:	af04      	add	r7, sp, #16
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	4611      	mov	r1, r2
 8008d24:	461a      	mov	r2, r3
 8008d26:	460b      	mov	r3, r1
 8008d28:	80fb      	strh	r3, [r7, #6]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d3c:	7979      	ldrb	r1, [r7, #5]
 8008d3e:	7e3b      	ldrb	r3, [r7, #24]
 8008d40:	9303      	str	r3, [sp, #12]
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	9302      	str	r3, [sp, #8]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	9301      	str	r3, [sp, #4]
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	2200      	movs	r2, #0
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f003 fafb 	bl	800c34e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b088      	sub	sp, #32
 8008d66:	af04      	add	r7, sp, #16
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	461a      	mov	r2, r3
 8008d70:	460b      	mov	r3, r1
 8008d72:	80fb      	strh	r3, [r7, #6]
 8008d74:	4613      	mov	r3, r2
 8008d76:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d78:	7979      	ldrb	r1, [r7, #5]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	9303      	str	r3, [sp, #12]
 8008d7e:	88fb      	ldrh	r3, [r7, #6]
 8008d80:	9302      	str	r3, [sp, #8]
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	9301      	str	r3, [sp, #4]
 8008d86:	2301      	movs	r3, #1
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f003 fadd 	bl	800c34e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008d94:	2300      	movs	r3, #0

}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b088      	sub	sp, #32
 8008da2:	af04      	add	r7, sp, #16
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	4611      	mov	r1, r2
 8008daa:	461a      	mov	r2, r3
 8008dac:	460b      	mov	r3, r1
 8008dae:	80fb      	strh	r3, [r7, #6]
 8008db0:	4613      	mov	r3, r2
 8008db2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dc2:	7979      	ldrb	r1, [r7, #5]
 8008dc4:	7e3b      	ldrb	r3, [r7, #24]
 8008dc6:	9303      	str	r3, [sp, #12]
 8008dc8:	88fb      	ldrh	r3, [r7, #6]
 8008dca:	9302      	str	r3, [sp, #8]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f003 fab8 	bl	800c34e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af04      	add	r7, sp, #16
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	4611      	mov	r1, r2
 8008df4:	461a      	mov	r2, r3
 8008df6:	460b      	mov	r3, r1
 8008df8:	80fb      	strh	r3, [r7, #6]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008dfe:	7979      	ldrb	r1, [r7, #5]
 8008e00:	2300      	movs	r3, #0
 8008e02:	9303      	str	r3, [sp, #12]
 8008e04:	88fb      	ldrh	r3, [r7, #6]
 8008e06:	9302      	str	r3, [sp, #8]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	9301      	str	r3, [sp, #4]
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	2302      	movs	r3, #2
 8008e12:	2201      	movs	r2, #1
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f003 fa9a 	bl	800c34e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af04      	add	r7, sp, #16
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	4611      	mov	r1, r2
 8008e30:	461a      	mov	r2, r3
 8008e32:	4603      	mov	r3, r0
 8008e34:	70fb      	strb	r3, [r7, #3]
 8008e36:	460b      	mov	r3, r1
 8008e38:	70bb      	strb	r3, [r7, #2]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008e3e:	7878      	ldrb	r0, [r7, #1]
 8008e40:	78ba      	ldrb	r2, [r7, #2]
 8008e42:	78f9      	ldrb	r1, [r7, #3]
 8008e44:	8b3b      	ldrh	r3, [r7, #24]
 8008e46:	9302      	str	r3, [sp, #8]
 8008e48:	7d3b      	ldrb	r3, [r7, #20]
 8008e4a:	9301      	str	r3, [sp, #4]
 8008e4c:	7c3b      	ldrb	r3, [r7, #16]
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	4603      	mov	r3, r0
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f003 fa2d 	bl	800c2b2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008e6e:	78fb      	ldrb	r3, [r7, #3]
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f003 fa4c 	bl	800c310 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f836 	bl	8008f00 <USBH_GetFreePipe>
 8008e94:	4603      	mov	r3, r0
 8008e96:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008e98:	89fb      	ldrh	r3, [r7, #14]
 8008e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d00a      	beq.n	8008eb8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	89fb      	ldrh	r3, [r7, #14]
 8008ea6:	f003 030f 	and.w	r3, r3, #15
 8008eaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008eae:	6879      	ldr	r1, [r7, #4]
 8008eb0:	33e0      	adds	r3, #224	@ 0xe0
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008eb8:	89fb      	ldrh	r3, [r7, #14]
 8008eba:	b2db      	uxtb	r3, r3
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	2b0f      	cmp	r3, #15
 8008ed4:	d80d      	bhi.n	8008ef2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008ed6:	78fb      	ldrb	r3, [r7, #3]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	33e0      	adds	r3, #224	@ 0xe0
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	78fb      	ldrb	r3, [r7, #3]
 8008ee4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008ee8:	6879      	ldr	r1, [r7, #4]
 8008eea:	33e0      	adds	r3, #224	@ 0xe0
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	440b      	add	r3, r1
 8008ef0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
 8008f10:	e00f      	b.n	8008f32 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	33e0      	adds	r3, #224	@ 0xe0
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	e007      	b.n	8008f3c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	73fb      	strb	r3, [r7, #15]
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	2b0f      	cmp	r3, #15
 8008f36:	d9ec      	bls.n	8008f12 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008f38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <__NVIC_SetPriority>:
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	4603      	mov	r3, r0
 8008f50:	6039      	str	r1, [r7, #0]
 8008f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	db0a      	blt.n	8008f72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	490c      	ldr	r1, [pc, #48]	@ (8008f94 <__NVIC_SetPriority+0x4c>)
 8008f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f66:	0112      	lsls	r2, r2, #4
 8008f68:	b2d2      	uxtb	r2, r2
 8008f6a:	440b      	add	r3, r1
 8008f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008f70:	e00a      	b.n	8008f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	4908      	ldr	r1, [pc, #32]	@ (8008f98 <__NVIC_SetPriority+0x50>)
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	f003 030f 	and.w	r3, r3, #15
 8008f7e:	3b04      	subs	r3, #4
 8008f80:	0112      	lsls	r2, r2, #4
 8008f82:	b2d2      	uxtb	r2, r2
 8008f84:	440b      	add	r3, r1
 8008f86:	761a      	strb	r2, [r3, #24]
}
 8008f88:	bf00      	nop
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr
 8008f94:	e000e100 	.word	0xe000e100
 8008f98:	e000ed00 	.word	0xe000ed00

08008f9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008fa0:	4b05      	ldr	r3, [pc, #20]	@ (8008fb8 <SysTick_Handler+0x1c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008fa4:	f001 ff34 	bl	800ae10 <xTaskGetSchedulerState>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d001      	beq.n	8008fb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008fae:	f002 fd2b 	bl	800ba08 <xPortSysTickHandler>
  }
}
 8008fb2:	bf00      	nop
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	e000e010 	.word	0xe000e010

08008fbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	f06f 0004 	mvn.w	r0, #4
 8008fc6:	f7ff ffbf 	bl	8008f48 <__NVIC_SetPriority>
#endif
}
 8008fca:	bf00      	nop
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fd6:	f3ef 8305 	mrs	r3, IPSR
 8008fda:	603b      	str	r3, [r7, #0]
  return(result);
 8008fdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d003      	beq.n	8008fea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008fe2:	f06f 0305 	mvn.w	r3, #5
 8008fe6:	607b      	str	r3, [r7, #4]
 8008fe8:	e00c      	b.n	8009004 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008fea:	4b0a      	ldr	r3, [pc, #40]	@ (8009014 <osKernelInitialize+0x44>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d105      	bne.n	8008ffe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ff2:	4b08      	ldr	r3, [pc, #32]	@ (8009014 <osKernelInitialize+0x44>)
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	607b      	str	r3, [r7, #4]
 8008ffc:	e002      	b.n	8009004 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008ffe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009002:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009004:	687b      	ldr	r3, [r7, #4]
}
 8009006:	4618      	mov	r0, r3
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	2000021c 	.word	0x2000021c

08009018 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800901e:	f3ef 8305 	mrs	r3, IPSR
 8009022:	603b      	str	r3, [r7, #0]
  return(result);
 8009024:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <osKernelStart+0x1a>
    stat = osErrorISR;
 800902a:	f06f 0305 	mvn.w	r3, #5
 800902e:	607b      	str	r3, [r7, #4]
 8009030:	e010      	b.n	8009054 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009032:	4b0b      	ldr	r3, [pc, #44]	@ (8009060 <osKernelStart+0x48>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d109      	bne.n	800904e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800903a:	f7ff ffbf 	bl	8008fbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800903e:	4b08      	ldr	r3, [pc, #32]	@ (8009060 <osKernelStart+0x48>)
 8009040:	2202      	movs	r2, #2
 8009042:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009044:	f001 fa80 	bl	800a548 <vTaskStartScheduler>
      stat = osOK;
 8009048:	2300      	movs	r3, #0
 800904a:	607b      	str	r3, [r7, #4]
 800904c:	e002      	b.n	8009054 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800904e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009052:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009054:	687b      	ldr	r3, [r7, #4]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	2000021c 	.word	0x2000021c

08009064 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009064:	b580      	push	{r7, lr}
 8009066:	b08e      	sub	sp, #56	@ 0x38
 8009068:	af04      	add	r7, sp, #16
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009070:	2300      	movs	r3, #0
 8009072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009074:	f3ef 8305 	mrs	r3, IPSR
 8009078:	617b      	str	r3, [r7, #20]
  return(result);
 800907a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800907c:	2b00      	cmp	r3, #0
 800907e:	d17e      	bne.n	800917e <osThreadNew+0x11a>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d07b      	beq.n	800917e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009086:	2380      	movs	r3, #128	@ 0x80
 8009088:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800908a:	2318      	movs	r3, #24
 800908c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800908e:	2300      	movs	r3, #0
 8009090:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009096:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d045      	beq.n	800912a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <osThreadNew+0x48>
        name = attr->name;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d008      	beq.n	80090d2 <osThreadNew+0x6e>
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	2b38      	cmp	r3, #56	@ 0x38
 80090c4:	d805      	bhi.n	80090d2 <osThreadNew+0x6e>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <osThreadNew+0x72>
        return (NULL);
 80090d2:	2300      	movs	r3, #0
 80090d4:	e054      	b.n	8009180 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	089b      	lsrs	r3, r3, #2
 80090e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00e      	beq.n	800910c <osThreadNew+0xa8>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	2ba7      	cmp	r3, #167	@ 0xa7
 80090f4:	d90a      	bls.n	800910c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d006      	beq.n	800910c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <osThreadNew+0xa8>
        mem = 1;
 8009106:	2301      	movs	r3, #1
 8009108:	61bb      	str	r3, [r7, #24]
 800910a:	e010      	b.n	800912e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10c      	bne.n	800912e <osThreadNew+0xca>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d108      	bne.n	800912e <osThreadNew+0xca>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d104      	bne.n	800912e <osThreadNew+0xca>
          mem = 0;
 8009124:	2300      	movs	r3, #0
 8009126:	61bb      	str	r3, [r7, #24]
 8009128:	e001      	b.n	800912e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d110      	bne.n	8009156 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800913c:	9202      	str	r2, [sp, #8]
 800913e:	9301      	str	r3, [sp, #4]
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	6a3a      	ldr	r2, [r7, #32]
 8009148:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f001 f808 	bl	800a160 <xTaskCreateStatic>
 8009150:	4603      	mov	r3, r0
 8009152:	613b      	str	r3, [r7, #16]
 8009154:	e013      	b.n	800917e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d110      	bne.n	800917e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	b29a      	uxth	r2, r3
 8009160:	f107 0310 	add.w	r3, r7, #16
 8009164:	9301      	str	r3, [sp, #4]
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f001 f856 	bl	800a220 <xTaskCreate>
 8009174:	4603      	mov	r3, r0
 8009176:	2b01      	cmp	r3, #1
 8009178:	d001      	beq.n	800917e <osThreadNew+0x11a>
            hTask = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800917e:	693b      	ldr	r3, [r7, #16]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3728      	adds	r7, #40	@ 0x28
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009190:	f3ef 8305 	mrs	r3, IPSR
 8009194:	60bb      	str	r3, [r7, #8]
  return(result);
 8009196:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <osDelay+0x1c>
    stat = osErrorISR;
 800919c:	f06f 0305 	mvn.w	r3, #5
 80091a0:	60fb      	str	r3, [r7, #12]
 80091a2:	e007      	b.n	80091b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f001 f994 	bl	800a4dc <vTaskDelay>
    }
  }

  return (stat);
 80091b4:	68fb      	ldr	r3, [r7, #12]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80091be:	b580      	push	{r7, lr}
 80091c0:	b08a      	sub	sp, #40	@ 0x28
 80091c2:	af02      	add	r7, sp, #8
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80091ca:	2300      	movs	r3, #0
 80091cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ce:	f3ef 8305 	mrs	r3, IPSR
 80091d2:	613b      	str	r3, [r7, #16]
  return(result);
 80091d4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d15f      	bne.n	800929a <osMessageQueueNew+0xdc>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d05c      	beq.n	800929a <osMessageQueueNew+0xdc>
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d059      	beq.n	800929a <osMessageQueueNew+0xdc>
    mem = -1;
 80091e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d029      	beq.n	8009246 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d012      	beq.n	8009220 <osMessageQueueNew+0x62>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	2b4f      	cmp	r3, #79	@ 0x4f
 8009200:	d90e      	bls.n	8009220 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	695a      	ldr	r2, [r3, #20]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	68b9      	ldr	r1, [r7, #8]
 8009212:	fb01 f303 	mul.w	r3, r1, r3
 8009216:	429a      	cmp	r2, r3
 8009218:	d302      	bcc.n	8009220 <osMessageQueueNew+0x62>
        mem = 1;
 800921a:	2301      	movs	r3, #1
 800921c:	61bb      	str	r3, [r7, #24]
 800921e:	e014      	b.n	800924a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d110      	bne.n	800924a <osMessageQueueNew+0x8c>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10c      	bne.n	800924a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009234:	2b00      	cmp	r3, #0
 8009236:	d108      	bne.n	800924a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d104      	bne.n	800924a <osMessageQueueNew+0x8c>
          mem = 0;
 8009240:	2300      	movs	r3, #0
 8009242:	61bb      	str	r3, [r7, #24]
 8009244:	e001      	b.n	800924a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d10b      	bne.n	8009268 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691a      	ldr	r2, [r3, #16]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	2100      	movs	r1, #0
 800925a:	9100      	str	r1, [sp, #0]
 800925c:	68b9      	ldr	r1, [r7, #8]
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f000 fa30 	bl	80096c4 <xQueueGenericCreateStatic>
 8009264:	61f8      	str	r0, [r7, #28]
 8009266:	e008      	b.n	800927a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d105      	bne.n	800927a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800926e:	2200      	movs	r2, #0
 8009270:	68b9      	ldr	r1, [r7, #8]
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f000 faa3 	bl	80097be <xQueueGenericCreate>
 8009278:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00c      	beq.n	800929a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <osMessageQueueNew+0xd0>
        name = attr->name;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	617b      	str	r3, [r7, #20]
 800928c:	e001      	b.n	8009292 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800928e:	2300      	movs	r3, #0
 8009290:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009292:	6979      	ldr	r1, [r7, #20]
 8009294:	69f8      	ldr	r0, [r7, #28]
 8009296:	f000 ff05 	bl	800a0a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800929a:	69fb      	ldr	r3, [r7, #28]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3720      	adds	r7, #32
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b088      	sub	sp, #32
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	603b      	str	r3, [r7, #0]
 80092b0:	4613      	mov	r3, r2
 80092b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092bc:	f3ef 8305 	mrs	r3, IPSR
 80092c0:	617b      	str	r3, [r7, #20]
  return(result);
 80092c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d028      	beq.n	800931a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d005      	beq.n	80092da <osMessageQueuePut+0x36>
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <osMessageQueuePut+0x36>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80092da:	f06f 0303 	mvn.w	r3, #3
 80092de:	61fb      	str	r3, [r7, #28]
 80092e0:	e038      	b.n	8009354 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80092e2:	2300      	movs	r3, #0
 80092e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80092e6:	f107 0210 	add.w	r2, r7, #16
 80092ea:	2300      	movs	r3, #0
 80092ec:	68b9      	ldr	r1, [r7, #8]
 80092ee:	69b8      	ldr	r0, [r7, #24]
 80092f0:	f000 fbc6 	bl	8009a80 <xQueueGenericSendFromISR>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d003      	beq.n	8009302 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80092fa:	f06f 0302 	mvn.w	r3, #2
 80092fe:	61fb      	str	r3, [r7, #28]
 8009300:	e028      	b.n	8009354 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d025      	beq.n	8009354 <osMessageQueuePut+0xb0>
 8009308:	4b15      	ldr	r3, [pc, #84]	@ (8009360 <osMessageQueuePut+0xbc>)
 800930a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	e01c      	b.n	8009354 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <osMessageQueuePut+0x82>
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d103      	bne.n	800932e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009326:	f06f 0303 	mvn.w	r3, #3
 800932a:	61fb      	str	r3, [r7, #28]
 800932c:	e012      	b.n	8009354 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800932e:	2300      	movs	r3, #0
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	68b9      	ldr	r1, [r7, #8]
 8009334:	69b8      	ldr	r0, [r7, #24]
 8009336:	f000 faa1 	bl	800987c <xQueueGenericSend>
 800933a:	4603      	mov	r3, r0
 800933c:	2b01      	cmp	r3, #1
 800933e:	d009      	beq.n	8009354 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009346:	f06f 0301 	mvn.w	r3, #1
 800934a:	61fb      	str	r3, [r7, #28]
 800934c:	e002      	b.n	8009354 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800934e:	f06f 0302 	mvn.w	r3, #2
 8009352:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009354:	69fb      	ldr	r3, [r7, #28]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3720      	adds	r7, #32
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	e000ed04 	.word	0xe000ed04

08009364 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009376:	2300      	movs	r3, #0
 8009378:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800937a:	f3ef 8305 	mrs	r3, IPSR
 800937e:	617b      	str	r3, [r7, #20]
  return(result);
 8009380:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009382:	2b00      	cmp	r3, #0
 8009384:	d028      	beq.n	80093d8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d005      	beq.n	8009398 <osMessageQueueGet+0x34>
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <osMessageQueueGet+0x34>
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d003      	beq.n	80093a0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009398:	f06f 0303 	mvn.w	r3, #3
 800939c:	61fb      	str	r3, [r7, #28]
 800939e:	e037      	b.n	8009410 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80093a0:	2300      	movs	r3, #0
 80093a2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80093a4:	f107 0310 	add.w	r3, r7, #16
 80093a8:	461a      	mov	r2, r3
 80093aa:	68b9      	ldr	r1, [r7, #8]
 80093ac:	69b8      	ldr	r0, [r7, #24]
 80093ae:	f000 fce7 	bl	8009d80 <xQueueReceiveFromISR>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d003      	beq.n	80093c0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80093b8:	f06f 0302 	mvn.w	r3, #2
 80093bc:	61fb      	str	r3, [r7, #28]
 80093be:	e027      	b.n	8009410 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d024      	beq.n	8009410 <osMessageQueueGet+0xac>
 80093c6:	4b15      	ldr	r3, [pc, #84]	@ (800941c <osMessageQueueGet+0xb8>)
 80093c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	e01b      	b.n	8009410 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <osMessageQueueGet+0x80>
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d103      	bne.n	80093ec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80093e4:	f06f 0303 	mvn.w	r3, #3
 80093e8:	61fb      	str	r3, [r7, #28]
 80093ea:	e011      	b.n	8009410 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	68b9      	ldr	r1, [r7, #8]
 80093f0:	69b8      	ldr	r0, [r7, #24]
 80093f2:	f000 fbe3 	bl	8009bbc <xQueueReceive>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d009      	beq.n	8009410 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009402:	f06f 0301 	mvn.w	r3, #1
 8009406:	61fb      	str	r3, [r7, #28]
 8009408:	e002      	b.n	8009410 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800940a:	f06f 0302 	mvn.w	r3, #2
 800940e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009410:	69fb      	ldr	r3, [r7, #28]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3720      	adds	r7, #32
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	e000ed04 	.word	0xe000ed04

08009420 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	4a07      	ldr	r2, [pc, #28]	@ (800944c <vApplicationGetIdleTaskMemory+0x2c>)
 8009430:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	4a06      	ldr	r2, [pc, #24]	@ (8009450 <vApplicationGetIdleTaskMemory+0x30>)
 8009436:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2280      	movs	r2, #128	@ 0x80
 800943c:	601a      	str	r2, [r3, #0]
}
 800943e:	bf00      	nop
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	20000220 	.word	0x20000220
 8009450:	200002c8 	.word	0x200002c8

08009454 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4a07      	ldr	r2, [pc, #28]	@ (8009480 <vApplicationGetTimerTaskMemory+0x2c>)
 8009464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	4a06      	ldr	r2, [pc, #24]	@ (8009484 <vApplicationGetTimerTaskMemory+0x30>)
 800946a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009472:	601a      	str	r2, [r3, #0]
}
 8009474:	bf00      	nop
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	200004c8 	.word	0x200004c8
 8009484:	20000570 	.word	0x20000570

08009488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f103 0208 	add.w	r2, r3, #8
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f103 0208 	add.w	r2, r3, #8
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f103 0208 	add.w	r2, r3, #8
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094d6:	bf00      	nop
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094e2:	b480      	push	{r7}
 80094e4:	b085      	sub	sp, #20
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	689a      	ldr	r2, [r3, #8]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	601a      	str	r2, [r3, #0]
}
 800951e:	bf00      	nop
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800952a:	b480      	push	{r7}
 800952c:	b085      	sub	sp, #20
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009540:	d103      	bne.n	800954a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	e00c      	b.n	8009564 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	3308      	adds	r3, #8
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	e002      	b.n	8009558 <vListInsert+0x2e>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	429a      	cmp	r2, r3
 8009562:	d2f6      	bcs.n	8009552 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	1c5a      	adds	r2, r3, #1
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	601a      	str	r2, [r3, #0]
}
 8009590:	bf00      	nop
 8009592:	3714      	adds	r7, #20
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	6892      	ldr	r2, [r2, #8]
 80095b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	6852      	ldr	r2, [r2, #4]
 80095bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d103      	bne.n	80095d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689a      	ldr	r2, [r3, #8]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	1e5a      	subs	r2, r3, #1
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10b      	bne.n	800961c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009616:	bf00      	nop
 8009618:	bf00      	nop
 800961a:	e7fd      	b.n	8009618 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800961c:	f002 f964 	bl	800b8e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009628:	68f9      	ldr	r1, [r7, #12]
 800962a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800962c:	fb01 f303 	mul.w	r3, r1, r3
 8009630:	441a      	add	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800964c:	3b01      	subs	r3, #1
 800964e:	68f9      	ldr	r1, [r7, #12]
 8009650:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009652:	fb01 f303 	mul.w	r3, r1, r3
 8009656:	441a      	add	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	22ff      	movs	r2, #255	@ 0xff
 8009660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	22ff      	movs	r2, #255	@ 0xff
 8009668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d114      	bne.n	800969c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d01a      	beq.n	80096b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3310      	adds	r3, #16
 800967e:	4618      	mov	r0, r3
 8009680:	f001 fa00 	bl	800aa84 <xTaskRemoveFromEventList>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d012      	beq.n	80096b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800968a:	4b0d      	ldr	r3, [pc, #52]	@ (80096c0 <xQueueGenericReset+0xd0>)
 800968c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	e009      	b.n	80096b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	3310      	adds	r3, #16
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7ff fef1 	bl	8009488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3324      	adds	r3, #36	@ 0x24
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7ff feec 	bl	8009488 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80096b0:	f002 f94c 	bl	800b94c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096b4:	2301      	movs	r3, #1
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	e000ed04 	.word	0xe000ed04

080096c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08e      	sub	sp, #56	@ 0x38
 80096c8:	af02      	add	r7, sp, #8
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
 80096d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10b      	bne.n	80096f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80096d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096dc:	f383 8811 	msr	BASEPRI, r3
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80096ea:	bf00      	nop
 80096ec:	bf00      	nop
 80096ee:	e7fd      	b.n	80096ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10b      	bne.n	800970e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009708:	bf00      	nop
 800970a:	bf00      	nop
 800970c:	e7fd      	b.n	800970a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <xQueueGenericCreateStatic+0x56>
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <xQueueGenericCreateStatic+0x5a>
 800971a:	2301      	movs	r3, #1
 800971c:	e000      	b.n	8009720 <xQueueGenericCreateStatic+0x5c>
 800971e:	2300      	movs	r3, #0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10b      	bne.n	800973c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	623b      	str	r3, [r7, #32]
}
 8009736:	bf00      	nop
 8009738:	bf00      	nop
 800973a:	e7fd      	b.n	8009738 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d102      	bne.n	8009748 <xQueueGenericCreateStatic+0x84>
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <xQueueGenericCreateStatic+0x88>
 8009748:	2301      	movs	r3, #1
 800974a:	e000      	b.n	800974e <xQueueGenericCreateStatic+0x8a>
 800974c:	2300      	movs	r3, #0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10b      	bne.n	800976a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	61fb      	str	r3, [r7, #28]
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop
 8009768:	e7fd      	b.n	8009766 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800976a:	2350      	movs	r3, #80	@ 0x50
 800976c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2b50      	cmp	r3, #80	@ 0x50
 8009772:	d00b      	beq.n	800978c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	61bb      	str	r3, [r7, #24]
}
 8009786:	bf00      	nop
 8009788:	bf00      	nop
 800978a:	e7fd      	b.n	8009788 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800978c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00d      	beq.n	80097b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80097a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	4613      	mov	r3, r2
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	68b9      	ldr	r1, [r7, #8]
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 f840 	bl	8009834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3730      	adds	r7, #48	@ 0x30
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b08a      	sub	sp, #40	@ 0x28
 80097c2:	af02      	add	r7, sp, #8
 80097c4:	60f8      	str	r0, [r7, #12]
 80097c6:	60b9      	str	r1, [r7, #8]
 80097c8:	4613      	mov	r3, r2
 80097ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10b      	bne.n	80097ea <xQueueGenericCreate+0x2c>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	613b      	str	r3, [r7, #16]
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop
 80097e8:	e7fd      	b.n	80097e6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	fb02 f303 	mul.w	r3, r2, r3
 80097f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	3350      	adds	r3, #80	@ 0x50
 80097f8:	4618      	mov	r0, r3
 80097fa:	f002 f997 	bl	800bb2c <pvPortMalloc>
 80097fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d011      	beq.n	800982a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	3350      	adds	r3, #80	@ 0x50
 800980e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009818:	79fa      	ldrb	r2, [r7, #7]
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	4613      	mov	r3, r2
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 f805 	bl	8009834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800982a:	69bb      	ldr	r3, [r7, #24]
	}
 800982c:	4618      	mov	r0, r3
 800982e:	3720      	adds	r7, #32
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d103      	bne.n	8009850 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	e002      	b.n	8009856 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009862:	2101      	movs	r1, #1
 8009864:	69b8      	ldr	r0, [r7, #24]
 8009866:	f7ff fec3 	bl	80095f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	78fa      	ldrb	r2, [r7, #3]
 800986e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009872:	bf00      	nop
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
	...

0800987c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08e      	sub	sp, #56	@ 0x38
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800988a:	2300      	movs	r3, #0
 800988c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10b      	bne.n	80098b0 <xQueueGenericSend+0x34>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80098aa:	bf00      	nop
 80098ac:	bf00      	nop
 80098ae:	e7fd      	b.n	80098ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d103      	bne.n	80098be <xQueueGenericSend+0x42>
 80098b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <xQueueGenericSend+0x46>
 80098be:	2301      	movs	r3, #1
 80098c0:	e000      	b.n	80098c4 <xQueueGenericSend+0x48>
 80098c2:	2300      	movs	r3, #0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10b      	bne.n	80098e0 <xQueueGenericSend+0x64>
	__asm volatile
 80098c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80098da:	bf00      	nop
 80098dc:	bf00      	nop
 80098de:	e7fd      	b.n	80098dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d103      	bne.n	80098ee <xQueueGenericSend+0x72>
 80098e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d101      	bne.n	80098f2 <xQueueGenericSend+0x76>
 80098ee:	2301      	movs	r3, #1
 80098f0:	e000      	b.n	80098f4 <xQueueGenericSend+0x78>
 80098f2:	2300      	movs	r3, #0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10b      	bne.n	8009910 <xQueueGenericSend+0x94>
	__asm volatile
 80098f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fc:	f383 8811 	msr	BASEPRI, r3
 8009900:	f3bf 8f6f 	isb	sy
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	623b      	str	r3, [r7, #32]
}
 800990a:	bf00      	nop
 800990c:	bf00      	nop
 800990e:	e7fd      	b.n	800990c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009910:	f001 fa7e 	bl	800ae10 <xTaskGetSchedulerState>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d102      	bne.n	8009920 <xQueueGenericSend+0xa4>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d101      	bne.n	8009924 <xQueueGenericSend+0xa8>
 8009920:	2301      	movs	r3, #1
 8009922:	e000      	b.n	8009926 <xQueueGenericSend+0xaa>
 8009924:	2300      	movs	r3, #0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10b      	bne.n	8009942 <xQueueGenericSend+0xc6>
	__asm volatile
 800992a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	61fb      	str	r3, [r7, #28]
}
 800993c:	bf00      	nop
 800993e:	bf00      	nop
 8009940:	e7fd      	b.n	800993e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009942:	f001 ffd1 	bl	800b8e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800994a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800994e:	429a      	cmp	r2, r3
 8009950:	d302      	bcc.n	8009958 <xQueueGenericSend+0xdc>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	2b02      	cmp	r3, #2
 8009956:	d129      	bne.n	80099ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	68b9      	ldr	r1, [r7, #8]
 800995c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800995e:	f000 fa91 	bl	8009e84 <prvCopyDataToQueue>
 8009962:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009968:	2b00      	cmp	r3, #0
 800996a:	d010      	beq.n	800998e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800996c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996e:	3324      	adds	r3, #36	@ 0x24
 8009970:	4618      	mov	r0, r3
 8009972:	f001 f887 	bl	800aa84 <xTaskRemoveFromEventList>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d013      	beq.n	80099a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800997c:	4b3f      	ldr	r3, [pc, #252]	@ (8009a7c <xQueueGenericSend+0x200>)
 800997e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	e00a      	b.n	80099a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800998e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d007      	beq.n	80099a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009994:	4b39      	ldr	r3, [pc, #228]	@ (8009a7c <xQueueGenericSend+0x200>)
 8009996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80099a4:	f001 ffd2 	bl	800b94c <vPortExitCritical>
				return pdPASS;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e063      	b.n	8009a74 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d103      	bne.n	80099ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099b2:	f001 ffcb 	bl	800b94c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	e05c      	b.n	8009a74 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d106      	bne.n	80099ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099c0:	f107 0314 	add.w	r3, r7, #20
 80099c4:	4618      	mov	r0, r3
 80099c6:	f001 f8c1 	bl	800ab4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099ca:	2301      	movs	r3, #1
 80099cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099ce:	f001 ffbd 	bl	800b94c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099d2:	f000 fe29 	bl	800a628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099d6:	f001 ff87 	bl	800b8e8 <vPortEnterCritical>
 80099da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099e0:	b25b      	sxtb	r3, r3
 80099e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099e6:	d103      	bne.n	80099f0 <xQueueGenericSend+0x174>
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099f6:	b25b      	sxtb	r3, r3
 80099f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099fc:	d103      	bne.n	8009a06 <xQueueGenericSend+0x18a>
 80099fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a06:	f001 ffa1 	bl	800b94c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a0a:	1d3a      	adds	r2, r7, #4
 8009a0c:	f107 0314 	add.w	r3, r7, #20
 8009a10:	4611      	mov	r1, r2
 8009a12:	4618      	mov	r0, r3
 8009a14:	f001 f8b0 	bl	800ab78 <xTaskCheckForTimeOut>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d124      	bne.n	8009a68 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a20:	f000 fb28 	bl	800a074 <prvIsQueueFull>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d018      	beq.n	8009a5c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2c:	3310      	adds	r3, #16
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	4611      	mov	r1, r2
 8009a32:	4618      	mov	r0, r3
 8009a34:	f000 ffd4 	bl	800a9e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a3a:	f000 fab3 	bl	8009fa4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a3e:	f000 fe01 	bl	800a644 <xTaskResumeAll>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f47f af7c 	bne.w	8009942 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a7c <xQueueGenericSend+0x200>)
 8009a4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	e772      	b.n	8009942 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a5e:	f000 faa1 	bl	8009fa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a62:	f000 fdef 	bl	800a644 <xTaskResumeAll>
 8009a66:	e76c      	b.n	8009942 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a6a:	f000 fa9b 	bl	8009fa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a6e:	f000 fde9 	bl	800a644 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009a72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3738      	adds	r7, #56	@ 0x38
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	e000ed04 	.word	0xe000ed04

08009a80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b090      	sub	sp, #64	@ 0x40
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10b      	bne.n	8009ab0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9c:	f383 8811 	msr	BASEPRI, r3
 8009aa0:	f3bf 8f6f 	isb	sy
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009aaa:	bf00      	nop
 8009aac:	bf00      	nop
 8009aae:	e7fd      	b.n	8009aac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d103      	bne.n	8009abe <xQueueGenericSendFromISR+0x3e>
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <xQueueGenericSendFromISR+0x42>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e000      	b.n	8009ac4 <xQueueGenericSendFromISR+0x44>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10b      	bne.n	8009ae0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009ada:	bf00      	nop
 8009adc:	bf00      	nop
 8009ade:	e7fd      	b.n	8009adc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d103      	bne.n	8009aee <xQueueGenericSendFromISR+0x6e>
 8009ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d101      	bne.n	8009af2 <xQueueGenericSendFromISR+0x72>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e000      	b.n	8009af4 <xQueueGenericSendFromISR+0x74>
 8009af2:	2300      	movs	r3, #0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10b      	bne.n	8009b10 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	623b      	str	r3, [r7, #32]
}
 8009b0a:	bf00      	nop
 8009b0c:	bf00      	nop
 8009b0e:	e7fd      	b.n	8009b0c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b10:	f001 ffca 	bl	800baa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b14:	f3ef 8211 	mrs	r2, BASEPRI
 8009b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	61fa      	str	r2, [r7, #28]
 8009b2a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b2c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b2e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d302      	bcc.n	8009b42 <xQueueGenericSendFromISR+0xc2>
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d12f      	bne.n	8009ba2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b52:	683a      	ldr	r2, [r7, #0]
 8009b54:	68b9      	ldr	r1, [r7, #8]
 8009b56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009b58:	f000 f994 	bl	8009e84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b5c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009b60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b64:	d112      	bne.n	8009b8c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d016      	beq.n	8009b9c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b70:	3324      	adds	r3, #36	@ 0x24
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 ff86 	bl	800aa84 <xTaskRemoveFromEventList>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00e      	beq.n	8009b9c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00b      	beq.n	8009b9c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	e007      	b.n	8009b9c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009b90:	3301      	adds	r3, #1
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	b25a      	sxtb	r2, r3
 8009b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009ba0:	e001      	b.n	8009ba6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ba8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009bb0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3740      	adds	r7, #64	@ 0x40
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b08c      	sub	sp, #48	@ 0x30
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10b      	bne.n	8009bee <xQueueReceive+0x32>
	__asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	623b      	str	r3, [r7, #32]
}
 8009be8:	bf00      	nop
 8009bea:	bf00      	nop
 8009bec:	e7fd      	b.n	8009bea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d103      	bne.n	8009bfc <xQueueReceive+0x40>
 8009bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <xQueueReceive+0x44>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e000      	b.n	8009c02 <xQueueReceive+0x46>
 8009c00:	2300      	movs	r3, #0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10b      	bne.n	8009c1e <xQueueReceive+0x62>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	61fb      	str	r3, [r7, #28]
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	e7fd      	b.n	8009c1a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c1e:	f001 f8f7 	bl	800ae10 <xTaskGetSchedulerState>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d102      	bne.n	8009c2e <xQueueReceive+0x72>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d101      	bne.n	8009c32 <xQueueReceive+0x76>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e000      	b.n	8009c34 <xQueueReceive+0x78>
 8009c32:	2300      	movs	r3, #0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10b      	bne.n	8009c50 <xQueueReceive+0x94>
	__asm volatile
 8009c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	61bb      	str	r3, [r7, #24]
}
 8009c4a:	bf00      	nop
 8009c4c:	bf00      	nop
 8009c4e:	e7fd      	b.n	8009c4c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c50:	f001 fe4a 	bl	800b8e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c58:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01f      	beq.n	8009ca0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c60:	68b9      	ldr	r1, [r7, #8]
 8009c62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c64:	f000 f978 	bl	8009f58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6a:	1e5a      	subs	r2, r3, #1
 8009c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00f      	beq.n	8009c98 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7a:	3310      	adds	r3, #16
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 ff01 	bl	800aa84 <xTaskRemoveFromEventList>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d007      	beq.n	8009c98 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c88:	4b3c      	ldr	r3, [pc, #240]	@ (8009d7c <xQueueReceive+0x1c0>)
 8009c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c98:	f001 fe58 	bl	800b94c <vPortExitCritical>
				return pdPASS;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e069      	b.n	8009d74 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d103      	bne.n	8009cae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ca6:	f001 fe51 	bl	800b94c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009caa:	2300      	movs	r3, #0
 8009cac:	e062      	b.n	8009d74 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d106      	bne.n	8009cc2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cb4:	f107 0310 	add.w	r3, r7, #16
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 ff47 	bl	800ab4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cc2:	f001 fe43 	bl	800b94c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cc6:	f000 fcaf 	bl	800a628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cca:	f001 fe0d 	bl	800b8e8 <vPortEnterCritical>
 8009cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cd4:	b25b      	sxtb	r3, r3
 8009cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cda:	d103      	bne.n	8009ce4 <xQueueReceive+0x128>
 8009cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cea:	b25b      	sxtb	r3, r3
 8009cec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cf0:	d103      	bne.n	8009cfa <xQueueReceive+0x13e>
 8009cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cfa:	f001 fe27 	bl	800b94c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cfe:	1d3a      	adds	r2, r7, #4
 8009d00:	f107 0310 	add.w	r3, r7, #16
 8009d04:	4611      	mov	r1, r2
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 ff36 	bl	800ab78 <xTaskCheckForTimeOut>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d123      	bne.n	8009d5a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d14:	f000 f998 	bl	800a048 <prvIsQueueEmpty>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d017      	beq.n	8009d4e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d20:	3324      	adds	r3, #36	@ 0x24
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	4611      	mov	r1, r2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 fe5a 	bl	800a9e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d2e:	f000 f939 	bl	8009fa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d32:	f000 fc87 	bl	800a644 <xTaskResumeAll>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d189      	bne.n	8009c50 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8009d7c <xQueueReceive+0x1c0>)
 8009d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	e780      	b.n	8009c50 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d50:	f000 f928 	bl	8009fa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d54:	f000 fc76 	bl	800a644 <xTaskResumeAll>
 8009d58:	e77a      	b.n	8009c50 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d5c:	f000 f922 	bl	8009fa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d60:	f000 fc70 	bl	800a644 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d66:	f000 f96f 	bl	800a048 <prvIsQueueEmpty>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f43f af6f 	beq.w	8009c50 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3730      	adds	r7, #48	@ 0x30
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	e000ed04 	.word	0xe000ed04

08009d80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b08e      	sub	sp, #56	@ 0x38
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10b      	bne.n	8009dae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	623b      	str	r3, [r7, #32]
}
 8009da8:	bf00      	nop
 8009daa:	bf00      	nop
 8009dac:	e7fd      	b.n	8009daa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d103      	bne.n	8009dbc <xQueueReceiveFromISR+0x3c>
 8009db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <xQueueReceiveFromISR+0x40>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e000      	b.n	8009dc2 <xQueueReceiveFromISR+0x42>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10b      	bne.n	8009dde <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	61fb      	str	r3, [r7, #28]
}
 8009dd8:	bf00      	nop
 8009dda:	bf00      	nop
 8009ddc:	e7fd      	b.n	8009dda <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dde:	f001 fe63 	bl	800baa8 <vPortValidateInterruptPriority>
	__asm volatile
 8009de2:	f3ef 8211 	mrs	r2, BASEPRI
 8009de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dea:	f383 8811 	msr	BASEPRI, r3
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	f3bf 8f4f 	dsb	sy
 8009df6:	61ba      	str	r2, [r7, #24]
 8009df8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009dfa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e02:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d02f      	beq.n	8009e6a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e14:	68b9      	ldr	r1, [r7, #8]
 8009e16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e18:	f000 f89e 	bl	8009f58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1e:	1e5a      	subs	r2, r3, #1
 8009e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e22:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009e24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009e28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e2c:	d112      	bne.n	8009e54 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d016      	beq.n	8009e64 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e38:	3310      	adds	r3, #16
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 fe22 	bl	800aa84 <xTaskRemoveFromEventList>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00e      	beq.n	8009e64 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00b      	beq.n	8009e64 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	601a      	str	r2, [r3, #0]
 8009e52:	e007      	b.n	8009e64 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009e54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e58:	3301      	adds	r3, #1
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	b25a      	sxtb	r2, r3
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009e64:	2301      	movs	r3, #1
 8009e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e68:	e001      	b.n	8009e6e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	f383 8811 	msr	BASEPRI, r3
}
 8009e78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3738      	adds	r7, #56	@ 0x38
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10d      	bne.n	8009ebe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d14d      	bne.n	8009f46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 ffcc 	bl	800ae4c <xTaskPriorityDisinherit>
 8009eb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	609a      	str	r2, [r3, #8]
 8009ebc:	e043      	b.n	8009f46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d119      	bne.n	8009ef8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6858      	ldr	r0, [r3, #4]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ecc:	461a      	mov	r2, r3
 8009ece:	68b9      	ldr	r1, [r7, #8]
 8009ed0:	f002 fee7 	bl	800cca2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009edc:	441a      	add	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	685a      	ldr	r2, [r3, #4]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d32b      	bcc.n	8009f46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	605a      	str	r2, [r3, #4]
 8009ef6:	e026      	b.n	8009f46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	68d8      	ldr	r0, [r3, #12]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f00:	461a      	mov	r2, r3
 8009f02:	68b9      	ldr	r1, [r7, #8]
 8009f04:	f002 fecd 	bl	800cca2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	68da      	ldr	r2, [r3, #12]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f10:	425b      	negs	r3, r3
 8009f12:	441a      	add	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	68da      	ldr	r2, [r3, #12]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d207      	bcs.n	8009f34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	689a      	ldr	r2, [r3, #8]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f2c:	425b      	negs	r3, r3
 8009f2e:	441a      	add	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d105      	bne.n	8009f46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d002      	beq.n	8009f46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	3b01      	subs	r3, #1
 8009f44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	1c5a      	adds	r2, r3, #1
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009f4e:	697b      	ldr	r3, [r7, #20]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d018      	beq.n	8009f9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68da      	ldr	r2, [r3, #12]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f72:	441a      	add	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	68da      	ldr	r2, [r3, #12]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d303      	bcc.n	8009f8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	68d9      	ldr	r1, [r3, #12]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f94:	461a      	mov	r2, r3
 8009f96:	6838      	ldr	r0, [r7, #0]
 8009f98:	f002 fe83 	bl	800cca2 <memcpy>
	}
}
 8009f9c:	bf00      	nop
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009fac:	f001 fc9c 	bl	800b8e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fb8:	e011      	b.n	8009fde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d012      	beq.n	8009fe8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	3324      	adds	r3, #36	@ 0x24
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 fd5c 	bl	800aa84 <xTaskRemoveFromEventList>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009fd2:	f000 fe35 	bl	800ac40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	dce9      	bgt.n	8009fba <prvUnlockQueue+0x16>
 8009fe6:	e000      	b.n	8009fea <prvUnlockQueue+0x46>
					break;
 8009fe8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	22ff      	movs	r2, #255	@ 0xff
 8009fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009ff2:	f001 fcab 	bl	800b94c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ff6:	f001 fc77 	bl	800b8e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a000:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a002:	e011      	b.n	800a028 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d012      	beq.n	800a032 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3310      	adds	r3, #16
 800a010:	4618      	mov	r0, r3
 800a012:	f000 fd37 	bl	800aa84 <xTaskRemoveFromEventList>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a01c:	f000 fe10 	bl	800ac40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	3b01      	subs	r3, #1
 800a024:	b2db      	uxtb	r3, r3
 800a026:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a028:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	dce9      	bgt.n	800a004 <prvUnlockQueue+0x60>
 800a030:	e000      	b.n	800a034 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a032:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	22ff      	movs	r2, #255	@ 0xff
 800a038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a03c:	f001 fc86 	bl	800b94c <vPortExitCritical>
}
 800a040:	bf00      	nop
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a050:	f001 fc4a 	bl	800b8e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d102      	bne.n	800a062 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a05c:	2301      	movs	r3, #1
 800a05e:	60fb      	str	r3, [r7, #12]
 800a060:	e001      	b.n	800a066 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a062:	2300      	movs	r3, #0
 800a064:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a066:	f001 fc71 	bl	800b94c <vPortExitCritical>

	return xReturn;
 800a06a:	68fb      	ldr	r3, [r7, #12]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a07c:	f001 fc34 	bl	800b8e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a088:	429a      	cmp	r2, r3
 800a08a:	d102      	bne.n	800a092 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a08c:	2301      	movs	r3, #1
 800a08e:	60fb      	str	r3, [r7, #12]
 800a090:	e001      	b.n	800a096 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a092:	2300      	movs	r3, #0
 800a094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a096:	f001 fc59 	bl	800b94c <vPortExitCritical>

	return xReturn;
 800a09a:	68fb      	ldr	r3, [r7, #12]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3710      	adds	r7, #16
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	60fb      	str	r3, [r7, #12]
 800a0b2:	e014      	b.n	800a0de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a0b4:	4a0f      	ldr	r2, [pc, #60]	@ (800a0f4 <vQueueAddToRegistry+0x50>)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10b      	bne.n	800a0d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a0c0:	490c      	ldr	r1, [pc, #48]	@ (800a0f4 <vQueueAddToRegistry+0x50>)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a0ca:	4a0a      	ldr	r2, [pc, #40]	@ (800a0f4 <vQueueAddToRegistry+0x50>)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	00db      	lsls	r3, r3, #3
 800a0d0:	4413      	add	r3, r2
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a0d6:	e006      	b.n	800a0e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	60fb      	str	r3, [r7, #12]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2b07      	cmp	r3, #7
 800a0e2:	d9e7      	bls.n	800a0b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0e4:	bf00      	nop
 800a0e6:	bf00      	nop
 800a0e8:	3714      	adds	r7, #20
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	20000970 	.word	0x20000970

0800a0f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a108:	f001 fbee 	bl	800b8e8 <vPortEnterCritical>
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a112:	b25b      	sxtb	r3, r3
 800a114:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a118:	d103      	bne.n	800a122 <vQueueWaitForMessageRestricted+0x2a>
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a128:	b25b      	sxtb	r3, r3
 800a12a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a12e:	d103      	bne.n	800a138 <vQueueWaitForMessageRestricted+0x40>
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a138:	f001 fc08 	bl	800b94c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a140:	2b00      	cmp	r3, #0
 800a142:	d106      	bne.n	800a152 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	3324      	adds	r3, #36	@ 0x24
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	68b9      	ldr	r1, [r7, #8]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f000 fc6d 	bl	800aa2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a152:	6978      	ldr	r0, [r7, #20]
 800a154:	f7ff ff26 	bl	8009fa4 <prvUnlockQueue>
	}
 800a158:	bf00      	nop
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08e      	sub	sp, #56	@ 0x38
 800a164:	af04      	add	r7, sp, #16
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a16e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10b      	bne.n	800a18c <xTaskCreateStatic+0x2c>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	623b      	str	r3, [r7, #32]
}
 800a186:	bf00      	nop
 800a188:	bf00      	nop
 800a18a:	e7fd      	b.n	800a188 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10b      	bne.n	800a1aa <xTaskCreateStatic+0x4a>
	__asm volatile
 800a192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	61fb      	str	r3, [r7, #28]
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop
 800a1a8:	e7fd      	b.n	800a1a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a1aa:	23a8      	movs	r3, #168	@ 0xa8
 800a1ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	2ba8      	cmp	r3, #168	@ 0xa8
 800a1b2:	d00b      	beq.n	800a1cc <xTaskCreateStatic+0x6c>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	61bb      	str	r3, [r7, #24]
}
 800a1c6:	bf00      	nop
 800a1c8:	bf00      	nop
 800a1ca:	e7fd      	b.n	800a1c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d01e      	beq.n	800a212 <xTaskCreateStatic+0xb2>
 800a1d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d01b      	beq.n	800a212 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9303      	str	r3, [sp, #12]
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f2:	9302      	str	r3, [sp, #8]
 800a1f4:	f107 0314 	add.w	r3, r7, #20
 800a1f8:	9301      	str	r3, [sp, #4]
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	68b9      	ldr	r1, [r7, #8]
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f000 f851 	bl	800a2ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a20a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a20c:	f000 f8f6 	bl	800a3fc <prvAddNewTaskToReadyList>
 800a210:	e001      	b.n	800a216 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a212:	2300      	movs	r3, #0
 800a214:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a216:	697b      	ldr	r3, [r7, #20]
	}
 800a218:	4618      	mov	r0, r3
 800a21a:	3728      	adds	r7, #40	@ 0x28
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a220:	b580      	push	{r7, lr}
 800a222:	b08c      	sub	sp, #48	@ 0x30
 800a224:	af04      	add	r7, sp, #16
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	4613      	mov	r3, r2
 800a22e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a230:	88fb      	ldrh	r3, [r7, #6]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4618      	mov	r0, r3
 800a236:	f001 fc79 	bl	800bb2c <pvPortMalloc>
 800a23a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00e      	beq.n	800a260 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a242:	20a8      	movs	r0, #168	@ 0xa8
 800a244:	f001 fc72 	bl	800bb2c <pvPortMalloc>
 800a248:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d003      	beq.n	800a258 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	631a      	str	r2, [r3, #48]	@ 0x30
 800a256:	e005      	b.n	800a264 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a258:	6978      	ldr	r0, [r7, #20]
 800a25a:	f001 fd35 	bl	800bcc8 <vPortFree>
 800a25e:	e001      	b.n	800a264 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a260:	2300      	movs	r3, #0
 800a262:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d017      	beq.n	800a29a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a272:	88fa      	ldrh	r2, [r7, #6]
 800a274:	2300      	movs	r3, #0
 800a276:	9303      	str	r3, [sp, #12]
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	9302      	str	r3, [sp, #8]
 800a27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27e:	9301      	str	r3, [sp, #4]
 800a280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	68b9      	ldr	r1, [r7, #8]
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 f80f 	bl	800a2ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a28e:	69f8      	ldr	r0, [r7, #28]
 800a290:	f000 f8b4 	bl	800a3fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a294:	2301      	movs	r3, #1
 800a296:	61bb      	str	r3, [r7, #24]
 800a298:	e002      	b.n	800a2a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a29a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a29e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a2a0:	69bb      	ldr	r3, [r7, #24]
	}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3720      	adds	r7, #32
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
	...

0800a2ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b088      	sub	sp, #32
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
 800a2b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	21a5      	movs	r1, #165	@ 0xa5
 800a2c6:	f002 fc0b 	bl	800cae0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4413      	add	r3, r2
 800a2da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	f023 0307 	bic.w	r3, r3, #7
 800a2e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	f003 0307 	and.w	r3, r3, #7
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00b      	beq.n	800a306 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	617b      	str	r3, [r7, #20]
}
 800a300:	bf00      	nop
 800a302:	bf00      	nop
 800a304:	e7fd      	b.n	800a302 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d01f      	beq.n	800a34c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a30c:	2300      	movs	r3, #0
 800a30e:	61fb      	str	r3, [r7, #28]
 800a310:	e012      	b.n	800a338 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	4413      	add	r3, r2
 800a318:	7819      	ldrb	r1, [r3, #0]
 800a31a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	4413      	add	r3, r2
 800a320:	3334      	adds	r3, #52	@ 0x34
 800a322:	460a      	mov	r2, r1
 800a324:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	4413      	add	r3, r2
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d006      	beq.n	800a340 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	3301      	adds	r3, #1
 800a336:	61fb      	str	r3, [r7, #28]
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	2b0f      	cmp	r3, #15
 800a33c:	d9e9      	bls.n	800a312 <prvInitialiseNewTask+0x66>
 800a33e:	e000      	b.n	800a342 <prvInitialiseNewTask+0x96>
			{
				break;
 800a340:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a34a:	e003      	b.n	800a354 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a356:	2b37      	cmp	r3, #55	@ 0x37
 800a358:	d901      	bls.n	800a35e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a35a:	2337      	movs	r3, #55	@ 0x37
 800a35c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a362:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a368:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36c:	2200      	movs	r2, #0
 800a36e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a372:	3304      	adds	r3, #4
 800a374:	4618      	mov	r0, r3
 800a376:	f7ff f8a7 	bl	80094c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37c:	3318      	adds	r3, #24
 800a37e:	4618      	mov	r0, r3
 800a380:	f7ff f8a2 	bl	80094c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a388:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a392:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a398:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39c:	2200      	movs	r2, #0
 800a39e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ac:	3354      	adds	r3, #84	@ 0x54
 800a3ae:	224c      	movs	r2, #76	@ 0x4c
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f002 fb94 	bl	800cae0 <memset>
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ba:	4a0d      	ldr	r2, [pc, #52]	@ (800a3f0 <prvInitialiseNewTask+0x144>)
 800a3bc:	659a      	str	r2, [r3, #88]	@ 0x58
 800a3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c0:	4a0c      	ldr	r2, [pc, #48]	@ (800a3f4 <prvInitialiseNewTask+0x148>)
 800a3c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c6:	4a0c      	ldr	r2, [pc, #48]	@ (800a3f8 <prvInitialiseNewTask+0x14c>)
 800a3c8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	68f9      	ldr	r1, [r7, #12]
 800a3ce:	69b8      	ldr	r0, [r7, #24]
 800a3d0:	f001 f95a 	bl	800b688 <pxPortInitialiseStack>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3e6:	bf00      	nop
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	200053d4 	.word	0x200053d4
 800a3f4:	2000543c 	.word	0x2000543c
 800a3f8:	200054a4 	.word	0x200054a4

0800a3fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a404:	f001 fa70 	bl	800b8e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a408:	4b2d      	ldr	r3, [pc, #180]	@ (800a4c0 <prvAddNewTaskToReadyList+0xc4>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3301      	adds	r3, #1
 800a40e:	4a2c      	ldr	r2, [pc, #176]	@ (800a4c0 <prvAddNewTaskToReadyList+0xc4>)
 800a410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a412:	4b2c      	ldr	r3, [pc, #176]	@ (800a4c4 <prvAddNewTaskToReadyList+0xc8>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d109      	bne.n	800a42e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a41a:	4a2a      	ldr	r2, [pc, #168]	@ (800a4c4 <prvAddNewTaskToReadyList+0xc8>)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a420:	4b27      	ldr	r3, [pc, #156]	@ (800a4c0 <prvAddNewTaskToReadyList+0xc4>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d110      	bne.n	800a44a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a428:	f000 fc2e 	bl	800ac88 <prvInitialiseTaskLists>
 800a42c:	e00d      	b.n	800a44a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a42e:	4b26      	ldr	r3, [pc, #152]	@ (800a4c8 <prvAddNewTaskToReadyList+0xcc>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d109      	bne.n	800a44a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a436:	4b23      	ldr	r3, [pc, #140]	@ (800a4c4 <prvAddNewTaskToReadyList+0xc8>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a440:	429a      	cmp	r2, r3
 800a442:	d802      	bhi.n	800a44a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a444:	4a1f      	ldr	r2, [pc, #124]	@ (800a4c4 <prvAddNewTaskToReadyList+0xc8>)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a44a:	4b20      	ldr	r3, [pc, #128]	@ (800a4cc <prvAddNewTaskToReadyList+0xd0>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3301      	adds	r3, #1
 800a450:	4a1e      	ldr	r2, [pc, #120]	@ (800a4cc <prvAddNewTaskToReadyList+0xd0>)
 800a452:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a454:	4b1d      	ldr	r3, [pc, #116]	@ (800a4cc <prvAddNewTaskToReadyList+0xd0>)
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a460:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d0 <prvAddNewTaskToReadyList+0xd4>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	429a      	cmp	r2, r3
 800a466:	d903      	bls.n	800a470 <prvAddNewTaskToReadyList+0x74>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46c:	4a18      	ldr	r2, [pc, #96]	@ (800a4d0 <prvAddNewTaskToReadyList+0xd4>)
 800a46e:	6013      	str	r3, [r2, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a474:	4613      	mov	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4a15      	ldr	r2, [pc, #84]	@ (800a4d4 <prvAddNewTaskToReadyList+0xd8>)
 800a47e:	441a      	add	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	3304      	adds	r3, #4
 800a484:	4619      	mov	r1, r3
 800a486:	4610      	mov	r0, r2
 800a488:	f7ff f82b 	bl	80094e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a48c:	f001 fa5e 	bl	800b94c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a490:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c8 <prvAddNewTaskToReadyList+0xcc>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00e      	beq.n	800a4b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a498:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c4 <prvAddNewTaskToReadyList+0xc8>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d207      	bcs.n	800a4b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d8 <prvAddNewTaskToReadyList+0xdc>)
 800a4a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20000e84 	.word	0x20000e84
 800a4c4:	200009b0 	.word	0x200009b0
 800a4c8:	20000e90 	.word	0x20000e90
 800a4cc:	20000ea0 	.word	0x20000ea0
 800a4d0:	20000e8c 	.word	0x20000e8c
 800a4d4:	200009b4 	.word	0x200009b4
 800a4d8:	e000ed04 	.word	0xe000ed04

0800a4dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d018      	beq.n	800a520 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a4ee:	4b14      	ldr	r3, [pc, #80]	@ (800a540 <vTaskDelay+0x64>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00b      	beq.n	800a50e <vTaskDelay+0x32>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	60bb      	str	r3, [r7, #8]
}
 800a508:	bf00      	nop
 800a50a:	bf00      	nop
 800a50c:	e7fd      	b.n	800a50a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a50e:	f000 f88b 	bl	800a628 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a512:	2100      	movs	r1, #0
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fd09 	bl	800af2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a51a:	f000 f893 	bl	800a644 <xTaskResumeAll>
 800a51e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d107      	bne.n	800a536 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a526:	4b07      	ldr	r3, [pc, #28]	@ (800a544 <vTaskDelay+0x68>)
 800a528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a52c:	601a      	str	r2, [r3, #0]
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a536:	bf00      	nop
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20000eac 	.word	0x20000eac
 800a544:	e000ed04 	.word	0xe000ed04

0800a548 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b08a      	sub	sp, #40	@ 0x28
 800a54c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a552:	2300      	movs	r3, #0
 800a554:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a556:	463a      	mov	r2, r7
 800a558:	1d39      	adds	r1, r7, #4
 800a55a:	f107 0308 	add.w	r3, r7, #8
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe ff5e 	bl	8009420 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	9202      	str	r2, [sp, #8]
 800a56c:	9301      	str	r3, [sp, #4]
 800a56e:	2300      	movs	r3, #0
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	2300      	movs	r3, #0
 800a574:	460a      	mov	r2, r1
 800a576:	4924      	ldr	r1, [pc, #144]	@ (800a608 <vTaskStartScheduler+0xc0>)
 800a578:	4824      	ldr	r0, [pc, #144]	@ (800a60c <vTaskStartScheduler+0xc4>)
 800a57a:	f7ff fdf1 	bl	800a160 <xTaskCreateStatic>
 800a57e:	4603      	mov	r3, r0
 800a580:	4a23      	ldr	r2, [pc, #140]	@ (800a610 <vTaskStartScheduler+0xc8>)
 800a582:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a584:	4b22      	ldr	r3, [pc, #136]	@ (800a610 <vTaskStartScheduler+0xc8>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a58c:	2301      	movs	r3, #1
 800a58e:	617b      	str	r3, [r7, #20]
 800a590:	e001      	b.n	800a596 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a592:	2300      	movs	r3, #0
 800a594:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d102      	bne.n	800a5a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a59c:	f000 fd1a 	bl	800afd4 <xTimerCreateTimerTask>
 800a5a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d11b      	bne.n	800a5e0 <vTaskStartScheduler+0x98>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	613b      	str	r3, [r7, #16]
}
 800a5ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a5bc:	4b15      	ldr	r3, [pc, #84]	@ (800a614 <vTaskStartScheduler+0xcc>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	3354      	adds	r3, #84	@ 0x54
 800a5c2:	4a15      	ldr	r2, [pc, #84]	@ (800a618 <vTaskStartScheduler+0xd0>)
 800a5c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a5c6:	4b15      	ldr	r3, [pc, #84]	@ (800a61c <vTaskStartScheduler+0xd4>)
 800a5c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5ce:	4b14      	ldr	r3, [pc, #80]	@ (800a620 <vTaskStartScheduler+0xd8>)
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5d4:	4b13      	ldr	r3, [pc, #76]	@ (800a624 <vTaskStartScheduler+0xdc>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a5da:	f001 f8e1 	bl	800b7a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a5de:	e00f      	b.n	800a600 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5e6:	d10b      	bne.n	800a600 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	60fb      	str	r3, [r7, #12]
}
 800a5fa:	bf00      	nop
 800a5fc:	bf00      	nop
 800a5fe:	e7fd      	b.n	800a5fc <vTaskStartScheduler+0xb4>
}
 800a600:	bf00      	nop
 800a602:	3718      	adds	r7, #24
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	0800d93c 	.word	0x0800d93c
 800a60c:	0800ac59 	.word	0x0800ac59
 800a610:	20000ea8 	.word	0x20000ea8
 800a614:	200009b0 	.word	0x200009b0
 800a618:	2000003c 	.word	0x2000003c
 800a61c:	20000ea4 	.word	0x20000ea4
 800a620:	20000e90 	.word	0x20000e90
 800a624:	20000e88 	.word	0x20000e88

0800a628 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a628:	b480      	push	{r7}
 800a62a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a62c:	4b04      	ldr	r3, [pc, #16]	@ (800a640 <vTaskSuspendAll+0x18>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3301      	adds	r3, #1
 800a632:	4a03      	ldr	r2, [pc, #12]	@ (800a640 <vTaskSuspendAll+0x18>)
 800a634:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a636:	bf00      	nop
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	20000eac 	.word	0x20000eac

0800a644 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a64e:	2300      	movs	r3, #0
 800a650:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a652:	4b42      	ldr	r3, [pc, #264]	@ (800a75c <xTaskResumeAll+0x118>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10b      	bne.n	800a672 <xTaskResumeAll+0x2e>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	603b      	str	r3, [r7, #0]
}
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
 800a670:	e7fd      	b.n	800a66e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a672:	f001 f939 	bl	800b8e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a676:	4b39      	ldr	r3, [pc, #228]	@ (800a75c <xTaskResumeAll+0x118>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	3b01      	subs	r3, #1
 800a67c:	4a37      	ldr	r2, [pc, #220]	@ (800a75c <xTaskResumeAll+0x118>)
 800a67e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a680:	4b36      	ldr	r3, [pc, #216]	@ (800a75c <xTaskResumeAll+0x118>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d162      	bne.n	800a74e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a688:	4b35      	ldr	r3, [pc, #212]	@ (800a760 <xTaskResumeAll+0x11c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d05e      	beq.n	800a74e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a690:	e02f      	b.n	800a6f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a692:	4b34      	ldr	r3, [pc, #208]	@ (800a764 <xTaskResumeAll+0x120>)
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3318      	adds	r3, #24
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fe ff7c 	bl	800959c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7fe ff77 	bl	800959c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b2:	4b2d      	ldr	r3, [pc, #180]	@ (800a768 <xTaskResumeAll+0x124>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d903      	bls.n	800a6c2 <xTaskResumeAll+0x7e>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6be:	4a2a      	ldr	r2, [pc, #168]	@ (800a768 <xTaskResumeAll+0x124>)
 800a6c0:	6013      	str	r3, [r2, #0]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	4a27      	ldr	r2, [pc, #156]	@ (800a76c <xTaskResumeAll+0x128>)
 800a6d0:	441a      	add	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	4610      	mov	r0, r2
 800a6da:	f7fe ff02 	bl	80094e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6e2:	4b23      	ldr	r3, [pc, #140]	@ (800a770 <xTaskResumeAll+0x12c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d302      	bcc.n	800a6f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a6ec:	4b21      	ldr	r3, [pc, #132]	@ (800a774 <xTaskResumeAll+0x130>)
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6f2:	4b1c      	ldr	r3, [pc, #112]	@ (800a764 <xTaskResumeAll+0x120>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1cb      	bne.n	800a692 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d001      	beq.n	800a704 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a700:	f000 fb66 	bl	800add0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a704:	4b1c      	ldr	r3, [pc, #112]	@ (800a778 <xTaskResumeAll+0x134>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d010      	beq.n	800a732 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a710:	f000 f846 	bl	800a7a0 <xTaskIncrementTick>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d002      	beq.n	800a720 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a71a:	4b16      	ldr	r3, [pc, #88]	@ (800a774 <xTaskResumeAll+0x130>)
 800a71c:	2201      	movs	r2, #1
 800a71e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3b01      	subs	r3, #1
 800a724:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1f1      	bne.n	800a710 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a72c:	4b12      	ldr	r3, [pc, #72]	@ (800a778 <xTaskResumeAll+0x134>)
 800a72e:	2200      	movs	r2, #0
 800a730:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a732:	4b10      	ldr	r3, [pc, #64]	@ (800a774 <xTaskResumeAll+0x130>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d009      	beq.n	800a74e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a73a:	2301      	movs	r3, #1
 800a73c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a73e:	4b0f      	ldr	r3, [pc, #60]	@ (800a77c <xTaskResumeAll+0x138>)
 800a740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a744:	601a      	str	r2, [r3, #0]
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a74e:	f001 f8fd 	bl	800b94c <vPortExitCritical>

	return xAlreadyYielded;
 800a752:	68bb      	ldr	r3, [r7, #8]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	20000eac 	.word	0x20000eac
 800a760:	20000e84 	.word	0x20000e84
 800a764:	20000e44 	.word	0x20000e44
 800a768:	20000e8c 	.word	0x20000e8c
 800a76c:	200009b4 	.word	0x200009b4
 800a770:	200009b0 	.word	0x200009b0
 800a774:	20000e98 	.word	0x20000e98
 800a778:	20000e94 	.word	0x20000e94
 800a77c:	e000ed04 	.word	0xe000ed04

0800a780 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a786:	4b05      	ldr	r3, [pc, #20]	@ (800a79c <xTaskGetTickCount+0x1c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a78c:	687b      	ldr	r3, [r7, #4]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	20000e88 	.word	0x20000e88

0800a7a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7aa:	4b4f      	ldr	r3, [pc, #316]	@ (800a8e8 <xTaskIncrementTick+0x148>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f040 8090 	bne.w	800a8d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a7b4:	4b4d      	ldr	r3, [pc, #308]	@ (800a8ec <xTaskIncrementTick+0x14c>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a7bc:	4a4b      	ldr	r2, [pc, #300]	@ (800a8ec <xTaskIncrementTick+0x14c>)
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d121      	bne.n	800a80c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a7c8:	4b49      	ldr	r3, [pc, #292]	@ (800a8f0 <xTaskIncrementTick+0x150>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00b      	beq.n	800a7ea <xTaskIncrementTick+0x4a>
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d6:	f383 8811 	msr	BASEPRI, r3
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	603b      	str	r3, [r7, #0]
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop
 800a7e8:	e7fd      	b.n	800a7e6 <xTaskIncrementTick+0x46>
 800a7ea:	4b41      	ldr	r3, [pc, #260]	@ (800a8f0 <xTaskIncrementTick+0x150>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	60fb      	str	r3, [r7, #12]
 800a7f0:	4b40      	ldr	r3, [pc, #256]	@ (800a8f4 <xTaskIncrementTick+0x154>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a3e      	ldr	r2, [pc, #248]	@ (800a8f0 <xTaskIncrementTick+0x150>)
 800a7f6:	6013      	str	r3, [r2, #0]
 800a7f8:	4a3e      	ldr	r2, [pc, #248]	@ (800a8f4 <xTaskIncrementTick+0x154>)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	4b3e      	ldr	r3, [pc, #248]	@ (800a8f8 <xTaskIncrementTick+0x158>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	3301      	adds	r3, #1
 800a804:	4a3c      	ldr	r2, [pc, #240]	@ (800a8f8 <xTaskIncrementTick+0x158>)
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	f000 fae2 	bl	800add0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a80c:	4b3b      	ldr	r3, [pc, #236]	@ (800a8fc <xTaskIncrementTick+0x15c>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	693a      	ldr	r2, [r7, #16]
 800a812:	429a      	cmp	r2, r3
 800a814:	d349      	bcc.n	800a8aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a816:	4b36      	ldr	r3, [pc, #216]	@ (800a8f0 <xTaskIncrementTick+0x150>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d104      	bne.n	800a82a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a820:	4b36      	ldr	r3, [pc, #216]	@ (800a8fc <xTaskIncrementTick+0x15c>)
 800a822:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a826:	601a      	str	r2, [r3, #0]
					break;
 800a828:	e03f      	b.n	800a8aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a82a:	4b31      	ldr	r3, [pc, #196]	@ (800a8f0 <xTaskIncrementTick+0x150>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d203      	bcs.n	800a84a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a842:	4a2e      	ldr	r2, [pc, #184]	@ (800a8fc <xTaskIncrementTick+0x15c>)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a848:	e02f      	b.n	800a8aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	3304      	adds	r3, #4
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe fea4 	bl	800959c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d004      	beq.n	800a866 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	3318      	adds	r3, #24
 800a860:	4618      	mov	r0, r3
 800a862:	f7fe fe9b 	bl	800959c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a86a:	4b25      	ldr	r3, [pc, #148]	@ (800a900 <xTaskIncrementTick+0x160>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d903      	bls.n	800a87a <xTaskIncrementTick+0xda>
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a876:	4a22      	ldr	r2, [pc, #136]	@ (800a900 <xTaskIncrementTick+0x160>)
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a87e:	4613      	mov	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4413      	add	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4a1f      	ldr	r2, [pc, #124]	@ (800a904 <xTaskIncrementTick+0x164>)
 800a888:	441a      	add	r2, r3
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	3304      	adds	r3, #4
 800a88e:	4619      	mov	r1, r3
 800a890:	4610      	mov	r0, r2
 800a892:	f7fe fe26 	bl	80094e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a89a:	4b1b      	ldr	r3, [pc, #108]	@ (800a908 <xTaskIncrementTick+0x168>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d3b8      	bcc.n	800a816 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8a8:	e7b5      	b.n	800a816 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8aa:	4b17      	ldr	r3, [pc, #92]	@ (800a908 <xTaskIncrementTick+0x168>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8b0:	4914      	ldr	r1, [pc, #80]	@ (800a904 <xTaskIncrementTick+0x164>)
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	4413      	add	r3, r2
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	440b      	add	r3, r1
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d901      	bls.n	800a8c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a8c6:	4b11      	ldr	r3, [pc, #68]	@ (800a90c <xTaskIncrementTick+0x16c>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d007      	beq.n	800a8de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	617b      	str	r3, [r7, #20]
 800a8d2:	e004      	b.n	800a8de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a8d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a910 <xTaskIncrementTick+0x170>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	4a0d      	ldr	r2, [pc, #52]	@ (800a910 <xTaskIncrementTick+0x170>)
 800a8dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a8de:	697b      	ldr	r3, [r7, #20]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3718      	adds	r7, #24
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	20000eac 	.word	0x20000eac
 800a8ec:	20000e88 	.word	0x20000e88
 800a8f0:	20000e3c 	.word	0x20000e3c
 800a8f4:	20000e40 	.word	0x20000e40
 800a8f8:	20000e9c 	.word	0x20000e9c
 800a8fc:	20000ea4 	.word	0x20000ea4
 800a900:	20000e8c 	.word	0x20000e8c
 800a904:	200009b4 	.word	0x200009b4
 800a908:	200009b0 	.word	0x200009b0
 800a90c:	20000e98 	.word	0x20000e98
 800a910:	20000e94 	.word	0x20000e94

0800a914 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a91a:	4b2b      	ldr	r3, [pc, #172]	@ (800a9c8 <vTaskSwitchContext+0xb4>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a922:	4b2a      	ldr	r3, [pc, #168]	@ (800a9cc <vTaskSwitchContext+0xb8>)
 800a924:	2201      	movs	r2, #1
 800a926:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a928:	e047      	b.n	800a9ba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a92a:	4b28      	ldr	r3, [pc, #160]	@ (800a9cc <vTaskSwitchContext+0xb8>)
 800a92c:	2200      	movs	r2, #0
 800a92e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a930:	4b27      	ldr	r3, [pc, #156]	@ (800a9d0 <vTaskSwitchContext+0xbc>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	60fb      	str	r3, [r7, #12]
 800a936:	e011      	b.n	800a95c <vTaskSwitchContext+0x48>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10b      	bne.n	800a956 <vTaskSwitchContext+0x42>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	607b      	str	r3, [r7, #4]
}
 800a950:	bf00      	nop
 800a952:	bf00      	nop
 800a954:	e7fd      	b.n	800a952 <vTaskSwitchContext+0x3e>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3b01      	subs	r3, #1
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	491d      	ldr	r1, [pc, #116]	@ (800a9d4 <vTaskSwitchContext+0xc0>)
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	4613      	mov	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4413      	add	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	440b      	add	r3, r1
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d0e3      	beq.n	800a938 <vTaskSwitchContext+0x24>
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	4613      	mov	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4413      	add	r3, r2
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	4a16      	ldr	r2, [pc, #88]	@ (800a9d4 <vTaskSwitchContext+0xc0>)
 800a97c:	4413      	add	r3, r2
 800a97e:	60bb      	str	r3, [r7, #8]
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	605a      	str	r2, [r3, #4]
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	685a      	ldr	r2, [r3, #4]
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	3308      	adds	r3, #8
 800a992:	429a      	cmp	r2, r3
 800a994:	d104      	bne.n	800a9a0 <vTaskSwitchContext+0x8c>
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	605a      	str	r2, [r3, #4]
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a9d8 <vTaskSwitchContext+0xc4>)
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	4a09      	ldr	r2, [pc, #36]	@ (800a9d0 <vTaskSwitchContext+0xbc>)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9b0:	4b09      	ldr	r3, [pc, #36]	@ (800a9d8 <vTaskSwitchContext+0xc4>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3354      	adds	r3, #84	@ 0x54
 800a9b6:	4a09      	ldr	r2, [pc, #36]	@ (800a9dc <vTaskSwitchContext+0xc8>)
 800a9b8:	6013      	str	r3, [r2, #0]
}
 800a9ba:	bf00      	nop
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	20000eac 	.word	0x20000eac
 800a9cc:	20000e98 	.word	0x20000e98
 800a9d0:	20000e8c 	.word	0x20000e8c
 800a9d4:	200009b4 	.word	0x200009b4
 800a9d8:	200009b0 	.word	0x200009b0
 800a9dc:	2000003c 	.word	0x2000003c

0800a9e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10b      	bne.n	800aa08 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	60fb      	str	r3, [r7, #12]
}
 800aa02:	bf00      	nop
 800aa04:	bf00      	nop
 800aa06:	e7fd      	b.n	800aa04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa08:	4b07      	ldr	r3, [pc, #28]	@ (800aa28 <vTaskPlaceOnEventList+0x48>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	3318      	adds	r3, #24
 800aa0e:	4619      	mov	r1, r3
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f7fe fd8a 	bl	800952a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa16:	2101      	movs	r1, #1
 800aa18:	6838      	ldr	r0, [r7, #0]
 800aa1a:	f000 fa87 	bl	800af2c <prvAddCurrentTaskToDelayedList>
}
 800aa1e:	bf00      	nop
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	200009b0 	.word	0x200009b0

0800aa2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10b      	bne.n	800aa56 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	617b      	str	r3, [r7, #20]
}
 800aa50:	bf00      	nop
 800aa52:	bf00      	nop
 800aa54:	e7fd      	b.n	800aa52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa56:	4b0a      	ldr	r3, [pc, #40]	@ (800aa80 <vTaskPlaceOnEventListRestricted+0x54>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	3318      	adds	r3, #24
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f7fe fd3f 	bl	80094e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800aa6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa70:	6879      	ldr	r1, [r7, #4]
 800aa72:	68b8      	ldr	r0, [r7, #8]
 800aa74:	f000 fa5a 	bl	800af2c <prvAddCurrentTaskToDelayedList>
	}
 800aa78:	bf00      	nop
 800aa7a:	3718      	adds	r7, #24
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	200009b0 	.word	0x200009b0

0800aa84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10b      	bne.n	800aab2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	60fb      	str	r3, [r7, #12]
}
 800aaac:	bf00      	nop
 800aaae:	bf00      	nop
 800aab0:	e7fd      	b.n	800aaae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	3318      	adds	r3, #24
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fe fd70 	bl	800959c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aabc:	4b1d      	ldr	r3, [pc, #116]	@ (800ab34 <xTaskRemoveFromEventList+0xb0>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d11d      	bne.n	800ab00 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	3304      	adds	r3, #4
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fe fd67 	bl	800959c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aad2:	4b19      	ldr	r3, [pc, #100]	@ (800ab38 <xTaskRemoveFromEventList+0xb4>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d903      	bls.n	800aae2 <xTaskRemoveFromEventList+0x5e>
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aade:	4a16      	ldr	r2, [pc, #88]	@ (800ab38 <xTaskRemoveFromEventList+0xb4>)
 800aae0:	6013      	str	r3, [r2, #0]
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae6:	4613      	mov	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4a13      	ldr	r2, [pc, #76]	@ (800ab3c <xTaskRemoveFromEventList+0xb8>)
 800aaf0:	441a      	add	r2, r3
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	4610      	mov	r0, r2
 800aafa:	f7fe fcf2 	bl	80094e2 <vListInsertEnd>
 800aafe:	e005      	b.n	800ab0c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	3318      	adds	r3, #24
 800ab04:	4619      	mov	r1, r3
 800ab06:	480e      	ldr	r0, [pc, #56]	@ (800ab40 <xTaskRemoveFromEventList+0xbc>)
 800ab08:	f7fe fceb 	bl	80094e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab10:	4b0c      	ldr	r3, [pc, #48]	@ (800ab44 <xTaskRemoveFromEventList+0xc0>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d905      	bls.n	800ab26 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ab48 <xTaskRemoveFromEventList+0xc4>)
 800ab20:	2201      	movs	r2, #1
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	e001      	b.n	800ab2a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab2a:	697b      	ldr	r3, [r7, #20]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3718      	adds	r7, #24
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	20000eac 	.word	0x20000eac
 800ab38:	20000e8c 	.word	0x20000e8c
 800ab3c:	200009b4 	.word	0x200009b4
 800ab40:	20000e44 	.word	0x20000e44
 800ab44:	200009b0 	.word	0x200009b0
 800ab48:	20000e98 	.word	0x20000e98

0800ab4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab54:	4b06      	ldr	r3, [pc, #24]	@ (800ab70 <vTaskInternalSetTimeOutState+0x24>)
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab5c:	4b05      	ldr	r3, [pc, #20]	@ (800ab74 <vTaskInternalSetTimeOutState+0x28>)
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	605a      	str	r2, [r3, #4]
}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr
 800ab70:	20000e9c 	.word	0x20000e9c
 800ab74:	20000e88 	.word	0x20000e88

0800ab78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b088      	sub	sp, #32
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10b      	bne.n	800aba0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ab88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab8c:	f383 8811 	msr	BASEPRI, r3
 800ab90:	f3bf 8f6f 	isb	sy
 800ab94:	f3bf 8f4f 	dsb	sy
 800ab98:	613b      	str	r3, [r7, #16]
}
 800ab9a:	bf00      	nop
 800ab9c:	bf00      	nop
 800ab9e:	e7fd      	b.n	800ab9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10b      	bne.n	800abbe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800aba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	60fb      	str	r3, [r7, #12]
}
 800abb8:	bf00      	nop
 800abba:	bf00      	nop
 800abbc:	e7fd      	b.n	800abba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800abbe:	f000 fe93 	bl	800b8e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800abc2:	4b1d      	ldr	r3, [pc, #116]	@ (800ac38 <xTaskCheckForTimeOut+0xc0>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	69ba      	ldr	r2, [r7, #24]
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abda:	d102      	bne.n	800abe2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800abdc:	2300      	movs	r3, #0
 800abde:	61fb      	str	r3, [r7, #28]
 800abe0:	e023      	b.n	800ac2a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	4b15      	ldr	r3, [pc, #84]	@ (800ac3c <xTaskCheckForTimeOut+0xc4>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	429a      	cmp	r2, r3
 800abec:	d007      	beq.n	800abfe <xTaskCheckForTimeOut+0x86>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	69ba      	ldr	r2, [r7, #24]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d302      	bcc.n	800abfe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800abf8:	2301      	movs	r3, #1
 800abfa:	61fb      	str	r3, [r7, #28]
 800abfc:	e015      	b.n	800ac2a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d20b      	bcs.n	800ac20 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	1ad2      	subs	r2, r2, r3
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7ff ff99 	bl	800ab4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	61fb      	str	r3, [r7, #28]
 800ac1e:	e004      	b.n	800ac2a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	2200      	movs	r2, #0
 800ac24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac26:	2301      	movs	r3, #1
 800ac28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac2a:	f000 fe8f 	bl	800b94c <vPortExitCritical>

	return xReturn;
 800ac2e:	69fb      	ldr	r3, [r7, #28]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3720      	adds	r7, #32
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	20000e88 	.word	0x20000e88
 800ac3c:	20000e9c 	.word	0x20000e9c

0800ac40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac40:	b480      	push	{r7}
 800ac42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac44:	4b03      	ldr	r3, [pc, #12]	@ (800ac54 <vTaskMissedYield+0x14>)
 800ac46:	2201      	movs	r2, #1
 800ac48:	601a      	str	r2, [r3, #0]
}
 800ac4a:	bf00      	nop
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	20000e98 	.word	0x20000e98

0800ac58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac60:	f000 f852 	bl	800ad08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac64:	4b06      	ldr	r3, [pc, #24]	@ (800ac80 <prvIdleTask+0x28>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d9f9      	bls.n	800ac60 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac6c:	4b05      	ldr	r3, [pc, #20]	@ (800ac84 <prvIdleTask+0x2c>)
 800ac6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac72:	601a      	str	r2, [r3, #0]
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac7c:	e7f0      	b.n	800ac60 <prvIdleTask+0x8>
 800ac7e:	bf00      	nop
 800ac80:	200009b4 	.word	0x200009b4
 800ac84:	e000ed04 	.word	0xe000ed04

0800ac88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac8e:	2300      	movs	r3, #0
 800ac90:	607b      	str	r3, [r7, #4]
 800ac92:	e00c      	b.n	800acae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	4613      	mov	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4413      	add	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	4a12      	ldr	r2, [pc, #72]	@ (800ace8 <prvInitialiseTaskLists+0x60>)
 800aca0:	4413      	add	r3, r2
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fe fbf0 	bl	8009488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	3301      	adds	r3, #1
 800acac:	607b      	str	r3, [r7, #4]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2b37      	cmp	r3, #55	@ 0x37
 800acb2:	d9ef      	bls.n	800ac94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800acb4:	480d      	ldr	r0, [pc, #52]	@ (800acec <prvInitialiseTaskLists+0x64>)
 800acb6:	f7fe fbe7 	bl	8009488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800acba:	480d      	ldr	r0, [pc, #52]	@ (800acf0 <prvInitialiseTaskLists+0x68>)
 800acbc:	f7fe fbe4 	bl	8009488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800acc0:	480c      	ldr	r0, [pc, #48]	@ (800acf4 <prvInitialiseTaskLists+0x6c>)
 800acc2:	f7fe fbe1 	bl	8009488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800acc6:	480c      	ldr	r0, [pc, #48]	@ (800acf8 <prvInitialiseTaskLists+0x70>)
 800acc8:	f7fe fbde 	bl	8009488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800accc:	480b      	ldr	r0, [pc, #44]	@ (800acfc <prvInitialiseTaskLists+0x74>)
 800acce:	f7fe fbdb 	bl	8009488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800acd2:	4b0b      	ldr	r3, [pc, #44]	@ (800ad00 <prvInitialiseTaskLists+0x78>)
 800acd4:	4a05      	ldr	r2, [pc, #20]	@ (800acec <prvInitialiseTaskLists+0x64>)
 800acd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800acd8:	4b0a      	ldr	r3, [pc, #40]	@ (800ad04 <prvInitialiseTaskLists+0x7c>)
 800acda:	4a05      	ldr	r2, [pc, #20]	@ (800acf0 <prvInitialiseTaskLists+0x68>)
 800acdc:	601a      	str	r2, [r3, #0]
}
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	200009b4 	.word	0x200009b4
 800acec:	20000e14 	.word	0x20000e14
 800acf0:	20000e28 	.word	0x20000e28
 800acf4:	20000e44 	.word	0x20000e44
 800acf8:	20000e58 	.word	0x20000e58
 800acfc:	20000e70 	.word	0x20000e70
 800ad00:	20000e3c 	.word	0x20000e3c
 800ad04:	20000e40 	.word	0x20000e40

0800ad08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad0e:	e019      	b.n	800ad44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad10:	f000 fdea 	bl	800b8e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad14:	4b10      	ldr	r3, [pc, #64]	@ (800ad58 <prvCheckTasksWaitingTermination+0x50>)
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	3304      	adds	r3, #4
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fe fc3b 	bl	800959c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad26:	4b0d      	ldr	r3, [pc, #52]	@ (800ad5c <prvCheckTasksWaitingTermination+0x54>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	4a0b      	ldr	r2, [pc, #44]	@ (800ad5c <prvCheckTasksWaitingTermination+0x54>)
 800ad2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad30:	4b0b      	ldr	r3, [pc, #44]	@ (800ad60 <prvCheckTasksWaitingTermination+0x58>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	3b01      	subs	r3, #1
 800ad36:	4a0a      	ldr	r2, [pc, #40]	@ (800ad60 <prvCheckTasksWaitingTermination+0x58>)
 800ad38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad3a:	f000 fe07 	bl	800b94c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f810 	bl	800ad64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad44:	4b06      	ldr	r3, [pc, #24]	@ (800ad60 <prvCheckTasksWaitingTermination+0x58>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1e1      	bne.n	800ad10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad4c:	bf00      	nop
 800ad4e:	bf00      	nop
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20000e58 	.word	0x20000e58
 800ad5c:	20000e84 	.word	0x20000e84
 800ad60:	20000e6c 	.word	0x20000e6c

0800ad64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	3354      	adds	r3, #84	@ 0x54
 800ad70:	4618      	mov	r0, r3
 800ad72:	f001 fecd 	bl	800cb10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d108      	bne.n	800ad92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad84:	4618      	mov	r0, r3
 800ad86:	f000 ff9f 	bl	800bcc8 <vPortFree>
				vPortFree( pxTCB );
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 ff9c 	bl	800bcc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad90:	e019      	b.n	800adc6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d103      	bne.n	800ada4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 ff93 	bl	800bcc8 <vPortFree>
	}
 800ada2:	e010      	b.n	800adc6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d00b      	beq.n	800adc6 <prvDeleteTCB+0x62>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	60fb      	str	r3, [r7, #12]
}
 800adc0:	bf00      	nop
 800adc2:	bf00      	nop
 800adc4:	e7fd      	b.n	800adc2 <prvDeleteTCB+0x5e>
	}
 800adc6:	bf00      	nop
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
	...

0800add0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800add6:	4b0c      	ldr	r3, [pc, #48]	@ (800ae08 <prvResetNextTaskUnblockTime+0x38>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d104      	bne.n	800adea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ade0:	4b0a      	ldr	r3, [pc, #40]	@ (800ae0c <prvResetNextTaskUnblockTime+0x3c>)
 800ade2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ade6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ade8:	e008      	b.n	800adfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adea:	4b07      	ldr	r3, [pc, #28]	@ (800ae08 <prvResetNextTaskUnblockTime+0x38>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	4a04      	ldr	r2, [pc, #16]	@ (800ae0c <prvResetNextTaskUnblockTime+0x3c>)
 800adfa:	6013      	str	r3, [r2, #0]
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	20000e3c 	.word	0x20000e3c
 800ae0c:	20000ea4 	.word	0x20000ea4

0800ae10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae16:	4b0b      	ldr	r3, [pc, #44]	@ (800ae44 <xTaskGetSchedulerState+0x34>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d102      	bne.n	800ae24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	607b      	str	r3, [r7, #4]
 800ae22:	e008      	b.n	800ae36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae24:	4b08      	ldr	r3, [pc, #32]	@ (800ae48 <xTaskGetSchedulerState+0x38>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d102      	bne.n	800ae32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	607b      	str	r3, [r7, #4]
 800ae30:	e001      	b.n	800ae36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae32:	2300      	movs	r3, #0
 800ae34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae36:	687b      	ldr	r3, [r7, #4]
	}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	20000e90 	.word	0x20000e90
 800ae48:	20000eac 	.word	0x20000eac

0800ae4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d058      	beq.n	800af14 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae62:	4b2f      	ldr	r3, [pc, #188]	@ (800af20 <xTaskPriorityDisinherit+0xd4>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d00b      	beq.n	800ae84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ae6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae70:	f383 8811 	msr	BASEPRI, r3
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	60fb      	str	r3, [r7, #12]
}
 800ae7e:	bf00      	nop
 800ae80:	bf00      	nop
 800ae82:	e7fd      	b.n	800ae80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10b      	bne.n	800aea4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	60bb      	str	r3, [r7, #8]
}
 800ae9e:	bf00      	nop
 800aea0:	bf00      	nop
 800aea2:	e7fd      	b.n	800aea0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aea8:	1e5a      	subs	r2, r3, #1
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d02c      	beq.n	800af14 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d128      	bne.n	800af14 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	3304      	adds	r3, #4
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fb68 	bl	800959c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aee4:	4b0f      	ldr	r3, [pc, #60]	@ (800af24 <xTaskPriorityDisinherit+0xd8>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d903      	bls.n	800aef4 <xTaskPriorityDisinherit+0xa8>
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef0:	4a0c      	ldr	r2, [pc, #48]	@ (800af24 <xTaskPriorityDisinherit+0xd8>)
 800aef2:	6013      	str	r3, [r2, #0]
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aef8:	4613      	mov	r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4a09      	ldr	r2, [pc, #36]	@ (800af28 <xTaskPriorityDisinherit+0xdc>)
 800af02:	441a      	add	r2, r3
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	3304      	adds	r3, #4
 800af08:	4619      	mov	r1, r3
 800af0a:	4610      	mov	r0, r2
 800af0c:	f7fe fae9 	bl	80094e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af10:	2301      	movs	r3, #1
 800af12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af14:	697b      	ldr	r3, [r7, #20]
	}
 800af16:	4618      	mov	r0, r3
 800af18:	3718      	adds	r7, #24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	200009b0 	.word	0x200009b0
 800af24:	20000e8c 	.word	0x20000e8c
 800af28:	200009b4 	.word	0x200009b4

0800af2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800af36:	4b21      	ldr	r3, [pc, #132]	@ (800afbc <prvAddCurrentTaskToDelayedList+0x90>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af3c:	4b20      	ldr	r3, [pc, #128]	@ (800afc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	3304      	adds	r3, #4
 800af42:	4618      	mov	r0, r3
 800af44:	f7fe fb2a 	bl	800959c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af4e:	d10a      	bne.n	800af66 <prvAddCurrentTaskToDelayedList+0x3a>
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d007      	beq.n	800af66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af56:	4b1a      	ldr	r3, [pc, #104]	@ (800afc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	3304      	adds	r3, #4
 800af5c:	4619      	mov	r1, r3
 800af5e:	4819      	ldr	r0, [pc, #100]	@ (800afc4 <prvAddCurrentTaskToDelayedList+0x98>)
 800af60:	f7fe fabf 	bl	80094e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af64:	e026      	b.n	800afb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4413      	add	r3, r2
 800af6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af6e:	4b14      	ldr	r3, [pc, #80]	@ (800afc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d209      	bcs.n	800af92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af7e:	4b12      	ldr	r3, [pc, #72]	@ (800afc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	4b0f      	ldr	r3, [pc, #60]	@ (800afc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	3304      	adds	r3, #4
 800af88:	4619      	mov	r1, r3
 800af8a:	4610      	mov	r0, r2
 800af8c:	f7fe facd 	bl	800952a <vListInsert>
}
 800af90:	e010      	b.n	800afb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af92:	4b0e      	ldr	r3, [pc, #56]	@ (800afcc <prvAddCurrentTaskToDelayedList+0xa0>)
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	4b0a      	ldr	r3, [pc, #40]	@ (800afc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3304      	adds	r3, #4
 800af9c:	4619      	mov	r1, r3
 800af9e:	4610      	mov	r0, r2
 800afa0:	f7fe fac3 	bl	800952a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800afa4:	4b0a      	ldr	r3, [pc, #40]	@ (800afd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d202      	bcs.n	800afb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800afae:	4a08      	ldr	r2, [pc, #32]	@ (800afd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	6013      	str	r3, [r2, #0]
}
 800afb4:	bf00      	nop
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	20000e88 	.word	0x20000e88
 800afc0:	200009b0 	.word	0x200009b0
 800afc4:	20000e70 	.word	0x20000e70
 800afc8:	20000e40 	.word	0x20000e40
 800afcc:	20000e3c 	.word	0x20000e3c
 800afd0:	20000ea4 	.word	0x20000ea4

0800afd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08a      	sub	sp, #40	@ 0x28
 800afd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800afda:	2300      	movs	r3, #0
 800afdc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800afde:	f000 fb13 	bl	800b608 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800afe2:	4b1d      	ldr	r3, [pc, #116]	@ (800b058 <xTimerCreateTimerTask+0x84>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d021      	beq.n	800b02e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800afea:	2300      	movs	r3, #0
 800afec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800afee:	2300      	movs	r3, #0
 800aff0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aff2:	1d3a      	adds	r2, r7, #4
 800aff4:	f107 0108 	add.w	r1, r7, #8
 800aff8:	f107 030c 	add.w	r3, r7, #12
 800affc:	4618      	mov	r0, r3
 800affe:	f7fe fa29 	bl	8009454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b002:	6879      	ldr	r1, [r7, #4]
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	9202      	str	r2, [sp, #8]
 800b00a:	9301      	str	r3, [sp, #4]
 800b00c:	2302      	movs	r3, #2
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	2300      	movs	r3, #0
 800b012:	460a      	mov	r2, r1
 800b014:	4911      	ldr	r1, [pc, #68]	@ (800b05c <xTimerCreateTimerTask+0x88>)
 800b016:	4812      	ldr	r0, [pc, #72]	@ (800b060 <xTimerCreateTimerTask+0x8c>)
 800b018:	f7ff f8a2 	bl	800a160 <xTaskCreateStatic>
 800b01c:	4603      	mov	r3, r0
 800b01e:	4a11      	ldr	r2, [pc, #68]	@ (800b064 <xTimerCreateTimerTask+0x90>)
 800b020:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b022:	4b10      	ldr	r3, [pc, #64]	@ (800b064 <xTimerCreateTimerTask+0x90>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b02a:	2301      	movs	r3, #1
 800b02c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d10b      	bne.n	800b04c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	613b      	str	r3, [r7, #16]
}
 800b046:	bf00      	nop
 800b048:	bf00      	nop
 800b04a:	e7fd      	b.n	800b048 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b04c:	697b      	ldr	r3, [r7, #20]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	20000ee0 	.word	0x20000ee0
 800b05c:	0800d944 	.word	0x0800d944
 800b060:	0800b1a1 	.word	0x0800b1a1
 800b064:	20000ee4 	.word	0x20000ee4

0800b068 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b08a      	sub	sp, #40	@ 0x28
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
 800b074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b076:	2300      	movs	r3, #0
 800b078:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d10b      	bne.n	800b098 <xTimerGenericCommand+0x30>
	__asm volatile
 800b080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	623b      	str	r3, [r7, #32]
}
 800b092:	bf00      	nop
 800b094:	bf00      	nop
 800b096:	e7fd      	b.n	800b094 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b098:	4b19      	ldr	r3, [pc, #100]	@ (800b100 <xTimerGenericCommand+0x98>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d02a      	beq.n	800b0f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2b05      	cmp	r3, #5
 800b0b0:	dc18      	bgt.n	800b0e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b0b2:	f7ff fead 	bl	800ae10 <xTaskGetSchedulerState>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d109      	bne.n	800b0d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b0bc:	4b10      	ldr	r3, [pc, #64]	@ (800b100 <xTimerGenericCommand+0x98>)
 800b0be:	6818      	ldr	r0, [r3, #0]
 800b0c0:	f107 0110 	add.w	r1, r7, #16
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0c8:	f7fe fbd8 	bl	800987c <xQueueGenericSend>
 800b0cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0ce:	e012      	b.n	800b0f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b0d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b100 <xTimerGenericCommand+0x98>)
 800b0d2:	6818      	ldr	r0, [r3, #0]
 800b0d4:	f107 0110 	add.w	r1, r7, #16
 800b0d8:	2300      	movs	r3, #0
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f7fe fbce 	bl	800987c <xQueueGenericSend>
 800b0e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0e2:	e008      	b.n	800b0f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b0e4:	4b06      	ldr	r3, [pc, #24]	@ (800b100 <xTimerGenericCommand+0x98>)
 800b0e6:	6818      	ldr	r0, [r3, #0]
 800b0e8:	f107 0110 	add.w	r1, r7, #16
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	683a      	ldr	r2, [r7, #0]
 800b0f0:	f7fe fcc6 	bl	8009a80 <xQueueGenericSendFromISR>
 800b0f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3728      	adds	r7, #40	@ 0x28
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	20000ee0 	.word	0x20000ee0

0800b104 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b088      	sub	sp, #32
 800b108:	af02      	add	r7, sp, #8
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b10e:	4b23      	ldr	r3, [pc, #140]	@ (800b19c <prvProcessExpiredTimer+0x98>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	3304      	adds	r3, #4
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7fe fa3d 	bl	800959c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b128:	f003 0304 	and.w	r3, r3, #4
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d023      	beq.n	800b178 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	699a      	ldr	r2, [r3, #24]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	18d1      	adds	r1, r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	6978      	ldr	r0, [r7, #20]
 800b13e:	f000 f8d5 	bl	800b2ec <prvInsertTimerInActiveList>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d020      	beq.n	800b18a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b148:	2300      	movs	r3, #0
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	2300      	movs	r3, #0
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	2100      	movs	r1, #0
 800b152:	6978      	ldr	r0, [r7, #20]
 800b154:	f7ff ff88 	bl	800b068 <xTimerGenericCommand>
 800b158:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d114      	bne.n	800b18a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	60fb      	str	r3, [r7, #12]
}
 800b172:	bf00      	nop
 800b174:	bf00      	nop
 800b176:	e7fd      	b.n	800b174 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b17e:	f023 0301 	bic.w	r3, r3, #1
 800b182:	b2da      	uxtb	r2, r3
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	6978      	ldr	r0, [r7, #20]
 800b190:	4798      	blx	r3
}
 800b192:	bf00      	nop
 800b194:	3718      	adds	r7, #24
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	20000ed8 	.word	0x20000ed8

0800b1a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1a8:	f107 0308 	add.w	r3, r7, #8
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 f859 	bl	800b264 <prvGetNextExpireTime>
 800b1b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	f000 f805 	bl	800b1c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b1be:	f000 f8d7 	bl	800b370 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1c2:	bf00      	nop
 800b1c4:	e7f0      	b.n	800b1a8 <prvTimerTask+0x8>
	...

0800b1c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b1d2:	f7ff fa29 	bl	800a628 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1d6:	f107 0308 	add.w	r3, r7, #8
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 f866 	bl	800b2ac <prvSampleTimeNow>
 800b1e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d130      	bne.n	800b24a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10a      	bne.n	800b204 <prvProcessTimerOrBlockTask+0x3c>
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d806      	bhi.n	800b204 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b1f6:	f7ff fa25 	bl	800a644 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b1fa:	68f9      	ldr	r1, [r7, #12]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f7ff ff81 	bl	800b104 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b202:	e024      	b.n	800b24e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d008      	beq.n	800b21c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b20a:	4b13      	ldr	r3, [pc, #76]	@ (800b258 <prvProcessTimerOrBlockTask+0x90>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d101      	bne.n	800b218 <prvProcessTimerOrBlockTask+0x50>
 800b214:	2301      	movs	r3, #1
 800b216:	e000      	b.n	800b21a <prvProcessTimerOrBlockTask+0x52>
 800b218:	2300      	movs	r3, #0
 800b21a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b21c:	4b0f      	ldr	r3, [pc, #60]	@ (800b25c <prvProcessTimerOrBlockTask+0x94>)
 800b21e:	6818      	ldr	r0, [r3, #0]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	4619      	mov	r1, r3
 800b22a:	f7fe ff65 	bl	800a0f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b22e:	f7ff fa09 	bl	800a644 <xTaskResumeAll>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10a      	bne.n	800b24e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b238:	4b09      	ldr	r3, [pc, #36]	@ (800b260 <prvProcessTimerOrBlockTask+0x98>)
 800b23a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	f3bf 8f6f 	isb	sy
}
 800b248:	e001      	b.n	800b24e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b24a:	f7ff f9fb 	bl	800a644 <xTaskResumeAll>
}
 800b24e:	bf00      	nop
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	20000edc 	.word	0x20000edc
 800b25c:	20000ee0 	.word	0x20000ee0
 800b260:	e000ed04 	.word	0xe000ed04

0800b264 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b26c:	4b0e      	ldr	r3, [pc, #56]	@ (800b2a8 <prvGetNextExpireTime+0x44>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d101      	bne.n	800b27a <prvGetNextExpireTime+0x16>
 800b276:	2201      	movs	r2, #1
 800b278:	e000      	b.n	800b27c <prvGetNextExpireTime+0x18>
 800b27a:	2200      	movs	r2, #0
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d105      	bne.n	800b294 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b288:	4b07      	ldr	r3, [pc, #28]	@ (800b2a8 <prvGetNextExpireTime+0x44>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	60fb      	str	r3, [r7, #12]
 800b292:	e001      	b.n	800b298 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b294:	2300      	movs	r3, #0
 800b296:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b298:	68fb      	ldr	r3, [r7, #12]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3714      	adds	r7, #20
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	20000ed8 	.word	0x20000ed8

0800b2ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b2b4:	f7ff fa64 	bl	800a780 <xTaskGetTickCount>
 800b2b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b2ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b2e8 <prvSampleTimeNow+0x3c>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d205      	bcs.n	800b2d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b2c4:	f000 f93a 	bl	800b53c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	601a      	str	r2, [r3, #0]
 800b2ce:	e002      	b.n	800b2d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b2d6:	4a04      	ldr	r2, [pc, #16]	@ (800b2e8 <prvSampleTimeNow+0x3c>)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	20000ee8 	.word	0x20000ee8

0800b2ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b086      	sub	sp, #24
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d812      	bhi.n	800b338 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	1ad2      	subs	r2, r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	699b      	ldr	r3, [r3, #24]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d302      	bcc.n	800b326 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b320:	2301      	movs	r3, #1
 800b322:	617b      	str	r3, [r7, #20]
 800b324:	e01b      	b.n	800b35e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b326:	4b10      	ldr	r3, [pc, #64]	@ (800b368 <prvInsertTimerInActiveList+0x7c>)
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3304      	adds	r3, #4
 800b32e:	4619      	mov	r1, r3
 800b330:	4610      	mov	r0, r2
 800b332:	f7fe f8fa 	bl	800952a <vListInsert>
 800b336:	e012      	b.n	800b35e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d206      	bcs.n	800b34e <prvInsertTimerInActiveList+0x62>
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	429a      	cmp	r2, r3
 800b346:	d302      	bcc.n	800b34e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b348:	2301      	movs	r3, #1
 800b34a:	617b      	str	r3, [r7, #20]
 800b34c:	e007      	b.n	800b35e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b34e:	4b07      	ldr	r3, [pc, #28]	@ (800b36c <prvInsertTimerInActiveList+0x80>)
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3304      	adds	r3, #4
 800b356:	4619      	mov	r1, r3
 800b358:	4610      	mov	r0, r2
 800b35a:	f7fe f8e6 	bl	800952a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b35e:	697b      	ldr	r3, [r7, #20]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3718      	adds	r7, #24
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	20000edc 	.word	0x20000edc
 800b36c:	20000ed8 	.word	0x20000ed8

0800b370 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b08e      	sub	sp, #56	@ 0x38
 800b374:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b376:	e0ce      	b.n	800b516 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	da19      	bge.n	800b3b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b37e:	1d3b      	adds	r3, r7, #4
 800b380:	3304      	adds	r3, #4
 800b382:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10b      	bne.n	800b3a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b38e:	f383 8811 	msr	BASEPRI, r3
 800b392:	f3bf 8f6f 	isb	sy
 800b396:	f3bf 8f4f 	dsb	sy
 800b39a:	61fb      	str	r3, [r7, #28]
}
 800b39c:	bf00      	nop
 800b39e:	bf00      	nop
 800b3a0:	e7fd      	b.n	800b39e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3a8:	6850      	ldr	r0, [r2, #4]
 800b3aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3ac:	6892      	ldr	r2, [r2, #8]
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f2c0 80ae 	blt.w	800b516 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d004      	beq.n	800b3d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fe f8e6 	bl	800959c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b3d0:	463b      	mov	r3, r7
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7ff ff6a 	bl	800b2ac <prvSampleTimeNow>
 800b3d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2b09      	cmp	r3, #9
 800b3de:	f200 8097 	bhi.w	800b510 <prvProcessReceivedCommands+0x1a0>
 800b3e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e8 <prvProcessReceivedCommands+0x78>)
 800b3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e8:	0800b411 	.word	0x0800b411
 800b3ec:	0800b411 	.word	0x0800b411
 800b3f0:	0800b411 	.word	0x0800b411
 800b3f4:	0800b487 	.word	0x0800b487
 800b3f8:	0800b49b 	.word	0x0800b49b
 800b3fc:	0800b4e7 	.word	0x0800b4e7
 800b400:	0800b411 	.word	0x0800b411
 800b404:	0800b411 	.word	0x0800b411
 800b408:	0800b487 	.word	0x0800b487
 800b40c:	0800b49b 	.word	0x0800b49b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b412:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b416:	f043 0301 	orr.w	r3, r3, #1
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	18d1      	adds	r1, r2, r3
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b42e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b430:	f7ff ff5c 	bl	800b2ec <prvInsertTimerInActiveList>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d06c      	beq.n	800b514 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b440:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d061      	beq.n	800b514 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b454:	699b      	ldr	r3, [r3, #24]
 800b456:	441a      	add	r2, r3
 800b458:	2300      	movs	r3, #0
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	2300      	movs	r3, #0
 800b45e:	2100      	movs	r1, #0
 800b460:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b462:	f7ff fe01 	bl	800b068 <xTimerGenericCommand>
 800b466:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b468:	6a3b      	ldr	r3, [r7, #32]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d152      	bne.n	800b514 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	61bb      	str	r3, [r7, #24]
}
 800b480:	bf00      	nop
 800b482:	bf00      	nop
 800b484:	e7fd      	b.n	800b482 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b48c:	f023 0301 	bic.w	r3, r3, #1
 800b490:	b2da      	uxtb	r2, r3
 800b492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b494:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b498:	e03d      	b.n	800b516 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4a0:	f043 0301 	orr.w	r3, r3, #1
 800b4a4:	b2da      	uxtb	r2, r3
 800b4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b4:	699b      	ldr	r3, [r3, #24]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d10b      	bne.n	800b4d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	617b      	str	r3, [r7, #20]
}
 800b4cc:	bf00      	nop
 800b4ce:	bf00      	nop
 800b4d0:	e7fd      	b.n	800b4ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d4:	699a      	ldr	r2, [r3, #24]
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d8:	18d1      	adds	r1, r2, r3
 800b4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4e0:	f7ff ff04 	bl	800b2ec <prvInsertTimerInActiveList>
					break;
 800b4e4:	e017      	b.n	800b516 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4ec:	f003 0302 	and.w	r3, r3, #2
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d103      	bne.n	800b4fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b4f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4f6:	f000 fbe7 	bl	800bcc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b4fa:	e00c      	b.n	800b516 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b502:	f023 0301 	bic.w	r3, r3, #1
 800b506:	b2da      	uxtb	r2, r3
 800b508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b50e:	e002      	b.n	800b516 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b510:	bf00      	nop
 800b512:	e000      	b.n	800b516 <prvProcessReceivedCommands+0x1a6>
					break;
 800b514:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b516:	4b08      	ldr	r3, [pc, #32]	@ (800b538 <prvProcessReceivedCommands+0x1c8>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	1d39      	adds	r1, r7, #4
 800b51c:	2200      	movs	r2, #0
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fe fb4c 	bl	8009bbc <xQueueReceive>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	f47f af26 	bne.w	800b378 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b52c:	bf00      	nop
 800b52e:	bf00      	nop
 800b530:	3730      	adds	r7, #48	@ 0x30
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	20000ee0 	.word	0x20000ee0

0800b53c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b088      	sub	sp, #32
 800b540:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b542:	e049      	b.n	800b5d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b544:	4b2e      	ldr	r3, [pc, #184]	@ (800b600 <prvSwitchTimerLists+0xc4>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b54e:	4b2c      	ldr	r3, [pc, #176]	@ (800b600 <prvSwitchTimerLists+0xc4>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	3304      	adds	r3, #4
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fe f81d 	bl	800959c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6a1b      	ldr	r3, [r3, #32]
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b570:	f003 0304 	and.w	r3, r3, #4
 800b574:	2b00      	cmp	r3, #0
 800b576:	d02f      	beq.n	800b5d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	4413      	add	r3, r2
 800b580:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	429a      	cmp	r2, r3
 800b588:	d90e      	bls.n	800b5a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b596:	4b1a      	ldr	r3, [pc, #104]	@ (800b600 <prvSwitchTimerLists+0xc4>)
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	3304      	adds	r3, #4
 800b59e:	4619      	mov	r1, r3
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	f7fd ffc2 	bl	800952a <vListInsert>
 800b5a6:	e017      	b.n	800b5d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f7ff fd58 	bl	800b068 <xTimerGenericCommand>
 800b5b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10b      	bne.n	800b5d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	603b      	str	r3, [r7, #0]
}
 800b5d2:	bf00      	nop
 800b5d4:	bf00      	nop
 800b5d6:	e7fd      	b.n	800b5d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b5d8:	4b09      	ldr	r3, [pc, #36]	@ (800b600 <prvSwitchTimerLists+0xc4>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1b0      	bne.n	800b544 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b5e2:	4b07      	ldr	r3, [pc, #28]	@ (800b600 <prvSwitchTimerLists+0xc4>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b5e8:	4b06      	ldr	r3, [pc, #24]	@ (800b604 <prvSwitchTimerLists+0xc8>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a04      	ldr	r2, [pc, #16]	@ (800b600 <prvSwitchTimerLists+0xc4>)
 800b5ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b5f0:	4a04      	ldr	r2, [pc, #16]	@ (800b604 <prvSwitchTimerLists+0xc8>)
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	6013      	str	r3, [r2, #0]
}
 800b5f6:	bf00      	nop
 800b5f8:	3718      	adds	r7, #24
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	20000ed8 	.word	0x20000ed8
 800b604:	20000edc 	.word	0x20000edc

0800b608 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b60e:	f000 f96b 	bl	800b8e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b612:	4b15      	ldr	r3, [pc, #84]	@ (800b668 <prvCheckForValidListAndQueue+0x60>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d120      	bne.n	800b65c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b61a:	4814      	ldr	r0, [pc, #80]	@ (800b66c <prvCheckForValidListAndQueue+0x64>)
 800b61c:	f7fd ff34 	bl	8009488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b620:	4813      	ldr	r0, [pc, #76]	@ (800b670 <prvCheckForValidListAndQueue+0x68>)
 800b622:	f7fd ff31 	bl	8009488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b626:	4b13      	ldr	r3, [pc, #76]	@ (800b674 <prvCheckForValidListAndQueue+0x6c>)
 800b628:	4a10      	ldr	r2, [pc, #64]	@ (800b66c <prvCheckForValidListAndQueue+0x64>)
 800b62a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b62c:	4b12      	ldr	r3, [pc, #72]	@ (800b678 <prvCheckForValidListAndQueue+0x70>)
 800b62e:	4a10      	ldr	r2, [pc, #64]	@ (800b670 <prvCheckForValidListAndQueue+0x68>)
 800b630:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b632:	2300      	movs	r3, #0
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	4b11      	ldr	r3, [pc, #68]	@ (800b67c <prvCheckForValidListAndQueue+0x74>)
 800b638:	4a11      	ldr	r2, [pc, #68]	@ (800b680 <prvCheckForValidListAndQueue+0x78>)
 800b63a:	2110      	movs	r1, #16
 800b63c:	200a      	movs	r0, #10
 800b63e:	f7fe f841 	bl	80096c4 <xQueueGenericCreateStatic>
 800b642:	4603      	mov	r3, r0
 800b644:	4a08      	ldr	r2, [pc, #32]	@ (800b668 <prvCheckForValidListAndQueue+0x60>)
 800b646:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b648:	4b07      	ldr	r3, [pc, #28]	@ (800b668 <prvCheckForValidListAndQueue+0x60>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d005      	beq.n	800b65c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b650:	4b05      	ldr	r3, [pc, #20]	@ (800b668 <prvCheckForValidListAndQueue+0x60>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	490b      	ldr	r1, [pc, #44]	@ (800b684 <prvCheckForValidListAndQueue+0x7c>)
 800b656:	4618      	mov	r0, r3
 800b658:	f7fe fd24 	bl	800a0a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b65c:	f000 f976 	bl	800b94c <vPortExitCritical>
}
 800b660:	bf00      	nop
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	20000ee0 	.word	0x20000ee0
 800b66c:	20000eb0 	.word	0x20000eb0
 800b670:	20000ec4 	.word	0x20000ec4
 800b674:	20000ed8 	.word	0x20000ed8
 800b678:	20000edc 	.word	0x20000edc
 800b67c:	20000f8c 	.word	0x20000f8c
 800b680:	20000eec 	.word	0x20000eec
 800b684:	0800d94c 	.word	0x0800d94c

0800b688 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b688:	b480      	push	{r7}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	3b04      	subs	r3, #4
 800b698:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b6a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3b04      	subs	r3, #4
 800b6a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	f023 0201 	bic.w	r2, r3, #1
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	3b04      	subs	r3, #4
 800b6b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b6b8:	4a0c      	ldr	r2, [pc, #48]	@ (800b6ec <pxPortInitialiseStack+0x64>)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3b14      	subs	r3, #20
 800b6c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	3b04      	subs	r3, #4
 800b6ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f06f 0202 	mvn.w	r2, #2
 800b6d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	3b20      	subs	r3, #32
 800b6dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b6de:	68fb      	ldr	r3, [r7, #12]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3714      	adds	r7, #20
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr
 800b6ec:	0800b6f1 	.word	0x0800b6f1

0800b6f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b6fa:	4b13      	ldr	r3, [pc, #76]	@ (800b748 <prvTaskExitError+0x58>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b702:	d00b      	beq.n	800b71c <prvTaskExitError+0x2c>
	__asm volatile
 800b704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b708:	f383 8811 	msr	BASEPRI, r3
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	60fb      	str	r3, [r7, #12]
}
 800b716:	bf00      	nop
 800b718:	bf00      	nop
 800b71a:	e7fd      	b.n	800b718 <prvTaskExitError+0x28>
	__asm volatile
 800b71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b720:	f383 8811 	msr	BASEPRI, r3
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	f3bf 8f4f 	dsb	sy
 800b72c:	60bb      	str	r3, [r7, #8]
}
 800b72e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b730:	bf00      	nop
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d0fc      	beq.n	800b732 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b738:	bf00      	nop
 800b73a:	bf00      	nop
 800b73c:	3714      	adds	r7, #20
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	2000002c 	.word	0x2000002c
 800b74c:	00000000 	.word	0x00000000

0800b750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b750:	4b07      	ldr	r3, [pc, #28]	@ (800b770 <pxCurrentTCBConst2>)
 800b752:	6819      	ldr	r1, [r3, #0]
 800b754:	6808      	ldr	r0, [r1, #0]
 800b756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75a:	f380 8809 	msr	PSP, r0
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	f04f 0000 	mov.w	r0, #0
 800b766:	f380 8811 	msr	BASEPRI, r0
 800b76a:	4770      	bx	lr
 800b76c:	f3af 8000 	nop.w

0800b770 <pxCurrentTCBConst2>:
 800b770:	200009b0 	.word	0x200009b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b774:	bf00      	nop
 800b776:	bf00      	nop

0800b778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b778:	4808      	ldr	r0, [pc, #32]	@ (800b79c <prvPortStartFirstTask+0x24>)
 800b77a:	6800      	ldr	r0, [r0, #0]
 800b77c:	6800      	ldr	r0, [r0, #0]
 800b77e:	f380 8808 	msr	MSP, r0
 800b782:	f04f 0000 	mov.w	r0, #0
 800b786:	f380 8814 	msr	CONTROL, r0
 800b78a:	b662      	cpsie	i
 800b78c:	b661      	cpsie	f
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	df00      	svc	0
 800b798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b79a:	bf00      	nop
 800b79c:	e000ed08 	.word	0xe000ed08

0800b7a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b7a6:	4b47      	ldr	r3, [pc, #284]	@ (800b8c4 <xPortStartScheduler+0x124>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a47      	ldr	r2, [pc, #284]	@ (800b8c8 <xPortStartScheduler+0x128>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d10b      	bne.n	800b7c8 <xPortStartScheduler+0x28>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	613b      	str	r3, [r7, #16]
}
 800b7c2:	bf00      	nop
 800b7c4:	bf00      	nop
 800b7c6:	e7fd      	b.n	800b7c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b7c8:	4b3e      	ldr	r3, [pc, #248]	@ (800b8c4 <xPortStartScheduler+0x124>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a3f      	ldr	r2, [pc, #252]	@ (800b8cc <xPortStartScheduler+0x12c>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d10b      	bne.n	800b7ea <xPortStartScheduler+0x4a>
	__asm volatile
 800b7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d6:	f383 8811 	msr	BASEPRI, r3
 800b7da:	f3bf 8f6f 	isb	sy
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	60fb      	str	r3, [r7, #12]
}
 800b7e4:	bf00      	nop
 800b7e6:	bf00      	nop
 800b7e8:	e7fd      	b.n	800b7e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b7ea:	4b39      	ldr	r3, [pc, #228]	@ (800b8d0 <xPortStartScheduler+0x130>)
 800b7ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	22ff      	movs	r2, #255	@ 0xff
 800b7fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	b2db      	uxtb	r3, r3
 800b802:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b804:	78fb      	ldrb	r3, [r7, #3]
 800b806:	b2db      	uxtb	r3, r3
 800b808:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	4b31      	ldr	r3, [pc, #196]	@ (800b8d4 <xPortStartScheduler+0x134>)
 800b810:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b812:	4b31      	ldr	r3, [pc, #196]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b814:	2207      	movs	r2, #7
 800b816:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b818:	e009      	b.n	800b82e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b81a:	4b2f      	ldr	r3, [pc, #188]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	3b01      	subs	r3, #1
 800b820:	4a2d      	ldr	r2, [pc, #180]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b822:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b824:	78fb      	ldrb	r3, [r7, #3]
 800b826:	b2db      	uxtb	r3, r3
 800b828:	005b      	lsls	r3, r3, #1
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b82e:	78fb      	ldrb	r3, [r7, #3]
 800b830:	b2db      	uxtb	r3, r3
 800b832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b836:	2b80      	cmp	r3, #128	@ 0x80
 800b838:	d0ef      	beq.n	800b81a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b83a:	4b27      	ldr	r3, [pc, #156]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f1c3 0307 	rsb	r3, r3, #7
 800b842:	2b04      	cmp	r3, #4
 800b844:	d00b      	beq.n	800b85e <xPortStartScheduler+0xbe>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	60bb      	str	r3, [r7, #8]
}
 800b858:	bf00      	nop
 800b85a:	bf00      	nop
 800b85c:	e7fd      	b.n	800b85a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b85e:	4b1e      	ldr	r3, [pc, #120]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	021b      	lsls	r3, r3, #8
 800b864:	4a1c      	ldr	r2, [pc, #112]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b868:	4b1b      	ldr	r3, [pc, #108]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b870:	4a19      	ldr	r2, [pc, #100]	@ (800b8d8 <xPortStartScheduler+0x138>)
 800b872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	b2da      	uxtb	r2, r3
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b87c:	4b17      	ldr	r3, [pc, #92]	@ (800b8dc <xPortStartScheduler+0x13c>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a16      	ldr	r2, [pc, #88]	@ (800b8dc <xPortStartScheduler+0x13c>)
 800b882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b888:	4b14      	ldr	r3, [pc, #80]	@ (800b8dc <xPortStartScheduler+0x13c>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a13      	ldr	r2, [pc, #76]	@ (800b8dc <xPortStartScheduler+0x13c>)
 800b88e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b894:	f000 f8da 	bl	800ba4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b898:	4b11      	ldr	r3, [pc, #68]	@ (800b8e0 <xPortStartScheduler+0x140>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b89e:	f000 f8f9 	bl	800ba94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b8a2:	4b10      	ldr	r3, [pc, #64]	@ (800b8e4 <xPortStartScheduler+0x144>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a0f      	ldr	r2, [pc, #60]	@ (800b8e4 <xPortStartScheduler+0x144>)
 800b8a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b8ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b8ae:	f7ff ff63 	bl	800b778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b8b2:	f7ff f82f 	bl	800a914 <vTaskSwitchContext>
	prvTaskExitError();
 800b8b6:	f7ff ff1b 	bl	800b6f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3718      	adds	r7, #24
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	e000ed00 	.word	0xe000ed00
 800b8c8:	410fc271 	.word	0x410fc271
 800b8cc:	410fc270 	.word	0x410fc270
 800b8d0:	e000e400 	.word	0xe000e400
 800b8d4:	20000fdc 	.word	0x20000fdc
 800b8d8:	20000fe0 	.word	0x20000fe0
 800b8dc:	e000ed20 	.word	0xe000ed20
 800b8e0:	2000002c 	.word	0x2000002c
 800b8e4:	e000ef34 	.word	0xe000ef34

0800b8e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	607b      	str	r3, [r7, #4]
}
 800b900:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b902:	4b10      	ldr	r3, [pc, #64]	@ (800b944 <vPortEnterCritical+0x5c>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	3301      	adds	r3, #1
 800b908:	4a0e      	ldr	r2, [pc, #56]	@ (800b944 <vPortEnterCritical+0x5c>)
 800b90a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b90c:	4b0d      	ldr	r3, [pc, #52]	@ (800b944 <vPortEnterCritical+0x5c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d110      	bne.n	800b936 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b914:	4b0c      	ldr	r3, [pc, #48]	@ (800b948 <vPortEnterCritical+0x60>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00b      	beq.n	800b936 <vPortEnterCritical+0x4e>
	__asm volatile
 800b91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b922:	f383 8811 	msr	BASEPRI, r3
 800b926:	f3bf 8f6f 	isb	sy
 800b92a:	f3bf 8f4f 	dsb	sy
 800b92e:	603b      	str	r3, [r7, #0]
}
 800b930:	bf00      	nop
 800b932:	bf00      	nop
 800b934:	e7fd      	b.n	800b932 <vPortEnterCritical+0x4a>
	}
}
 800b936:	bf00      	nop
 800b938:	370c      	adds	r7, #12
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	2000002c 	.word	0x2000002c
 800b948:	e000ed04 	.word	0xe000ed04

0800b94c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b952:	4b12      	ldr	r3, [pc, #72]	@ (800b99c <vPortExitCritical+0x50>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10b      	bne.n	800b972 <vPortExitCritical+0x26>
	__asm volatile
 800b95a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	607b      	str	r3, [r7, #4]
}
 800b96c:	bf00      	nop
 800b96e:	bf00      	nop
 800b970:	e7fd      	b.n	800b96e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b972:	4b0a      	ldr	r3, [pc, #40]	@ (800b99c <vPortExitCritical+0x50>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	3b01      	subs	r3, #1
 800b978:	4a08      	ldr	r2, [pc, #32]	@ (800b99c <vPortExitCritical+0x50>)
 800b97a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b97c:	4b07      	ldr	r3, [pc, #28]	@ (800b99c <vPortExitCritical+0x50>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d105      	bne.n	800b990 <vPortExitCritical+0x44>
 800b984:	2300      	movs	r3, #0
 800b986:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	f383 8811 	msr	BASEPRI, r3
}
 800b98e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr
 800b99c:	2000002c 	.word	0x2000002c

0800b9a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b9a0:	f3ef 8009 	mrs	r0, PSP
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	4b15      	ldr	r3, [pc, #84]	@ (800ba00 <pxCurrentTCBConst>)
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	f01e 0f10 	tst.w	lr, #16
 800b9b0:	bf08      	it	eq
 800b9b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b9b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ba:	6010      	str	r0, [r2, #0]
 800b9bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b9c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b9c4:	f380 8811 	msr	BASEPRI, r0
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f7fe ffa0 	bl	800a914 <vTaskSwitchContext>
 800b9d4:	f04f 0000 	mov.w	r0, #0
 800b9d8:	f380 8811 	msr	BASEPRI, r0
 800b9dc:	bc09      	pop	{r0, r3}
 800b9de:	6819      	ldr	r1, [r3, #0]
 800b9e0:	6808      	ldr	r0, [r1, #0]
 800b9e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e6:	f01e 0f10 	tst.w	lr, #16
 800b9ea:	bf08      	it	eq
 800b9ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b9f0:	f380 8809 	msr	PSP, r0
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop
 800b9fc:	f3af 8000 	nop.w

0800ba00 <pxCurrentTCBConst>:
 800ba00:	200009b0 	.word	0x200009b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ba04:	bf00      	nop
 800ba06:	bf00      	nop

0800ba08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba12:	f383 8811 	msr	BASEPRI, r3
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	607b      	str	r3, [r7, #4]
}
 800ba20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ba22:	f7fe febd 	bl	800a7a0 <xTaskIncrementTick>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d003      	beq.n	800ba34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba2c:	4b06      	ldr	r3, [pc, #24]	@ (800ba48 <xPortSysTickHandler+0x40>)
 800ba2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba32:	601a      	str	r2, [r3, #0]
 800ba34:	2300      	movs	r3, #0
 800ba36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	f383 8811 	msr	BASEPRI, r3
}
 800ba3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ba40:	bf00      	nop
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	e000ed04 	.word	0xe000ed04

0800ba4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba50:	4b0b      	ldr	r3, [pc, #44]	@ (800ba80 <vPortSetupTimerInterrupt+0x34>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba56:	4b0b      	ldr	r3, [pc, #44]	@ (800ba84 <vPortSetupTimerInterrupt+0x38>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba88 <vPortSetupTimerInterrupt+0x3c>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a0a      	ldr	r2, [pc, #40]	@ (800ba8c <vPortSetupTimerInterrupt+0x40>)
 800ba62:	fba2 2303 	umull	r2, r3, r2, r3
 800ba66:	099b      	lsrs	r3, r3, #6
 800ba68:	4a09      	ldr	r2, [pc, #36]	@ (800ba90 <vPortSetupTimerInterrupt+0x44>)
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba6e:	4b04      	ldr	r3, [pc, #16]	@ (800ba80 <vPortSetupTimerInterrupt+0x34>)
 800ba70:	2207      	movs	r2, #7
 800ba72:	601a      	str	r2, [r3, #0]
}
 800ba74:	bf00      	nop
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	e000e010 	.word	0xe000e010
 800ba84:	e000e018 	.word	0xe000e018
 800ba88:	20000000 	.word	0x20000000
 800ba8c:	10624dd3 	.word	0x10624dd3
 800ba90:	e000e014 	.word	0xe000e014

0800ba94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800baa4 <vPortEnableVFP+0x10>
 800ba98:	6801      	ldr	r1, [r0, #0]
 800ba9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ba9e:	6001      	str	r1, [r0, #0]
 800baa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800baa2:	bf00      	nop
 800baa4:	e000ed88 	.word	0xe000ed88

0800baa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800baae:	f3ef 8305 	mrs	r3, IPSR
 800bab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2b0f      	cmp	r3, #15
 800bab8:	d915      	bls.n	800bae6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800baba:	4a18      	ldr	r2, [pc, #96]	@ (800bb1c <vPortValidateInterruptPriority+0x74>)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	4413      	add	r3, r2
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bac4:	4b16      	ldr	r3, [pc, #88]	@ (800bb20 <vPortValidateInterruptPriority+0x78>)
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	7afa      	ldrb	r2, [r7, #11]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d20b      	bcs.n	800bae6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	607b      	str	r3, [r7, #4]
}
 800bae0:	bf00      	nop
 800bae2:	bf00      	nop
 800bae4:	e7fd      	b.n	800bae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bae6:	4b0f      	ldr	r3, [pc, #60]	@ (800bb24 <vPortValidateInterruptPriority+0x7c>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800baee:	4b0e      	ldr	r3, [pc, #56]	@ (800bb28 <vPortValidateInterruptPriority+0x80>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d90b      	bls.n	800bb0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800baf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bafa:	f383 8811 	msr	BASEPRI, r3
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	603b      	str	r3, [r7, #0]
}
 800bb08:	bf00      	nop
 800bb0a:	bf00      	nop
 800bb0c:	e7fd      	b.n	800bb0a <vPortValidateInterruptPriority+0x62>
	}
 800bb0e:	bf00      	nop
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	e000e3f0 	.word	0xe000e3f0
 800bb20:	20000fdc 	.word	0x20000fdc
 800bb24:	e000ed0c 	.word	0xe000ed0c
 800bb28:	20000fe0 	.word	0x20000fe0

0800bb2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08a      	sub	sp, #40	@ 0x28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bb34:	2300      	movs	r3, #0
 800bb36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bb38:	f7fe fd76 	bl	800a628 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bb3c:	4b5c      	ldr	r3, [pc, #368]	@ (800bcb0 <pvPortMalloc+0x184>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d101      	bne.n	800bb48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb44:	f000 f924 	bl	800bd90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb48:	4b5a      	ldr	r3, [pc, #360]	@ (800bcb4 <pvPortMalloc+0x188>)
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4013      	ands	r3, r2
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f040 8095 	bne.w	800bc80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d01e      	beq.n	800bb9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bb5c:	2208      	movs	r2, #8
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4413      	add	r3, r2
 800bb62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f003 0307 	and.w	r3, r3, #7
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d015      	beq.n	800bb9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f023 0307 	bic.w	r3, r3, #7
 800bb74:	3308      	adds	r3, #8
 800bb76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f003 0307 	and.w	r3, r3, #7
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00b      	beq.n	800bb9a <pvPortMalloc+0x6e>
	__asm volatile
 800bb82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	617b      	str	r3, [r7, #20]
}
 800bb94:	bf00      	nop
 800bb96:	bf00      	nop
 800bb98:	e7fd      	b.n	800bb96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d06f      	beq.n	800bc80 <pvPortMalloc+0x154>
 800bba0:	4b45      	ldr	r3, [pc, #276]	@ (800bcb8 <pvPortMalloc+0x18c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d86a      	bhi.n	800bc80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bbaa:	4b44      	ldr	r3, [pc, #272]	@ (800bcbc <pvPortMalloc+0x190>)
 800bbac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bbae:	4b43      	ldr	r3, [pc, #268]	@ (800bcbc <pvPortMalloc+0x190>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bbb4:	e004      	b.n	800bbc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d903      	bls.n	800bbd2 <pvPortMalloc+0xa6>
 800bbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1f1      	bne.n	800bbb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bbd2:	4b37      	ldr	r3, [pc, #220]	@ (800bcb0 <pvPortMalloc+0x184>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d051      	beq.n	800bc80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bbdc:	6a3b      	ldr	r3, [r7, #32]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2208      	movs	r2, #8
 800bbe2:	4413      	add	r3, r2
 800bbe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	1ad2      	subs	r2, r2, r3
 800bbf6:	2308      	movs	r3, #8
 800bbf8:	005b      	lsls	r3, r3, #1
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d920      	bls.n	800bc40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bbfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4413      	add	r3, r2
 800bc04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	f003 0307 	and.w	r3, r3, #7
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00b      	beq.n	800bc28 <pvPortMalloc+0xfc>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	613b      	str	r3, [r7, #16]
}
 800bc22:	bf00      	nop
 800bc24:	bf00      	nop
 800bc26:	e7fd      	b.n	800bc24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2a:	685a      	ldr	r2, [r3, #4]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	1ad2      	subs	r2, r2, r3
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bc3a:	69b8      	ldr	r0, [r7, #24]
 800bc3c:	f000 f90a 	bl	800be54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc40:	4b1d      	ldr	r3, [pc, #116]	@ (800bcb8 <pvPortMalloc+0x18c>)
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	4a1b      	ldr	r2, [pc, #108]	@ (800bcb8 <pvPortMalloc+0x18c>)
 800bc4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bc4e:	4b1a      	ldr	r3, [pc, #104]	@ (800bcb8 <pvPortMalloc+0x18c>)
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	4b1b      	ldr	r3, [pc, #108]	@ (800bcc0 <pvPortMalloc+0x194>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d203      	bcs.n	800bc62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bc5a:	4b17      	ldr	r3, [pc, #92]	@ (800bcb8 <pvPortMalloc+0x18c>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a18      	ldr	r2, [pc, #96]	@ (800bcc0 <pvPortMalloc+0x194>)
 800bc60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc64:	685a      	ldr	r2, [r3, #4]
 800bc66:	4b13      	ldr	r3, [pc, #76]	@ (800bcb4 <pvPortMalloc+0x188>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	431a      	orrs	r2, r3
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc72:	2200      	movs	r2, #0
 800bc74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bc76:	4b13      	ldr	r3, [pc, #76]	@ (800bcc4 <pvPortMalloc+0x198>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	4a11      	ldr	r2, [pc, #68]	@ (800bcc4 <pvPortMalloc+0x198>)
 800bc7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc80:	f7fe fce0 	bl	800a644 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	f003 0307 	and.w	r3, r3, #7
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00b      	beq.n	800bca6 <pvPortMalloc+0x17a>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	60fb      	str	r3, [r7, #12]
}
 800bca0:	bf00      	nop
 800bca2:	bf00      	nop
 800bca4:	e7fd      	b.n	800bca2 <pvPortMalloc+0x176>
	return pvReturn;
 800bca6:	69fb      	ldr	r3, [r7, #28]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3728      	adds	r7, #40	@ 0x28
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	20004bec 	.word	0x20004bec
 800bcb4:	20004c00 	.word	0x20004c00
 800bcb8:	20004bf0 	.word	0x20004bf0
 800bcbc:	20004be4 	.word	0x20004be4
 800bcc0:	20004bf4 	.word	0x20004bf4
 800bcc4:	20004bf8 	.word	0x20004bf8

0800bcc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d04f      	beq.n	800bd7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bcda:	2308      	movs	r3, #8
 800bcdc:	425b      	negs	r3, r3
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	4413      	add	r3, r2
 800bce2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	4b25      	ldr	r3, [pc, #148]	@ (800bd84 <vPortFree+0xbc>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4013      	ands	r3, r2
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10b      	bne.n	800bd0e <vPortFree+0x46>
	__asm volatile
 800bcf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcfa:	f383 8811 	msr	BASEPRI, r3
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	f3bf 8f4f 	dsb	sy
 800bd06:	60fb      	str	r3, [r7, #12]
}
 800bd08:	bf00      	nop
 800bd0a:	bf00      	nop
 800bd0c:	e7fd      	b.n	800bd0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00b      	beq.n	800bd2e <vPortFree+0x66>
	__asm volatile
 800bd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd1a:	f383 8811 	msr	BASEPRI, r3
 800bd1e:	f3bf 8f6f 	isb	sy
 800bd22:	f3bf 8f4f 	dsb	sy
 800bd26:	60bb      	str	r3, [r7, #8]
}
 800bd28:	bf00      	nop
 800bd2a:	bf00      	nop
 800bd2c:	e7fd      	b.n	800bd2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	685a      	ldr	r2, [r3, #4]
 800bd32:	4b14      	ldr	r3, [pc, #80]	@ (800bd84 <vPortFree+0xbc>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4013      	ands	r3, r2
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d01e      	beq.n	800bd7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d11a      	bne.n	800bd7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	4b0e      	ldr	r3, [pc, #56]	@ (800bd84 <vPortFree+0xbc>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	43db      	mvns	r3, r3
 800bd4e:	401a      	ands	r2, r3
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd54:	f7fe fc68 	bl	800a628 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	685a      	ldr	r2, [r3, #4]
 800bd5c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd88 <vPortFree+0xc0>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4413      	add	r3, r2
 800bd62:	4a09      	ldr	r2, [pc, #36]	@ (800bd88 <vPortFree+0xc0>)
 800bd64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd66:	6938      	ldr	r0, [r7, #16]
 800bd68:	f000 f874 	bl	800be54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bd6c:	4b07      	ldr	r3, [pc, #28]	@ (800bd8c <vPortFree+0xc4>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	3301      	adds	r3, #1
 800bd72:	4a06      	ldr	r2, [pc, #24]	@ (800bd8c <vPortFree+0xc4>)
 800bd74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bd76:	f7fe fc65 	bl	800a644 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bd7a:	bf00      	nop
 800bd7c:	3718      	adds	r7, #24
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	20004c00 	.word	0x20004c00
 800bd88:	20004bf0 	.word	0x20004bf0
 800bd8c:	20004bfc 	.word	0x20004bfc

0800bd90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bd9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bd9c:	4b27      	ldr	r3, [pc, #156]	@ (800be3c <prvHeapInit+0xac>)
 800bd9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f003 0307 	and.w	r3, r3, #7
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00c      	beq.n	800bdc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	3307      	adds	r3, #7
 800bdae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f023 0307 	bic.w	r3, r3, #7
 800bdb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bdb8:	68ba      	ldr	r2, [r7, #8]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	4a1f      	ldr	r2, [pc, #124]	@ (800be3c <prvHeapInit+0xac>)
 800bdc0:	4413      	add	r3, r2
 800bdc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bdc8:	4a1d      	ldr	r2, [pc, #116]	@ (800be40 <prvHeapInit+0xb0>)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bdce:	4b1c      	ldr	r3, [pc, #112]	@ (800be40 <prvHeapInit+0xb0>)
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	4413      	add	r3, r2
 800bdda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bddc:	2208      	movs	r2, #8
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	1a9b      	subs	r3, r3, r2
 800bde2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f023 0307 	bic.w	r3, r3, #7
 800bdea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	4a15      	ldr	r2, [pc, #84]	@ (800be44 <prvHeapInit+0xb4>)
 800bdf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bdf2:	4b14      	ldr	r3, [pc, #80]	@ (800be44 <prvHeapInit+0xb4>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bdfa:	4b12      	ldr	r3, [pc, #72]	@ (800be44 <prvHeapInit+0xb4>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2200      	movs	r2, #0
 800be00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	1ad2      	subs	r2, r2, r3
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800be10:	4b0c      	ldr	r3, [pc, #48]	@ (800be44 <prvHeapInit+0xb4>)
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	4a0a      	ldr	r2, [pc, #40]	@ (800be48 <prvHeapInit+0xb8>)
 800be1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	4a09      	ldr	r2, [pc, #36]	@ (800be4c <prvHeapInit+0xbc>)
 800be26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be28:	4b09      	ldr	r3, [pc, #36]	@ (800be50 <prvHeapInit+0xc0>)
 800be2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800be2e:	601a      	str	r2, [r3, #0]
}
 800be30:	bf00      	nop
 800be32:	3714      	adds	r7, #20
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr
 800be3c:	20000fe4 	.word	0x20000fe4
 800be40:	20004be4 	.word	0x20004be4
 800be44:	20004bec 	.word	0x20004bec
 800be48:	20004bf4 	.word	0x20004bf4
 800be4c:	20004bf0 	.word	0x20004bf0
 800be50:	20004c00 	.word	0x20004c00

0800be54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be5c:	4b28      	ldr	r3, [pc, #160]	@ (800bf00 <prvInsertBlockIntoFreeList+0xac>)
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	e002      	b.n	800be68 <prvInsertBlockIntoFreeList+0x14>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	60fb      	str	r3, [r7, #12]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d8f7      	bhi.n	800be62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	68ba      	ldr	r2, [r7, #8]
 800be7c:	4413      	add	r3, r2
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	429a      	cmp	r2, r3
 800be82:	d108      	bne.n	800be96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	685a      	ldr	r2, [r3, #4]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	441a      	add	r2, r3
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	441a      	add	r2, r3
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d118      	bne.n	800bedc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	4b15      	ldr	r3, [pc, #84]	@ (800bf04 <prvInsertBlockIntoFreeList+0xb0>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d00d      	beq.n	800bed2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	441a      	add	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	601a      	str	r2, [r3, #0]
 800bed0:	e008      	b.n	800bee4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bed2:	4b0c      	ldr	r3, [pc, #48]	@ (800bf04 <prvInsertBlockIntoFreeList+0xb0>)
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	e003      	b.n	800bee4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d002      	beq.n	800bef2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bef2:	bf00      	nop
 800bef4:	3714      	adds	r7, #20
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	20004be4 	.word	0x20004be4
 800bf04:	20004bec 	.word	0x20004bec

0800bf08 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	490e      	ldr	r1, [pc, #56]	@ (800bf48 <MX_USB_HOST_Init+0x40>)
 800bf10:	480e      	ldr	r0, [pc, #56]	@ (800bf4c <MX_USB_HOST_Init+0x44>)
 800bf12:	f7fb f905 	bl	8007120 <USBH_Init>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bf1c:	f7f4 fdfc 	bl	8000b18 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bf20:	490b      	ldr	r1, [pc, #44]	@ (800bf50 <MX_USB_HOST_Init+0x48>)
 800bf22:	480a      	ldr	r0, [pc, #40]	@ (800bf4c <MX_USB_HOST_Init+0x44>)
 800bf24:	f7fb f9cb 	bl	80072be <USBH_RegisterClass>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bf2e:	f7f4 fdf3 	bl	8000b18 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bf32:	4806      	ldr	r0, [pc, #24]	@ (800bf4c <MX_USB_HOST_Init+0x44>)
 800bf34:	f7fb fa4f 	bl	80073d6 <USBH_Start>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d001      	beq.n	800bf42 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bf3e:	f7f4 fdeb 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bf42:	bf00      	nop
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	0800bf55 	.word	0x0800bf55
 800bf4c:	20004c04 	.word	0x20004c04
 800bf50:	2000000c 	.word	0x2000000c

0800bf54 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bf60:	78fb      	ldrb	r3, [r7, #3]
 800bf62:	3b01      	subs	r3, #1
 800bf64:	2b04      	cmp	r3, #4
 800bf66:	d819      	bhi.n	800bf9c <USBH_UserProcess+0x48>
 800bf68:	a201      	add	r2, pc, #4	@ (adr r2, 800bf70 <USBH_UserProcess+0x1c>)
 800bf6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf6e:	bf00      	nop
 800bf70:	0800bf9d 	.word	0x0800bf9d
 800bf74:	0800bf8d 	.word	0x0800bf8d
 800bf78:	0800bf9d 	.word	0x0800bf9d
 800bf7c:	0800bf95 	.word	0x0800bf95
 800bf80:	0800bf85 	.word	0x0800bf85
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bf84:	4b09      	ldr	r3, [pc, #36]	@ (800bfac <USBH_UserProcess+0x58>)
 800bf86:	2203      	movs	r2, #3
 800bf88:	701a      	strb	r2, [r3, #0]
  break;
 800bf8a:	e008      	b.n	800bf9e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bf8c:	4b07      	ldr	r3, [pc, #28]	@ (800bfac <USBH_UserProcess+0x58>)
 800bf8e:	2202      	movs	r2, #2
 800bf90:	701a      	strb	r2, [r3, #0]
  break;
 800bf92:	e004      	b.n	800bf9e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bf94:	4b05      	ldr	r3, [pc, #20]	@ (800bfac <USBH_UserProcess+0x58>)
 800bf96:	2201      	movs	r2, #1
 800bf98:	701a      	strb	r2, [r3, #0]
  break;
 800bf9a:	e000      	b.n	800bf9e <USBH_UserProcess+0x4a>

  default:
  break;
 800bf9c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bf9e:	bf00      	nop
 800bfa0:	370c      	adds	r7, #12
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	20004fe8 	.word	0x20004fe8

0800bfb0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b08a      	sub	sp, #40	@ 0x28
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfb8:	f107 0314 	add.w	r3, r7, #20
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	601a      	str	r2, [r3, #0]
 800bfc0:	605a      	str	r2, [r3, #4]
 800bfc2:	609a      	str	r2, [r3, #8]
 800bfc4:	60da      	str	r2, [r3, #12]
 800bfc6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bfd0:	d147      	bne.n	800c062 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	613b      	str	r3, [r7, #16]
 800bfd6:	4b25      	ldr	r3, [pc, #148]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800bfd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfda:	4a24      	ldr	r2, [pc, #144]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800bfdc:	f043 0301 	orr.w	r3, r3, #1
 800bfe0:	6313      	str	r3, [r2, #48]	@ 0x30
 800bfe2:	4b22      	ldr	r3, [pc, #136]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800bfe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfe6:	f003 0301 	and.w	r3, r3, #1
 800bfea:	613b      	str	r3, [r7, #16]
 800bfec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bfee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bff4:	2300      	movs	r3, #0
 800bff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bff8:	2300      	movs	r3, #0
 800bffa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bffc:	f107 0314 	add.w	r3, r7, #20
 800c000:	4619      	mov	r1, r3
 800c002:	481b      	ldr	r0, [pc, #108]	@ (800c070 <HAL_HCD_MspInit+0xc0>)
 800c004:	f7f5 f982 	bl	800130c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c008:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c00c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c00e:	2302      	movs	r3, #2
 800c010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c012:	2300      	movs	r3, #0
 800c014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c016:	2300      	movs	r3, #0
 800c018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c01a:	230a      	movs	r3, #10
 800c01c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c01e:	f107 0314 	add.w	r3, r7, #20
 800c022:	4619      	mov	r1, r3
 800c024:	4812      	ldr	r0, [pc, #72]	@ (800c070 <HAL_HCD_MspInit+0xc0>)
 800c026:	f7f5 f971 	bl	800130c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c02a:	4b10      	ldr	r3, [pc, #64]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800c02c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c02e:	4a0f      	ldr	r2, [pc, #60]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800c030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c034:	6353      	str	r3, [r2, #52]	@ 0x34
 800c036:	2300      	movs	r3, #0
 800c038:	60fb      	str	r3, [r7, #12]
 800c03a:	4b0c      	ldr	r3, [pc, #48]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800c03c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c03e:	4a0b      	ldr	r2, [pc, #44]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800c040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c044:	6453      	str	r3, [r2, #68]	@ 0x44
 800c046:	4b09      	ldr	r3, [pc, #36]	@ (800c06c <HAL_HCD_MspInit+0xbc>)
 800c048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c04a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c04e:	60fb      	str	r3, [r7, #12]
 800c050:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c052:	2200      	movs	r2, #0
 800c054:	2105      	movs	r1, #5
 800c056:	2043      	movs	r0, #67	@ 0x43
 800c058:	f7f5 f92e 	bl	80012b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c05c:	2043      	movs	r0, #67	@ 0x43
 800c05e:	f7f5 f947 	bl	80012f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c062:	bf00      	nop
 800c064:	3728      	adds	r7, #40	@ 0x28
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	40023800 	.word	0x40023800
 800c070:	40020000 	.word	0x40020000

0800c074 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c082:	4618      	mov	r0, r3
 800c084:	f7fb fe59 	bl	8007d3a <USBH_LL_IncTimer>
}
 800c088:	bf00      	nop
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fb fe9d 	bl	8007dde <USBH_LL_Connect>
}
 800c0a4:	bf00      	nop
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fb feb2 	bl	8007e24 <USBH_LL_Disconnect>
}
 800c0c0:	bf00      	nop
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	70fb      	strb	r3, [r7, #3]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fb fee9 	bl	8007eb6 <USBH_LL_NotifyURBChange>
#endif
}
 800c0e4:	bf00      	nop
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fb fe47 	bl	8007d8e <USBH_LL_PortEnabled>
}
 800c100:	bf00      	nop
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c116:	4618      	mov	r0, r3
 800c118:	f7fb fe53 	bl	8007dc2 <USBH_LL_PortDisabled>
}
 800c11c:	bf00      	nop
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c132:	2b01      	cmp	r3, #1
 800c134:	d12a      	bne.n	800c18c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c136:	4a18      	ldr	r2, [pc, #96]	@ (800c198 <USBH_LL_Init+0x74>)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a15      	ldr	r2, [pc, #84]	@ (800c198 <USBH_LL_Init+0x74>)
 800c142:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c146:	4b14      	ldr	r3, [pc, #80]	@ (800c198 <USBH_LL_Init+0x74>)
 800c148:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c14c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c14e:	4b12      	ldr	r3, [pc, #72]	@ (800c198 <USBH_LL_Init+0x74>)
 800c150:	2208      	movs	r2, #8
 800c152:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c154:	4b10      	ldr	r3, [pc, #64]	@ (800c198 <USBH_LL_Init+0x74>)
 800c156:	2201      	movs	r2, #1
 800c158:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c15a:	4b0f      	ldr	r3, [pc, #60]	@ (800c198 <USBH_LL_Init+0x74>)
 800c15c:	2200      	movs	r2, #0
 800c15e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c160:	4b0d      	ldr	r3, [pc, #52]	@ (800c198 <USBH_LL_Init+0x74>)
 800c162:	2202      	movs	r2, #2
 800c164:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c166:	4b0c      	ldr	r3, [pc, #48]	@ (800c198 <USBH_LL_Init+0x74>)
 800c168:	2200      	movs	r2, #0
 800c16a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c16c:	480a      	ldr	r0, [pc, #40]	@ (800c198 <USBH_LL_Init+0x74>)
 800c16e:	f7f5 fa82 	bl	8001676 <HAL_HCD_Init>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d001      	beq.n	800c17c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c178:	f7f4 fcce 	bl	8000b18 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c17c:	4806      	ldr	r0, [pc, #24]	@ (800c198 <USBH_LL_Init+0x74>)
 800c17e:	f7f5 fee3 	bl	8001f48 <HAL_HCD_GetCurrentFrame>
 800c182:	4603      	mov	r3, r0
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7fb fdc8 	bl	8007d1c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	20004fec 	.word	0x20004fec

0800c19c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7f5 fe50 	bl	8001e58 <HAL_HCD_Start>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1bc:	7bfb      	ldrb	r3, [r7, #15]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 f95e 	bl	800c480 <USBH_Get_USB_Status>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b084      	sub	sp, #16
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7f5 fe58 	bl	8001e9e <HAL_HCD_Stop>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 f943 	bl	800c480 <USBH_Get_USB_Status>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c210:	2301      	movs	r3, #1
 800c212:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7f5 fea2 	bl	8001f64 <HAL_HCD_GetCurrentSpeed>
 800c220:	4603      	mov	r3, r0
 800c222:	2b02      	cmp	r3, #2
 800c224:	d00c      	beq.n	800c240 <USBH_LL_GetSpeed+0x38>
 800c226:	2b02      	cmp	r3, #2
 800c228:	d80d      	bhi.n	800c246 <USBH_LL_GetSpeed+0x3e>
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d002      	beq.n	800c234 <USBH_LL_GetSpeed+0x2c>
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d003      	beq.n	800c23a <USBH_LL_GetSpeed+0x32>
 800c232:	e008      	b.n	800c246 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c234:	2300      	movs	r3, #0
 800c236:	73fb      	strb	r3, [r7, #15]
    break;
 800c238:	e008      	b.n	800c24c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c23a:	2301      	movs	r3, #1
 800c23c:	73fb      	strb	r3, [r7, #15]
    break;
 800c23e:	e005      	b.n	800c24c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c240:	2302      	movs	r3, #2
 800c242:	73fb      	strb	r3, [r7, #15]
    break;
 800c244:	e002      	b.n	800c24c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c246:	2301      	movs	r3, #1
 800c248:	73fb      	strb	r3, [r7, #15]
    break;
 800c24a:	bf00      	nop
  }
  return  speed;
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b084      	sub	sp, #16
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c25e:	2300      	movs	r3, #0
 800c260:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7f5 fe33 	bl	8001ed8 <HAL_HCD_ResetPort>
 800c272:	4603      	mov	r3, r0
 800c274:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 f901 	bl	800c480 <USBH_Get_USB_Status>
 800c27e:	4603      	mov	r3, r0
 800c280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c282:	7bbb      	ldrb	r3, [r7, #14]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	460b      	mov	r3, r1
 800c296:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c29e:	78fa      	ldrb	r2, [r7, #3]
 800c2a0:	4611      	mov	r1, r2
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7f5 fe3b 	bl	8001f1e <HAL_HCD_HC_GetXferCount>
 800c2a8:	4603      	mov	r3, r0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c2b2:	b590      	push	{r4, r7, lr}
 800c2b4:	b089      	sub	sp, #36	@ 0x24
 800c2b6:	af04      	add	r7, sp, #16
 800c2b8:	6078      	str	r0, [r7, #4]
 800c2ba:	4608      	mov	r0, r1
 800c2bc:	4611      	mov	r1, r2
 800c2be:	461a      	mov	r2, r3
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	70fb      	strb	r3, [r7, #3]
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	70bb      	strb	r3, [r7, #2]
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c2da:	787c      	ldrb	r4, [r7, #1]
 800c2dc:	78ba      	ldrb	r2, [r7, #2]
 800c2de:	78f9      	ldrb	r1, [r7, #3]
 800c2e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c2e2:	9302      	str	r3, [sp, #8]
 800c2e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c2e8:	9301      	str	r3, [sp, #4]
 800c2ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	4623      	mov	r3, r4
 800c2f2:	f7f5 fa27 	bl	8001744 <HAL_HCD_HC_Init>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 f8bf 	bl	800c480 <USBH_Get_USB_Status>
 800c302:	4603      	mov	r3, r0
 800c304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c306:	7bbb      	ldrb	r3, [r7, #14]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3714      	adds	r7, #20
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd90      	pop	{r4, r7, pc}

0800c310 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	460b      	mov	r3, r1
 800c31a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c32a:	78fa      	ldrb	r2, [r7, #3]
 800c32c:	4611      	mov	r1, r2
 800c32e:	4618      	mov	r0, r3
 800c330:	f7f5 fac0 	bl	80018b4 <HAL_HCD_HC_Halt>
 800c334:	4603      	mov	r3, r0
 800c336:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c338:	7bfb      	ldrb	r3, [r7, #15]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 f8a0 	bl	800c480 <USBH_Get_USB_Status>
 800c340:	4603      	mov	r3, r0
 800c342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c344:	7bbb      	ldrb	r3, [r7, #14]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c34e:	b590      	push	{r4, r7, lr}
 800c350:	b089      	sub	sp, #36	@ 0x24
 800c352:	af04      	add	r7, sp, #16
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	4608      	mov	r0, r1
 800c358:	4611      	mov	r1, r2
 800c35a:	461a      	mov	r2, r3
 800c35c:	4603      	mov	r3, r0
 800c35e:	70fb      	strb	r3, [r7, #3]
 800c360:	460b      	mov	r3, r1
 800c362:	70bb      	strb	r3, [r7, #2]
 800c364:	4613      	mov	r3, r2
 800c366:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c368:	2300      	movs	r3, #0
 800c36a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c376:	787c      	ldrb	r4, [r7, #1]
 800c378:	78ba      	ldrb	r2, [r7, #2]
 800c37a:	78f9      	ldrb	r1, [r7, #3]
 800c37c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c380:	9303      	str	r3, [sp, #12]
 800c382:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c384:	9302      	str	r3, [sp, #8]
 800c386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c388:	9301      	str	r3, [sp, #4]
 800c38a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c38e:	9300      	str	r3, [sp, #0]
 800c390:	4623      	mov	r3, r4
 800c392:	f7f5 fab3 	bl	80018fc <HAL_HCD_HC_SubmitRequest>
 800c396:	4603      	mov	r3, r0
 800c398:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c39a:	7bfb      	ldrb	r3, [r7, #15]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f000 f86f 	bl	800c480 <USBH_Get_USB_Status>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd90      	pop	{r4, r7, pc}

0800c3b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c3c2:	78fa      	ldrb	r2, [r7, #3]
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7f5 fd94 	bl	8001ef4 <HAL_HCD_HC_GetURBState>
 800c3cc:	4603      	mov	r3, r0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3708      	adds	r7, #8
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b082      	sub	sp, #8
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
 800c3de:	460b      	mov	r3, r1
 800c3e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d103      	bne.n	800c3f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c3ec:	78fb      	ldrb	r3, [r7, #3]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 f872 	bl	800c4d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c3f4:	20c8      	movs	r0, #200	@ 0xc8
 800c3f6:	f7f4 fe83 	bl	8001100 <HAL_Delay>
  return USBH_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	460b      	mov	r3, r1
 800c40e:	70fb      	strb	r3, [r7, #3]
 800c410:	4613      	mov	r3, r2
 800c412:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c41a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c41c:	78fa      	ldrb	r2, [r7, #3]
 800c41e:	68f9      	ldr	r1, [r7, #12]
 800c420:	4613      	mov	r3, r2
 800c422:	011b      	lsls	r3, r3, #4
 800c424:	1a9b      	subs	r3, r3, r2
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	440b      	add	r3, r1
 800c42a:	3317      	adds	r3, #23
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00a      	beq.n	800c448 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c432:	78fa      	ldrb	r2, [r7, #3]
 800c434:	68f9      	ldr	r1, [r7, #12]
 800c436:	4613      	mov	r3, r2
 800c438:	011b      	lsls	r3, r3, #4
 800c43a:	1a9b      	subs	r3, r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	440b      	add	r3, r1
 800c440:	333c      	adds	r3, #60	@ 0x3c
 800c442:	78ba      	ldrb	r2, [r7, #2]
 800c444:	701a      	strb	r2, [r3, #0]
 800c446:	e009      	b.n	800c45c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c448:	78fa      	ldrb	r2, [r7, #3]
 800c44a:	68f9      	ldr	r1, [r7, #12]
 800c44c:	4613      	mov	r3, r2
 800c44e:	011b      	lsls	r3, r3, #4
 800c450:	1a9b      	subs	r3, r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	440b      	add	r3, r1
 800c456:	333d      	adds	r3, #61	@ 0x3d
 800c458:	78ba      	ldrb	r2, [r7, #2]
 800c45a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c45c:	2300      	movs	r3, #0
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3714      	adds	r7, #20
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr

0800c46a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b082      	sub	sp, #8
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f7f4 fe44 	bl	8001100 <HAL_Delay>
}
 800c478:	bf00      	nop
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	4603      	mov	r3, r0
 800c488:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c48e:	79fb      	ldrb	r3, [r7, #7]
 800c490:	2b03      	cmp	r3, #3
 800c492:	d817      	bhi.n	800c4c4 <USBH_Get_USB_Status+0x44>
 800c494:	a201      	add	r2, pc, #4	@ (adr r2, 800c49c <USBH_Get_USB_Status+0x1c>)
 800c496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c49a:	bf00      	nop
 800c49c:	0800c4ad 	.word	0x0800c4ad
 800c4a0:	0800c4b3 	.word	0x0800c4b3
 800c4a4:	0800c4b9 	.word	0x0800c4b9
 800c4a8:	0800c4bf 	.word	0x0800c4bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b0:	e00b      	b.n	800c4ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c4b2:	2302      	movs	r3, #2
 800c4b4:	73fb      	strb	r3, [r7, #15]
    break;
 800c4b6:	e008      	b.n	800c4ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c4bc:	e005      	b.n	800c4ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c4be:	2302      	movs	r3, #2
 800c4c0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4c2:	e002      	b.n	800c4ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4c8:	bf00      	nop
  }
  return usb_status;
 800c4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	4603      	mov	r3, r0
 800c4e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c4e2:	79fb      	ldrb	r3, [r7, #7]
 800c4e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c4e6:	79fb      	ldrb	r3, [r7, #7]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d102      	bne.n	800c4f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	73fb      	strb	r3, [r7, #15]
 800c4f0:	e001      	b.n	800c4f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	4803      	ldr	r0, [pc, #12]	@ (800c50c <MX_DriverVbusFS+0x34>)
 800c4fe:	f7f5 f8a1 	bl	8001644 <HAL_GPIO_WritePin>
}
 800c502:	bf00      	nop
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	40020800 	.word	0x40020800

0800c510 <malloc>:
 800c510:	4b02      	ldr	r3, [pc, #8]	@ (800c51c <malloc+0xc>)
 800c512:	4601      	mov	r1, r0
 800c514:	6818      	ldr	r0, [r3, #0]
 800c516:	f000 b82d 	b.w	800c574 <_malloc_r>
 800c51a:	bf00      	nop
 800c51c:	2000003c 	.word	0x2000003c

0800c520 <free>:
 800c520:	4b02      	ldr	r3, [pc, #8]	@ (800c52c <free+0xc>)
 800c522:	4601      	mov	r1, r0
 800c524:	6818      	ldr	r0, [r3, #0]
 800c526:	f000 bbcb 	b.w	800ccc0 <_free_r>
 800c52a:	bf00      	nop
 800c52c:	2000003c 	.word	0x2000003c

0800c530 <sbrk_aligned>:
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	4e0f      	ldr	r6, [pc, #60]	@ (800c570 <sbrk_aligned+0x40>)
 800c534:	460c      	mov	r4, r1
 800c536:	6831      	ldr	r1, [r6, #0]
 800c538:	4605      	mov	r5, r0
 800c53a:	b911      	cbnz	r1, 800c542 <sbrk_aligned+0x12>
 800c53c:	f000 fb62 	bl	800cc04 <_sbrk_r>
 800c540:	6030      	str	r0, [r6, #0]
 800c542:	4621      	mov	r1, r4
 800c544:	4628      	mov	r0, r5
 800c546:	f000 fb5d 	bl	800cc04 <_sbrk_r>
 800c54a:	1c43      	adds	r3, r0, #1
 800c54c:	d103      	bne.n	800c556 <sbrk_aligned+0x26>
 800c54e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c552:	4620      	mov	r0, r4
 800c554:	bd70      	pop	{r4, r5, r6, pc}
 800c556:	1cc4      	adds	r4, r0, #3
 800c558:	f024 0403 	bic.w	r4, r4, #3
 800c55c:	42a0      	cmp	r0, r4
 800c55e:	d0f8      	beq.n	800c552 <sbrk_aligned+0x22>
 800c560:	1a21      	subs	r1, r4, r0
 800c562:	4628      	mov	r0, r5
 800c564:	f000 fb4e 	bl	800cc04 <_sbrk_r>
 800c568:	3001      	adds	r0, #1
 800c56a:	d1f2      	bne.n	800c552 <sbrk_aligned+0x22>
 800c56c:	e7ef      	b.n	800c54e <sbrk_aligned+0x1e>
 800c56e:	bf00      	nop
 800c570:	200053cc 	.word	0x200053cc

0800c574 <_malloc_r>:
 800c574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c578:	1ccd      	adds	r5, r1, #3
 800c57a:	f025 0503 	bic.w	r5, r5, #3
 800c57e:	3508      	adds	r5, #8
 800c580:	2d0c      	cmp	r5, #12
 800c582:	bf38      	it	cc
 800c584:	250c      	movcc	r5, #12
 800c586:	2d00      	cmp	r5, #0
 800c588:	4606      	mov	r6, r0
 800c58a:	db01      	blt.n	800c590 <_malloc_r+0x1c>
 800c58c:	42a9      	cmp	r1, r5
 800c58e:	d904      	bls.n	800c59a <_malloc_r+0x26>
 800c590:	230c      	movs	r3, #12
 800c592:	6033      	str	r3, [r6, #0]
 800c594:	2000      	movs	r0, #0
 800c596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c59a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c670 <_malloc_r+0xfc>
 800c59e:	f000 f869 	bl	800c674 <__malloc_lock>
 800c5a2:	f8d8 3000 	ldr.w	r3, [r8]
 800c5a6:	461c      	mov	r4, r3
 800c5a8:	bb44      	cbnz	r4, 800c5fc <_malloc_r+0x88>
 800c5aa:	4629      	mov	r1, r5
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	f7ff ffbf 	bl	800c530 <sbrk_aligned>
 800c5b2:	1c43      	adds	r3, r0, #1
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	d158      	bne.n	800c66a <_malloc_r+0xf6>
 800c5b8:	f8d8 4000 	ldr.w	r4, [r8]
 800c5bc:	4627      	mov	r7, r4
 800c5be:	2f00      	cmp	r7, #0
 800c5c0:	d143      	bne.n	800c64a <_malloc_r+0xd6>
 800c5c2:	2c00      	cmp	r4, #0
 800c5c4:	d04b      	beq.n	800c65e <_malloc_r+0xea>
 800c5c6:	6823      	ldr	r3, [r4, #0]
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	eb04 0903 	add.w	r9, r4, r3
 800c5d0:	f000 fb18 	bl	800cc04 <_sbrk_r>
 800c5d4:	4581      	cmp	r9, r0
 800c5d6:	d142      	bne.n	800c65e <_malloc_r+0xea>
 800c5d8:	6821      	ldr	r1, [r4, #0]
 800c5da:	1a6d      	subs	r5, r5, r1
 800c5dc:	4629      	mov	r1, r5
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f7ff ffa6 	bl	800c530 <sbrk_aligned>
 800c5e4:	3001      	adds	r0, #1
 800c5e6:	d03a      	beq.n	800c65e <_malloc_r+0xea>
 800c5e8:	6823      	ldr	r3, [r4, #0]
 800c5ea:	442b      	add	r3, r5
 800c5ec:	6023      	str	r3, [r4, #0]
 800c5ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	bb62      	cbnz	r2, 800c650 <_malloc_r+0xdc>
 800c5f6:	f8c8 7000 	str.w	r7, [r8]
 800c5fa:	e00f      	b.n	800c61c <_malloc_r+0xa8>
 800c5fc:	6822      	ldr	r2, [r4, #0]
 800c5fe:	1b52      	subs	r2, r2, r5
 800c600:	d420      	bmi.n	800c644 <_malloc_r+0xd0>
 800c602:	2a0b      	cmp	r2, #11
 800c604:	d917      	bls.n	800c636 <_malloc_r+0xc2>
 800c606:	1961      	adds	r1, r4, r5
 800c608:	42a3      	cmp	r3, r4
 800c60a:	6025      	str	r5, [r4, #0]
 800c60c:	bf18      	it	ne
 800c60e:	6059      	strne	r1, [r3, #4]
 800c610:	6863      	ldr	r3, [r4, #4]
 800c612:	bf08      	it	eq
 800c614:	f8c8 1000 	streq.w	r1, [r8]
 800c618:	5162      	str	r2, [r4, r5]
 800c61a:	604b      	str	r3, [r1, #4]
 800c61c:	4630      	mov	r0, r6
 800c61e:	f000 f82f 	bl	800c680 <__malloc_unlock>
 800c622:	f104 000b 	add.w	r0, r4, #11
 800c626:	1d23      	adds	r3, r4, #4
 800c628:	f020 0007 	bic.w	r0, r0, #7
 800c62c:	1ac2      	subs	r2, r0, r3
 800c62e:	bf1c      	itt	ne
 800c630:	1a1b      	subne	r3, r3, r0
 800c632:	50a3      	strne	r3, [r4, r2]
 800c634:	e7af      	b.n	800c596 <_malloc_r+0x22>
 800c636:	6862      	ldr	r2, [r4, #4]
 800c638:	42a3      	cmp	r3, r4
 800c63a:	bf0c      	ite	eq
 800c63c:	f8c8 2000 	streq.w	r2, [r8]
 800c640:	605a      	strne	r2, [r3, #4]
 800c642:	e7eb      	b.n	800c61c <_malloc_r+0xa8>
 800c644:	4623      	mov	r3, r4
 800c646:	6864      	ldr	r4, [r4, #4]
 800c648:	e7ae      	b.n	800c5a8 <_malloc_r+0x34>
 800c64a:	463c      	mov	r4, r7
 800c64c:	687f      	ldr	r7, [r7, #4]
 800c64e:	e7b6      	b.n	800c5be <_malloc_r+0x4a>
 800c650:	461a      	mov	r2, r3
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	42a3      	cmp	r3, r4
 800c656:	d1fb      	bne.n	800c650 <_malloc_r+0xdc>
 800c658:	2300      	movs	r3, #0
 800c65a:	6053      	str	r3, [r2, #4]
 800c65c:	e7de      	b.n	800c61c <_malloc_r+0xa8>
 800c65e:	230c      	movs	r3, #12
 800c660:	6033      	str	r3, [r6, #0]
 800c662:	4630      	mov	r0, r6
 800c664:	f000 f80c 	bl	800c680 <__malloc_unlock>
 800c668:	e794      	b.n	800c594 <_malloc_r+0x20>
 800c66a:	6005      	str	r5, [r0, #0]
 800c66c:	e7d6      	b.n	800c61c <_malloc_r+0xa8>
 800c66e:	bf00      	nop
 800c670:	200053d0 	.word	0x200053d0

0800c674 <__malloc_lock>:
 800c674:	4801      	ldr	r0, [pc, #4]	@ (800c67c <__malloc_lock+0x8>)
 800c676:	f000 bb12 	b.w	800cc9e <__retarget_lock_acquire_recursive>
 800c67a:	bf00      	nop
 800c67c:	20005514 	.word	0x20005514

0800c680 <__malloc_unlock>:
 800c680:	4801      	ldr	r0, [pc, #4]	@ (800c688 <__malloc_unlock+0x8>)
 800c682:	f000 bb0d 	b.w	800cca0 <__retarget_lock_release_recursive>
 800c686:	bf00      	nop
 800c688:	20005514 	.word	0x20005514

0800c68c <std>:
 800c68c:	2300      	movs	r3, #0
 800c68e:	b510      	push	{r4, lr}
 800c690:	4604      	mov	r4, r0
 800c692:	e9c0 3300 	strd	r3, r3, [r0]
 800c696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c69a:	6083      	str	r3, [r0, #8]
 800c69c:	8181      	strh	r1, [r0, #12]
 800c69e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c6a0:	81c2      	strh	r2, [r0, #14]
 800c6a2:	6183      	str	r3, [r0, #24]
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	2208      	movs	r2, #8
 800c6a8:	305c      	adds	r0, #92	@ 0x5c
 800c6aa:	f000 fa19 	bl	800cae0 <memset>
 800c6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e4 <std+0x58>)
 800c6b0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c6e8 <std+0x5c>)
 800c6b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c6ec <std+0x60>)
 800c6b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c6f0 <std+0x64>)
 800c6bc:	6323      	str	r3, [r4, #48]	@ 0x30
 800c6be:	4b0d      	ldr	r3, [pc, #52]	@ (800c6f4 <std+0x68>)
 800c6c0:	6224      	str	r4, [r4, #32]
 800c6c2:	429c      	cmp	r4, r3
 800c6c4:	d006      	beq.n	800c6d4 <std+0x48>
 800c6c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c6ca:	4294      	cmp	r4, r2
 800c6cc:	d002      	beq.n	800c6d4 <std+0x48>
 800c6ce:	33d0      	adds	r3, #208	@ 0xd0
 800c6d0:	429c      	cmp	r4, r3
 800c6d2:	d105      	bne.n	800c6e0 <std+0x54>
 800c6d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6dc:	f000 bade 	b.w	800cc9c <__retarget_lock_init_recursive>
 800c6e0:	bd10      	pop	{r4, pc}
 800c6e2:	bf00      	nop
 800c6e4:	0800c931 	.word	0x0800c931
 800c6e8:	0800c953 	.word	0x0800c953
 800c6ec:	0800c98b 	.word	0x0800c98b
 800c6f0:	0800c9af 	.word	0x0800c9af
 800c6f4:	200053d4 	.word	0x200053d4

0800c6f8 <stdio_exit_handler>:
 800c6f8:	4a02      	ldr	r2, [pc, #8]	@ (800c704 <stdio_exit_handler+0xc>)
 800c6fa:	4903      	ldr	r1, [pc, #12]	@ (800c708 <stdio_exit_handler+0x10>)
 800c6fc:	4803      	ldr	r0, [pc, #12]	@ (800c70c <stdio_exit_handler+0x14>)
 800c6fe:	f000 b869 	b.w	800c7d4 <_fwalk_sglue>
 800c702:	bf00      	nop
 800c704:	20000030 	.word	0x20000030
 800c708:	0800d6ad 	.word	0x0800d6ad
 800c70c:	20000040 	.word	0x20000040

0800c710 <cleanup_stdio>:
 800c710:	6841      	ldr	r1, [r0, #4]
 800c712:	4b0c      	ldr	r3, [pc, #48]	@ (800c744 <cleanup_stdio+0x34>)
 800c714:	4299      	cmp	r1, r3
 800c716:	b510      	push	{r4, lr}
 800c718:	4604      	mov	r4, r0
 800c71a:	d001      	beq.n	800c720 <cleanup_stdio+0x10>
 800c71c:	f000 ffc6 	bl	800d6ac <_fflush_r>
 800c720:	68a1      	ldr	r1, [r4, #8]
 800c722:	4b09      	ldr	r3, [pc, #36]	@ (800c748 <cleanup_stdio+0x38>)
 800c724:	4299      	cmp	r1, r3
 800c726:	d002      	beq.n	800c72e <cleanup_stdio+0x1e>
 800c728:	4620      	mov	r0, r4
 800c72a:	f000 ffbf 	bl	800d6ac <_fflush_r>
 800c72e:	68e1      	ldr	r1, [r4, #12]
 800c730:	4b06      	ldr	r3, [pc, #24]	@ (800c74c <cleanup_stdio+0x3c>)
 800c732:	4299      	cmp	r1, r3
 800c734:	d004      	beq.n	800c740 <cleanup_stdio+0x30>
 800c736:	4620      	mov	r0, r4
 800c738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c73c:	f000 bfb6 	b.w	800d6ac <_fflush_r>
 800c740:	bd10      	pop	{r4, pc}
 800c742:	bf00      	nop
 800c744:	200053d4 	.word	0x200053d4
 800c748:	2000543c 	.word	0x2000543c
 800c74c:	200054a4 	.word	0x200054a4

0800c750 <global_stdio_init.part.0>:
 800c750:	b510      	push	{r4, lr}
 800c752:	4b0b      	ldr	r3, [pc, #44]	@ (800c780 <global_stdio_init.part.0+0x30>)
 800c754:	4c0b      	ldr	r4, [pc, #44]	@ (800c784 <global_stdio_init.part.0+0x34>)
 800c756:	4a0c      	ldr	r2, [pc, #48]	@ (800c788 <global_stdio_init.part.0+0x38>)
 800c758:	601a      	str	r2, [r3, #0]
 800c75a:	4620      	mov	r0, r4
 800c75c:	2200      	movs	r2, #0
 800c75e:	2104      	movs	r1, #4
 800c760:	f7ff ff94 	bl	800c68c <std>
 800c764:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c768:	2201      	movs	r2, #1
 800c76a:	2109      	movs	r1, #9
 800c76c:	f7ff ff8e 	bl	800c68c <std>
 800c770:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c774:	2202      	movs	r2, #2
 800c776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c77a:	2112      	movs	r1, #18
 800c77c:	f7ff bf86 	b.w	800c68c <std>
 800c780:	2000550c 	.word	0x2000550c
 800c784:	200053d4 	.word	0x200053d4
 800c788:	0800c6f9 	.word	0x0800c6f9

0800c78c <__sfp_lock_acquire>:
 800c78c:	4801      	ldr	r0, [pc, #4]	@ (800c794 <__sfp_lock_acquire+0x8>)
 800c78e:	f000 ba86 	b.w	800cc9e <__retarget_lock_acquire_recursive>
 800c792:	bf00      	nop
 800c794:	20005515 	.word	0x20005515

0800c798 <__sfp_lock_release>:
 800c798:	4801      	ldr	r0, [pc, #4]	@ (800c7a0 <__sfp_lock_release+0x8>)
 800c79a:	f000 ba81 	b.w	800cca0 <__retarget_lock_release_recursive>
 800c79e:	bf00      	nop
 800c7a0:	20005515 	.word	0x20005515

0800c7a4 <__sinit>:
 800c7a4:	b510      	push	{r4, lr}
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	f7ff fff0 	bl	800c78c <__sfp_lock_acquire>
 800c7ac:	6a23      	ldr	r3, [r4, #32]
 800c7ae:	b11b      	cbz	r3, 800c7b8 <__sinit+0x14>
 800c7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7b4:	f7ff bff0 	b.w	800c798 <__sfp_lock_release>
 800c7b8:	4b04      	ldr	r3, [pc, #16]	@ (800c7cc <__sinit+0x28>)
 800c7ba:	6223      	str	r3, [r4, #32]
 800c7bc:	4b04      	ldr	r3, [pc, #16]	@ (800c7d0 <__sinit+0x2c>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d1f5      	bne.n	800c7b0 <__sinit+0xc>
 800c7c4:	f7ff ffc4 	bl	800c750 <global_stdio_init.part.0>
 800c7c8:	e7f2      	b.n	800c7b0 <__sinit+0xc>
 800c7ca:	bf00      	nop
 800c7cc:	0800c711 	.word	0x0800c711
 800c7d0:	2000550c 	.word	0x2000550c

0800c7d4 <_fwalk_sglue>:
 800c7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7d8:	4607      	mov	r7, r0
 800c7da:	4688      	mov	r8, r1
 800c7dc:	4614      	mov	r4, r2
 800c7de:	2600      	movs	r6, #0
 800c7e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7e4:	f1b9 0901 	subs.w	r9, r9, #1
 800c7e8:	d505      	bpl.n	800c7f6 <_fwalk_sglue+0x22>
 800c7ea:	6824      	ldr	r4, [r4, #0]
 800c7ec:	2c00      	cmp	r4, #0
 800c7ee:	d1f7      	bne.n	800c7e0 <_fwalk_sglue+0xc>
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7f6:	89ab      	ldrh	r3, [r5, #12]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d907      	bls.n	800c80c <_fwalk_sglue+0x38>
 800c7fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c800:	3301      	adds	r3, #1
 800c802:	d003      	beq.n	800c80c <_fwalk_sglue+0x38>
 800c804:	4629      	mov	r1, r5
 800c806:	4638      	mov	r0, r7
 800c808:	47c0      	blx	r8
 800c80a:	4306      	orrs	r6, r0
 800c80c:	3568      	adds	r5, #104	@ 0x68
 800c80e:	e7e9      	b.n	800c7e4 <_fwalk_sglue+0x10>

0800c810 <iprintf>:
 800c810:	b40f      	push	{r0, r1, r2, r3}
 800c812:	b507      	push	{r0, r1, r2, lr}
 800c814:	4906      	ldr	r1, [pc, #24]	@ (800c830 <iprintf+0x20>)
 800c816:	ab04      	add	r3, sp, #16
 800c818:	6808      	ldr	r0, [r1, #0]
 800c81a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c81e:	6881      	ldr	r1, [r0, #8]
 800c820:	9301      	str	r3, [sp, #4]
 800c822:	f000 fc19 	bl	800d058 <_vfiprintf_r>
 800c826:	b003      	add	sp, #12
 800c828:	f85d eb04 	ldr.w	lr, [sp], #4
 800c82c:	b004      	add	sp, #16
 800c82e:	4770      	bx	lr
 800c830:	2000003c 	.word	0x2000003c

0800c834 <_puts_r>:
 800c834:	6a03      	ldr	r3, [r0, #32]
 800c836:	b570      	push	{r4, r5, r6, lr}
 800c838:	6884      	ldr	r4, [r0, #8]
 800c83a:	4605      	mov	r5, r0
 800c83c:	460e      	mov	r6, r1
 800c83e:	b90b      	cbnz	r3, 800c844 <_puts_r+0x10>
 800c840:	f7ff ffb0 	bl	800c7a4 <__sinit>
 800c844:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c846:	07db      	lsls	r3, r3, #31
 800c848:	d405      	bmi.n	800c856 <_puts_r+0x22>
 800c84a:	89a3      	ldrh	r3, [r4, #12]
 800c84c:	0598      	lsls	r0, r3, #22
 800c84e:	d402      	bmi.n	800c856 <_puts_r+0x22>
 800c850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c852:	f000 fa24 	bl	800cc9e <__retarget_lock_acquire_recursive>
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	0719      	lsls	r1, r3, #28
 800c85a:	d502      	bpl.n	800c862 <_puts_r+0x2e>
 800c85c:	6923      	ldr	r3, [r4, #16]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d135      	bne.n	800c8ce <_puts_r+0x9a>
 800c862:	4621      	mov	r1, r4
 800c864:	4628      	mov	r0, r5
 800c866:	f000 f8e5 	bl	800ca34 <__swsetup_r>
 800c86a:	b380      	cbz	r0, 800c8ce <_puts_r+0x9a>
 800c86c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c870:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c872:	07da      	lsls	r2, r3, #31
 800c874:	d405      	bmi.n	800c882 <_puts_r+0x4e>
 800c876:	89a3      	ldrh	r3, [r4, #12]
 800c878:	059b      	lsls	r3, r3, #22
 800c87a:	d402      	bmi.n	800c882 <_puts_r+0x4e>
 800c87c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c87e:	f000 fa0f 	bl	800cca0 <__retarget_lock_release_recursive>
 800c882:	4628      	mov	r0, r5
 800c884:	bd70      	pop	{r4, r5, r6, pc}
 800c886:	2b00      	cmp	r3, #0
 800c888:	da04      	bge.n	800c894 <_puts_r+0x60>
 800c88a:	69a2      	ldr	r2, [r4, #24]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	dc17      	bgt.n	800c8c0 <_puts_r+0x8c>
 800c890:	290a      	cmp	r1, #10
 800c892:	d015      	beq.n	800c8c0 <_puts_r+0x8c>
 800c894:	6823      	ldr	r3, [r4, #0]
 800c896:	1c5a      	adds	r2, r3, #1
 800c898:	6022      	str	r2, [r4, #0]
 800c89a:	7019      	strb	r1, [r3, #0]
 800c89c:	68a3      	ldr	r3, [r4, #8]
 800c89e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	60a3      	str	r3, [r4, #8]
 800c8a6:	2900      	cmp	r1, #0
 800c8a8:	d1ed      	bne.n	800c886 <_puts_r+0x52>
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	da11      	bge.n	800c8d2 <_puts_r+0x9e>
 800c8ae:	4622      	mov	r2, r4
 800c8b0:	210a      	movs	r1, #10
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	f000 f87f 	bl	800c9b6 <__swbuf_r>
 800c8b8:	3001      	adds	r0, #1
 800c8ba:	d0d7      	beq.n	800c86c <_puts_r+0x38>
 800c8bc:	250a      	movs	r5, #10
 800c8be:	e7d7      	b.n	800c870 <_puts_r+0x3c>
 800c8c0:	4622      	mov	r2, r4
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f000 f877 	bl	800c9b6 <__swbuf_r>
 800c8c8:	3001      	adds	r0, #1
 800c8ca:	d1e7      	bne.n	800c89c <_puts_r+0x68>
 800c8cc:	e7ce      	b.n	800c86c <_puts_r+0x38>
 800c8ce:	3e01      	subs	r6, #1
 800c8d0:	e7e4      	b.n	800c89c <_puts_r+0x68>
 800c8d2:	6823      	ldr	r3, [r4, #0]
 800c8d4:	1c5a      	adds	r2, r3, #1
 800c8d6:	6022      	str	r2, [r4, #0]
 800c8d8:	220a      	movs	r2, #10
 800c8da:	701a      	strb	r2, [r3, #0]
 800c8dc:	e7ee      	b.n	800c8bc <_puts_r+0x88>
	...

0800c8e0 <puts>:
 800c8e0:	4b02      	ldr	r3, [pc, #8]	@ (800c8ec <puts+0xc>)
 800c8e2:	4601      	mov	r1, r0
 800c8e4:	6818      	ldr	r0, [r3, #0]
 800c8e6:	f7ff bfa5 	b.w	800c834 <_puts_r>
 800c8ea:	bf00      	nop
 800c8ec:	2000003c 	.word	0x2000003c

0800c8f0 <siprintf>:
 800c8f0:	b40e      	push	{r1, r2, r3}
 800c8f2:	b500      	push	{lr}
 800c8f4:	b09c      	sub	sp, #112	@ 0x70
 800c8f6:	ab1d      	add	r3, sp, #116	@ 0x74
 800c8f8:	9002      	str	r0, [sp, #8]
 800c8fa:	9006      	str	r0, [sp, #24]
 800c8fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c900:	4809      	ldr	r0, [pc, #36]	@ (800c928 <siprintf+0x38>)
 800c902:	9107      	str	r1, [sp, #28]
 800c904:	9104      	str	r1, [sp, #16]
 800c906:	4909      	ldr	r1, [pc, #36]	@ (800c92c <siprintf+0x3c>)
 800c908:	f853 2b04 	ldr.w	r2, [r3], #4
 800c90c:	9105      	str	r1, [sp, #20]
 800c90e:	6800      	ldr	r0, [r0, #0]
 800c910:	9301      	str	r3, [sp, #4]
 800c912:	a902      	add	r1, sp, #8
 800c914:	f000 fa7a 	bl	800ce0c <_svfiprintf_r>
 800c918:	9b02      	ldr	r3, [sp, #8]
 800c91a:	2200      	movs	r2, #0
 800c91c:	701a      	strb	r2, [r3, #0]
 800c91e:	b01c      	add	sp, #112	@ 0x70
 800c920:	f85d eb04 	ldr.w	lr, [sp], #4
 800c924:	b003      	add	sp, #12
 800c926:	4770      	bx	lr
 800c928:	2000003c 	.word	0x2000003c
 800c92c:	ffff0208 	.word	0xffff0208

0800c930 <__sread>:
 800c930:	b510      	push	{r4, lr}
 800c932:	460c      	mov	r4, r1
 800c934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c938:	f000 f952 	bl	800cbe0 <_read_r>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	bfab      	itete	ge
 800c940:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c942:	89a3      	ldrhlt	r3, [r4, #12]
 800c944:	181b      	addge	r3, r3, r0
 800c946:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c94a:	bfac      	ite	ge
 800c94c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c94e:	81a3      	strhlt	r3, [r4, #12]
 800c950:	bd10      	pop	{r4, pc}

0800c952 <__swrite>:
 800c952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c956:	461f      	mov	r7, r3
 800c958:	898b      	ldrh	r3, [r1, #12]
 800c95a:	05db      	lsls	r3, r3, #23
 800c95c:	4605      	mov	r5, r0
 800c95e:	460c      	mov	r4, r1
 800c960:	4616      	mov	r6, r2
 800c962:	d505      	bpl.n	800c970 <__swrite+0x1e>
 800c964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c968:	2302      	movs	r3, #2
 800c96a:	2200      	movs	r2, #0
 800c96c:	f000 f926 	bl	800cbbc <_lseek_r>
 800c970:	89a3      	ldrh	r3, [r4, #12]
 800c972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c976:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c97a:	81a3      	strh	r3, [r4, #12]
 800c97c:	4632      	mov	r2, r6
 800c97e:	463b      	mov	r3, r7
 800c980:	4628      	mov	r0, r5
 800c982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c986:	f000 b94d 	b.w	800cc24 <_write_r>

0800c98a <__sseek>:
 800c98a:	b510      	push	{r4, lr}
 800c98c:	460c      	mov	r4, r1
 800c98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c992:	f000 f913 	bl	800cbbc <_lseek_r>
 800c996:	1c43      	adds	r3, r0, #1
 800c998:	89a3      	ldrh	r3, [r4, #12]
 800c99a:	bf15      	itete	ne
 800c99c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c99e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c9a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c9a6:	81a3      	strheq	r3, [r4, #12]
 800c9a8:	bf18      	it	ne
 800c9aa:	81a3      	strhne	r3, [r4, #12]
 800c9ac:	bd10      	pop	{r4, pc}

0800c9ae <__sclose>:
 800c9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9b2:	f000 b89d 	b.w	800caf0 <_close_r>

0800c9b6 <__swbuf_r>:
 800c9b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b8:	460e      	mov	r6, r1
 800c9ba:	4614      	mov	r4, r2
 800c9bc:	4605      	mov	r5, r0
 800c9be:	b118      	cbz	r0, 800c9c8 <__swbuf_r+0x12>
 800c9c0:	6a03      	ldr	r3, [r0, #32]
 800c9c2:	b90b      	cbnz	r3, 800c9c8 <__swbuf_r+0x12>
 800c9c4:	f7ff feee 	bl	800c7a4 <__sinit>
 800c9c8:	69a3      	ldr	r3, [r4, #24]
 800c9ca:	60a3      	str	r3, [r4, #8]
 800c9cc:	89a3      	ldrh	r3, [r4, #12]
 800c9ce:	071a      	lsls	r2, r3, #28
 800c9d0:	d501      	bpl.n	800c9d6 <__swbuf_r+0x20>
 800c9d2:	6923      	ldr	r3, [r4, #16]
 800c9d4:	b943      	cbnz	r3, 800c9e8 <__swbuf_r+0x32>
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	4628      	mov	r0, r5
 800c9da:	f000 f82b 	bl	800ca34 <__swsetup_r>
 800c9de:	b118      	cbz	r0, 800c9e8 <__swbuf_r+0x32>
 800c9e0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c9e4:	4638      	mov	r0, r7
 800c9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e8:	6823      	ldr	r3, [r4, #0]
 800c9ea:	6922      	ldr	r2, [r4, #16]
 800c9ec:	1a98      	subs	r0, r3, r2
 800c9ee:	6963      	ldr	r3, [r4, #20]
 800c9f0:	b2f6      	uxtb	r6, r6
 800c9f2:	4283      	cmp	r3, r0
 800c9f4:	4637      	mov	r7, r6
 800c9f6:	dc05      	bgt.n	800ca04 <__swbuf_r+0x4e>
 800c9f8:	4621      	mov	r1, r4
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f000 fe56 	bl	800d6ac <_fflush_r>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d1ed      	bne.n	800c9e0 <__swbuf_r+0x2a>
 800ca04:	68a3      	ldr	r3, [r4, #8]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	60a3      	str	r3, [r4, #8]
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	1c5a      	adds	r2, r3, #1
 800ca0e:	6022      	str	r2, [r4, #0]
 800ca10:	701e      	strb	r6, [r3, #0]
 800ca12:	6962      	ldr	r2, [r4, #20]
 800ca14:	1c43      	adds	r3, r0, #1
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d004      	beq.n	800ca24 <__swbuf_r+0x6e>
 800ca1a:	89a3      	ldrh	r3, [r4, #12]
 800ca1c:	07db      	lsls	r3, r3, #31
 800ca1e:	d5e1      	bpl.n	800c9e4 <__swbuf_r+0x2e>
 800ca20:	2e0a      	cmp	r6, #10
 800ca22:	d1df      	bne.n	800c9e4 <__swbuf_r+0x2e>
 800ca24:	4621      	mov	r1, r4
 800ca26:	4628      	mov	r0, r5
 800ca28:	f000 fe40 	bl	800d6ac <_fflush_r>
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d0d9      	beq.n	800c9e4 <__swbuf_r+0x2e>
 800ca30:	e7d6      	b.n	800c9e0 <__swbuf_r+0x2a>
	...

0800ca34 <__swsetup_r>:
 800ca34:	b538      	push	{r3, r4, r5, lr}
 800ca36:	4b29      	ldr	r3, [pc, #164]	@ (800cadc <__swsetup_r+0xa8>)
 800ca38:	4605      	mov	r5, r0
 800ca3a:	6818      	ldr	r0, [r3, #0]
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	b118      	cbz	r0, 800ca48 <__swsetup_r+0x14>
 800ca40:	6a03      	ldr	r3, [r0, #32]
 800ca42:	b90b      	cbnz	r3, 800ca48 <__swsetup_r+0x14>
 800ca44:	f7ff feae 	bl	800c7a4 <__sinit>
 800ca48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca4c:	0719      	lsls	r1, r3, #28
 800ca4e:	d422      	bmi.n	800ca96 <__swsetup_r+0x62>
 800ca50:	06da      	lsls	r2, r3, #27
 800ca52:	d407      	bmi.n	800ca64 <__swsetup_r+0x30>
 800ca54:	2209      	movs	r2, #9
 800ca56:	602a      	str	r2, [r5, #0]
 800ca58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca5c:	81a3      	strh	r3, [r4, #12]
 800ca5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca62:	e033      	b.n	800cacc <__swsetup_r+0x98>
 800ca64:	0758      	lsls	r0, r3, #29
 800ca66:	d512      	bpl.n	800ca8e <__swsetup_r+0x5a>
 800ca68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca6a:	b141      	cbz	r1, 800ca7e <__swsetup_r+0x4a>
 800ca6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca70:	4299      	cmp	r1, r3
 800ca72:	d002      	beq.n	800ca7a <__swsetup_r+0x46>
 800ca74:	4628      	mov	r0, r5
 800ca76:	f000 f923 	bl	800ccc0 <_free_r>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca7e:	89a3      	ldrh	r3, [r4, #12]
 800ca80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca84:	81a3      	strh	r3, [r4, #12]
 800ca86:	2300      	movs	r3, #0
 800ca88:	6063      	str	r3, [r4, #4]
 800ca8a:	6923      	ldr	r3, [r4, #16]
 800ca8c:	6023      	str	r3, [r4, #0]
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	f043 0308 	orr.w	r3, r3, #8
 800ca94:	81a3      	strh	r3, [r4, #12]
 800ca96:	6923      	ldr	r3, [r4, #16]
 800ca98:	b94b      	cbnz	r3, 800caae <__swsetup_r+0x7a>
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800caa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800caa4:	d003      	beq.n	800caae <__swsetup_r+0x7a>
 800caa6:	4621      	mov	r1, r4
 800caa8:	4628      	mov	r0, r5
 800caaa:	f000 fe4d 	bl	800d748 <__smakebuf_r>
 800caae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cab2:	f013 0201 	ands.w	r2, r3, #1
 800cab6:	d00a      	beq.n	800cace <__swsetup_r+0x9a>
 800cab8:	2200      	movs	r2, #0
 800caba:	60a2      	str	r2, [r4, #8]
 800cabc:	6962      	ldr	r2, [r4, #20]
 800cabe:	4252      	negs	r2, r2
 800cac0:	61a2      	str	r2, [r4, #24]
 800cac2:	6922      	ldr	r2, [r4, #16]
 800cac4:	b942      	cbnz	r2, 800cad8 <__swsetup_r+0xa4>
 800cac6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800caca:	d1c5      	bne.n	800ca58 <__swsetup_r+0x24>
 800cacc:	bd38      	pop	{r3, r4, r5, pc}
 800cace:	0799      	lsls	r1, r3, #30
 800cad0:	bf58      	it	pl
 800cad2:	6962      	ldrpl	r2, [r4, #20]
 800cad4:	60a2      	str	r2, [r4, #8]
 800cad6:	e7f4      	b.n	800cac2 <__swsetup_r+0x8e>
 800cad8:	2000      	movs	r0, #0
 800cada:	e7f7      	b.n	800cacc <__swsetup_r+0x98>
 800cadc:	2000003c 	.word	0x2000003c

0800cae0 <memset>:
 800cae0:	4402      	add	r2, r0
 800cae2:	4603      	mov	r3, r0
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d100      	bne.n	800caea <memset+0xa>
 800cae8:	4770      	bx	lr
 800caea:	f803 1b01 	strb.w	r1, [r3], #1
 800caee:	e7f9      	b.n	800cae4 <memset+0x4>

0800caf0 <_close_r>:
 800caf0:	b538      	push	{r3, r4, r5, lr}
 800caf2:	4d06      	ldr	r5, [pc, #24]	@ (800cb0c <_close_r+0x1c>)
 800caf4:	2300      	movs	r3, #0
 800caf6:	4604      	mov	r4, r0
 800caf8:	4608      	mov	r0, r1
 800cafa:	602b      	str	r3, [r5, #0]
 800cafc:	f7f4 fa17 	bl	8000f2e <_close>
 800cb00:	1c43      	adds	r3, r0, #1
 800cb02:	d102      	bne.n	800cb0a <_close_r+0x1a>
 800cb04:	682b      	ldr	r3, [r5, #0]
 800cb06:	b103      	cbz	r3, 800cb0a <_close_r+0x1a>
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	bd38      	pop	{r3, r4, r5, pc}
 800cb0c:	20005510 	.word	0x20005510

0800cb10 <_reclaim_reent>:
 800cb10:	4b29      	ldr	r3, [pc, #164]	@ (800cbb8 <_reclaim_reent+0xa8>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4283      	cmp	r3, r0
 800cb16:	b570      	push	{r4, r5, r6, lr}
 800cb18:	4604      	mov	r4, r0
 800cb1a:	d04b      	beq.n	800cbb4 <_reclaim_reent+0xa4>
 800cb1c:	69c3      	ldr	r3, [r0, #28]
 800cb1e:	b1ab      	cbz	r3, 800cb4c <_reclaim_reent+0x3c>
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	b16b      	cbz	r3, 800cb40 <_reclaim_reent+0x30>
 800cb24:	2500      	movs	r5, #0
 800cb26:	69e3      	ldr	r3, [r4, #28]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	5959      	ldr	r1, [r3, r5]
 800cb2c:	2900      	cmp	r1, #0
 800cb2e:	d13b      	bne.n	800cba8 <_reclaim_reent+0x98>
 800cb30:	3504      	adds	r5, #4
 800cb32:	2d80      	cmp	r5, #128	@ 0x80
 800cb34:	d1f7      	bne.n	800cb26 <_reclaim_reent+0x16>
 800cb36:	69e3      	ldr	r3, [r4, #28]
 800cb38:	4620      	mov	r0, r4
 800cb3a:	68d9      	ldr	r1, [r3, #12]
 800cb3c:	f000 f8c0 	bl	800ccc0 <_free_r>
 800cb40:	69e3      	ldr	r3, [r4, #28]
 800cb42:	6819      	ldr	r1, [r3, #0]
 800cb44:	b111      	cbz	r1, 800cb4c <_reclaim_reent+0x3c>
 800cb46:	4620      	mov	r0, r4
 800cb48:	f000 f8ba 	bl	800ccc0 <_free_r>
 800cb4c:	6961      	ldr	r1, [r4, #20]
 800cb4e:	b111      	cbz	r1, 800cb56 <_reclaim_reent+0x46>
 800cb50:	4620      	mov	r0, r4
 800cb52:	f000 f8b5 	bl	800ccc0 <_free_r>
 800cb56:	69e1      	ldr	r1, [r4, #28]
 800cb58:	b111      	cbz	r1, 800cb60 <_reclaim_reent+0x50>
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f000 f8b0 	bl	800ccc0 <_free_r>
 800cb60:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cb62:	b111      	cbz	r1, 800cb6a <_reclaim_reent+0x5a>
 800cb64:	4620      	mov	r0, r4
 800cb66:	f000 f8ab 	bl	800ccc0 <_free_r>
 800cb6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb6c:	b111      	cbz	r1, 800cb74 <_reclaim_reent+0x64>
 800cb6e:	4620      	mov	r0, r4
 800cb70:	f000 f8a6 	bl	800ccc0 <_free_r>
 800cb74:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cb76:	b111      	cbz	r1, 800cb7e <_reclaim_reent+0x6e>
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f000 f8a1 	bl	800ccc0 <_free_r>
 800cb7e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cb80:	b111      	cbz	r1, 800cb88 <_reclaim_reent+0x78>
 800cb82:	4620      	mov	r0, r4
 800cb84:	f000 f89c 	bl	800ccc0 <_free_r>
 800cb88:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cb8a:	b111      	cbz	r1, 800cb92 <_reclaim_reent+0x82>
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	f000 f897 	bl	800ccc0 <_free_r>
 800cb92:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cb94:	b111      	cbz	r1, 800cb9c <_reclaim_reent+0x8c>
 800cb96:	4620      	mov	r0, r4
 800cb98:	f000 f892 	bl	800ccc0 <_free_r>
 800cb9c:	6a23      	ldr	r3, [r4, #32]
 800cb9e:	b14b      	cbz	r3, 800cbb4 <_reclaim_reent+0xa4>
 800cba0:	4620      	mov	r0, r4
 800cba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cba6:	4718      	bx	r3
 800cba8:	680e      	ldr	r6, [r1, #0]
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f000 f888 	bl	800ccc0 <_free_r>
 800cbb0:	4631      	mov	r1, r6
 800cbb2:	e7bb      	b.n	800cb2c <_reclaim_reent+0x1c>
 800cbb4:	bd70      	pop	{r4, r5, r6, pc}
 800cbb6:	bf00      	nop
 800cbb8:	2000003c 	.word	0x2000003c

0800cbbc <_lseek_r>:
 800cbbc:	b538      	push	{r3, r4, r5, lr}
 800cbbe:	4d07      	ldr	r5, [pc, #28]	@ (800cbdc <_lseek_r+0x20>)
 800cbc0:	4604      	mov	r4, r0
 800cbc2:	4608      	mov	r0, r1
 800cbc4:	4611      	mov	r1, r2
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	602a      	str	r2, [r5, #0]
 800cbca:	461a      	mov	r2, r3
 800cbcc:	f7f4 f9d6 	bl	8000f7c <_lseek>
 800cbd0:	1c43      	adds	r3, r0, #1
 800cbd2:	d102      	bne.n	800cbda <_lseek_r+0x1e>
 800cbd4:	682b      	ldr	r3, [r5, #0]
 800cbd6:	b103      	cbz	r3, 800cbda <_lseek_r+0x1e>
 800cbd8:	6023      	str	r3, [r4, #0]
 800cbda:	bd38      	pop	{r3, r4, r5, pc}
 800cbdc:	20005510 	.word	0x20005510

0800cbe0 <_read_r>:
 800cbe0:	b538      	push	{r3, r4, r5, lr}
 800cbe2:	4d07      	ldr	r5, [pc, #28]	@ (800cc00 <_read_r+0x20>)
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	4608      	mov	r0, r1
 800cbe8:	4611      	mov	r1, r2
 800cbea:	2200      	movs	r2, #0
 800cbec:	602a      	str	r2, [r5, #0]
 800cbee:	461a      	mov	r2, r3
 800cbf0:	f7f4 f980 	bl	8000ef4 <_read>
 800cbf4:	1c43      	adds	r3, r0, #1
 800cbf6:	d102      	bne.n	800cbfe <_read_r+0x1e>
 800cbf8:	682b      	ldr	r3, [r5, #0]
 800cbfa:	b103      	cbz	r3, 800cbfe <_read_r+0x1e>
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}
 800cc00:	20005510 	.word	0x20005510

0800cc04 <_sbrk_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	4d06      	ldr	r5, [pc, #24]	@ (800cc20 <_sbrk_r+0x1c>)
 800cc08:	2300      	movs	r3, #0
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	4608      	mov	r0, r1
 800cc0e:	602b      	str	r3, [r5, #0]
 800cc10:	f7f4 f9c2 	bl	8000f98 <_sbrk>
 800cc14:	1c43      	adds	r3, r0, #1
 800cc16:	d102      	bne.n	800cc1e <_sbrk_r+0x1a>
 800cc18:	682b      	ldr	r3, [r5, #0]
 800cc1a:	b103      	cbz	r3, 800cc1e <_sbrk_r+0x1a>
 800cc1c:	6023      	str	r3, [r4, #0]
 800cc1e:	bd38      	pop	{r3, r4, r5, pc}
 800cc20:	20005510 	.word	0x20005510

0800cc24 <_write_r>:
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	4d07      	ldr	r5, [pc, #28]	@ (800cc44 <_write_r+0x20>)
 800cc28:	4604      	mov	r4, r0
 800cc2a:	4608      	mov	r0, r1
 800cc2c:	4611      	mov	r1, r2
 800cc2e:	2200      	movs	r2, #0
 800cc30:	602a      	str	r2, [r5, #0]
 800cc32:	461a      	mov	r2, r3
 800cc34:	f7f3 fd38 	bl	80006a8 <_write>
 800cc38:	1c43      	adds	r3, r0, #1
 800cc3a:	d102      	bne.n	800cc42 <_write_r+0x1e>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	b103      	cbz	r3, 800cc42 <_write_r+0x1e>
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	bd38      	pop	{r3, r4, r5, pc}
 800cc44:	20005510 	.word	0x20005510

0800cc48 <__errno>:
 800cc48:	4b01      	ldr	r3, [pc, #4]	@ (800cc50 <__errno+0x8>)
 800cc4a:	6818      	ldr	r0, [r3, #0]
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop
 800cc50:	2000003c 	.word	0x2000003c

0800cc54 <__libc_init_array>:
 800cc54:	b570      	push	{r4, r5, r6, lr}
 800cc56:	4d0d      	ldr	r5, [pc, #52]	@ (800cc8c <__libc_init_array+0x38>)
 800cc58:	4c0d      	ldr	r4, [pc, #52]	@ (800cc90 <__libc_init_array+0x3c>)
 800cc5a:	1b64      	subs	r4, r4, r5
 800cc5c:	10a4      	asrs	r4, r4, #2
 800cc5e:	2600      	movs	r6, #0
 800cc60:	42a6      	cmp	r6, r4
 800cc62:	d109      	bne.n	800cc78 <__libc_init_array+0x24>
 800cc64:	4d0b      	ldr	r5, [pc, #44]	@ (800cc94 <__libc_init_array+0x40>)
 800cc66:	4c0c      	ldr	r4, [pc, #48]	@ (800cc98 <__libc_init_array+0x44>)
 800cc68:	f000 fe1c 	bl	800d8a4 <_init>
 800cc6c:	1b64      	subs	r4, r4, r5
 800cc6e:	10a4      	asrs	r4, r4, #2
 800cc70:	2600      	movs	r6, #0
 800cc72:	42a6      	cmp	r6, r4
 800cc74:	d105      	bne.n	800cc82 <__libc_init_array+0x2e>
 800cc76:	bd70      	pop	{r4, r5, r6, pc}
 800cc78:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc7c:	4798      	blx	r3
 800cc7e:	3601      	adds	r6, #1
 800cc80:	e7ee      	b.n	800cc60 <__libc_init_array+0xc>
 800cc82:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc86:	4798      	blx	r3
 800cc88:	3601      	adds	r6, #1
 800cc8a:	e7f2      	b.n	800cc72 <__libc_init_array+0x1e>
 800cc8c:	0800d9cc 	.word	0x0800d9cc
 800cc90:	0800d9cc 	.word	0x0800d9cc
 800cc94:	0800d9cc 	.word	0x0800d9cc
 800cc98:	0800d9d0 	.word	0x0800d9d0

0800cc9c <__retarget_lock_init_recursive>:
 800cc9c:	4770      	bx	lr

0800cc9e <__retarget_lock_acquire_recursive>:
 800cc9e:	4770      	bx	lr

0800cca0 <__retarget_lock_release_recursive>:
 800cca0:	4770      	bx	lr

0800cca2 <memcpy>:
 800cca2:	440a      	add	r2, r1
 800cca4:	4291      	cmp	r1, r2
 800cca6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ccaa:	d100      	bne.n	800ccae <memcpy+0xc>
 800ccac:	4770      	bx	lr
 800ccae:	b510      	push	{r4, lr}
 800ccb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccb8:	4291      	cmp	r1, r2
 800ccba:	d1f9      	bne.n	800ccb0 <memcpy+0xe>
 800ccbc:	bd10      	pop	{r4, pc}
	...

0800ccc0 <_free_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	2900      	cmp	r1, #0
 800ccc6:	d041      	beq.n	800cd4c <_free_r+0x8c>
 800ccc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cccc:	1f0c      	subs	r4, r1, #4
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	bfb8      	it	lt
 800ccd2:	18e4      	addlt	r4, r4, r3
 800ccd4:	f7ff fcce 	bl	800c674 <__malloc_lock>
 800ccd8:	4a1d      	ldr	r2, [pc, #116]	@ (800cd50 <_free_r+0x90>)
 800ccda:	6813      	ldr	r3, [r2, #0]
 800ccdc:	b933      	cbnz	r3, 800ccec <_free_r+0x2c>
 800ccde:	6063      	str	r3, [r4, #4]
 800cce0:	6014      	str	r4, [r2, #0]
 800cce2:	4628      	mov	r0, r5
 800cce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cce8:	f7ff bcca 	b.w	800c680 <__malloc_unlock>
 800ccec:	42a3      	cmp	r3, r4
 800ccee:	d908      	bls.n	800cd02 <_free_r+0x42>
 800ccf0:	6820      	ldr	r0, [r4, #0]
 800ccf2:	1821      	adds	r1, r4, r0
 800ccf4:	428b      	cmp	r3, r1
 800ccf6:	bf01      	itttt	eq
 800ccf8:	6819      	ldreq	r1, [r3, #0]
 800ccfa:	685b      	ldreq	r3, [r3, #4]
 800ccfc:	1809      	addeq	r1, r1, r0
 800ccfe:	6021      	streq	r1, [r4, #0]
 800cd00:	e7ed      	b.n	800ccde <_free_r+0x1e>
 800cd02:	461a      	mov	r2, r3
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	b10b      	cbz	r3, 800cd0c <_free_r+0x4c>
 800cd08:	42a3      	cmp	r3, r4
 800cd0a:	d9fa      	bls.n	800cd02 <_free_r+0x42>
 800cd0c:	6811      	ldr	r1, [r2, #0]
 800cd0e:	1850      	adds	r0, r2, r1
 800cd10:	42a0      	cmp	r0, r4
 800cd12:	d10b      	bne.n	800cd2c <_free_r+0x6c>
 800cd14:	6820      	ldr	r0, [r4, #0]
 800cd16:	4401      	add	r1, r0
 800cd18:	1850      	adds	r0, r2, r1
 800cd1a:	4283      	cmp	r3, r0
 800cd1c:	6011      	str	r1, [r2, #0]
 800cd1e:	d1e0      	bne.n	800cce2 <_free_r+0x22>
 800cd20:	6818      	ldr	r0, [r3, #0]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	6053      	str	r3, [r2, #4]
 800cd26:	4408      	add	r0, r1
 800cd28:	6010      	str	r0, [r2, #0]
 800cd2a:	e7da      	b.n	800cce2 <_free_r+0x22>
 800cd2c:	d902      	bls.n	800cd34 <_free_r+0x74>
 800cd2e:	230c      	movs	r3, #12
 800cd30:	602b      	str	r3, [r5, #0]
 800cd32:	e7d6      	b.n	800cce2 <_free_r+0x22>
 800cd34:	6820      	ldr	r0, [r4, #0]
 800cd36:	1821      	adds	r1, r4, r0
 800cd38:	428b      	cmp	r3, r1
 800cd3a:	bf04      	itt	eq
 800cd3c:	6819      	ldreq	r1, [r3, #0]
 800cd3e:	685b      	ldreq	r3, [r3, #4]
 800cd40:	6063      	str	r3, [r4, #4]
 800cd42:	bf04      	itt	eq
 800cd44:	1809      	addeq	r1, r1, r0
 800cd46:	6021      	streq	r1, [r4, #0]
 800cd48:	6054      	str	r4, [r2, #4]
 800cd4a:	e7ca      	b.n	800cce2 <_free_r+0x22>
 800cd4c:	bd38      	pop	{r3, r4, r5, pc}
 800cd4e:	bf00      	nop
 800cd50:	200053d0 	.word	0x200053d0

0800cd54 <__ssputs_r>:
 800cd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd58:	688e      	ldr	r6, [r1, #8]
 800cd5a:	461f      	mov	r7, r3
 800cd5c:	42be      	cmp	r6, r7
 800cd5e:	680b      	ldr	r3, [r1, #0]
 800cd60:	4682      	mov	sl, r0
 800cd62:	460c      	mov	r4, r1
 800cd64:	4690      	mov	r8, r2
 800cd66:	d82d      	bhi.n	800cdc4 <__ssputs_r+0x70>
 800cd68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cd70:	d026      	beq.n	800cdc0 <__ssputs_r+0x6c>
 800cd72:	6965      	ldr	r5, [r4, #20]
 800cd74:	6909      	ldr	r1, [r1, #16]
 800cd76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd7a:	eba3 0901 	sub.w	r9, r3, r1
 800cd7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd82:	1c7b      	adds	r3, r7, #1
 800cd84:	444b      	add	r3, r9
 800cd86:	106d      	asrs	r5, r5, #1
 800cd88:	429d      	cmp	r5, r3
 800cd8a:	bf38      	it	cc
 800cd8c:	461d      	movcc	r5, r3
 800cd8e:	0553      	lsls	r3, r2, #21
 800cd90:	d527      	bpl.n	800cde2 <__ssputs_r+0x8e>
 800cd92:	4629      	mov	r1, r5
 800cd94:	f7ff fbee 	bl	800c574 <_malloc_r>
 800cd98:	4606      	mov	r6, r0
 800cd9a:	b360      	cbz	r0, 800cdf6 <__ssputs_r+0xa2>
 800cd9c:	6921      	ldr	r1, [r4, #16]
 800cd9e:	464a      	mov	r2, r9
 800cda0:	f7ff ff7f 	bl	800cca2 <memcpy>
 800cda4:	89a3      	ldrh	r3, [r4, #12]
 800cda6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cdaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdae:	81a3      	strh	r3, [r4, #12]
 800cdb0:	6126      	str	r6, [r4, #16]
 800cdb2:	6165      	str	r5, [r4, #20]
 800cdb4:	444e      	add	r6, r9
 800cdb6:	eba5 0509 	sub.w	r5, r5, r9
 800cdba:	6026      	str	r6, [r4, #0]
 800cdbc:	60a5      	str	r5, [r4, #8]
 800cdbe:	463e      	mov	r6, r7
 800cdc0:	42be      	cmp	r6, r7
 800cdc2:	d900      	bls.n	800cdc6 <__ssputs_r+0x72>
 800cdc4:	463e      	mov	r6, r7
 800cdc6:	6820      	ldr	r0, [r4, #0]
 800cdc8:	4632      	mov	r2, r6
 800cdca:	4641      	mov	r1, r8
 800cdcc:	f000 fcf8 	bl	800d7c0 <memmove>
 800cdd0:	68a3      	ldr	r3, [r4, #8]
 800cdd2:	1b9b      	subs	r3, r3, r6
 800cdd4:	60a3      	str	r3, [r4, #8]
 800cdd6:	6823      	ldr	r3, [r4, #0]
 800cdd8:	4433      	add	r3, r6
 800cdda:	6023      	str	r3, [r4, #0]
 800cddc:	2000      	movs	r0, #0
 800cdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde2:	462a      	mov	r2, r5
 800cde4:	f000 fd28 	bl	800d838 <_realloc_r>
 800cde8:	4606      	mov	r6, r0
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d1e0      	bne.n	800cdb0 <__ssputs_r+0x5c>
 800cdee:	6921      	ldr	r1, [r4, #16]
 800cdf0:	4650      	mov	r0, sl
 800cdf2:	f7ff ff65 	bl	800ccc0 <_free_r>
 800cdf6:	230c      	movs	r3, #12
 800cdf8:	f8ca 3000 	str.w	r3, [sl]
 800cdfc:	89a3      	ldrh	r3, [r4, #12]
 800cdfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce02:	81a3      	strh	r3, [r4, #12]
 800ce04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce08:	e7e9      	b.n	800cdde <__ssputs_r+0x8a>
	...

0800ce0c <_svfiprintf_r>:
 800ce0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce10:	4698      	mov	r8, r3
 800ce12:	898b      	ldrh	r3, [r1, #12]
 800ce14:	061b      	lsls	r3, r3, #24
 800ce16:	b09d      	sub	sp, #116	@ 0x74
 800ce18:	4607      	mov	r7, r0
 800ce1a:	460d      	mov	r5, r1
 800ce1c:	4614      	mov	r4, r2
 800ce1e:	d510      	bpl.n	800ce42 <_svfiprintf_r+0x36>
 800ce20:	690b      	ldr	r3, [r1, #16]
 800ce22:	b973      	cbnz	r3, 800ce42 <_svfiprintf_r+0x36>
 800ce24:	2140      	movs	r1, #64	@ 0x40
 800ce26:	f7ff fba5 	bl	800c574 <_malloc_r>
 800ce2a:	6028      	str	r0, [r5, #0]
 800ce2c:	6128      	str	r0, [r5, #16]
 800ce2e:	b930      	cbnz	r0, 800ce3e <_svfiprintf_r+0x32>
 800ce30:	230c      	movs	r3, #12
 800ce32:	603b      	str	r3, [r7, #0]
 800ce34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce38:	b01d      	add	sp, #116	@ 0x74
 800ce3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce3e:	2340      	movs	r3, #64	@ 0x40
 800ce40:	616b      	str	r3, [r5, #20]
 800ce42:	2300      	movs	r3, #0
 800ce44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce46:	2320      	movs	r3, #32
 800ce48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce50:	2330      	movs	r3, #48	@ 0x30
 800ce52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cff0 <_svfiprintf_r+0x1e4>
 800ce56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce5a:	f04f 0901 	mov.w	r9, #1
 800ce5e:	4623      	mov	r3, r4
 800ce60:	469a      	mov	sl, r3
 800ce62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce66:	b10a      	cbz	r2, 800ce6c <_svfiprintf_r+0x60>
 800ce68:	2a25      	cmp	r2, #37	@ 0x25
 800ce6a:	d1f9      	bne.n	800ce60 <_svfiprintf_r+0x54>
 800ce6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ce70:	d00b      	beq.n	800ce8a <_svfiprintf_r+0x7e>
 800ce72:	465b      	mov	r3, fp
 800ce74:	4622      	mov	r2, r4
 800ce76:	4629      	mov	r1, r5
 800ce78:	4638      	mov	r0, r7
 800ce7a:	f7ff ff6b 	bl	800cd54 <__ssputs_r>
 800ce7e:	3001      	adds	r0, #1
 800ce80:	f000 80a7 	beq.w	800cfd2 <_svfiprintf_r+0x1c6>
 800ce84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce86:	445a      	add	r2, fp
 800ce88:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f000 809f 	beq.w	800cfd2 <_svfiprintf_r+0x1c6>
 800ce94:	2300      	movs	r3, #0
 800ce96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce9e:	f10a 0a01 	add.w	sl, sl, #1
 800cea2:	9304      	str	r3, [sp, #16]
 800cea4:	9307      	str	r3, [sp, #28]
 800cea6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ceaa:	931a      	str	r3, [sp, #104]	@ 0x68
 800ceac:	4654      	mov	r4, sl
 800ceae:	2205      	movs	r2, #5
 800ceb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceb4:	484e      	ldr	r0, [pc, #312]	@ (800cff0 <_svfiprintf_r+0x1e4>)
 800ceb6:	f7f3 f98b 	bl	80001d0 <memchr>
 800ceba:	9a04      	ldr	r2, [sp, #16]
 800cebc:	b9d8      	cbnz	r0, 800cef6 <_svfiprintf_r+0xea>
 800cebe:	06d0      	lsls	r0, r2, #27
 800cec0:	bf44      	itt	mi
 800cec2:	2320      	movmi	r3, #32
 800cec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cec8:	0711      	lsls	r1, r2, #28
 800ceca:	bf44      	itt	mi
 800cecc:	232b      	movmi	r3, #43	@ 0x2b
 800cece:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ced2:	f89a 3000 	ldrb.w	r3, [sl]
 800ced6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ced8:	d015      	beq.n	800cf06 <_svfiprintf_r+0xfa>
 800ceda:	9a07      	ldr	r2, [sp, #28]
 800cedc:	4654      	mov	r4, sl
 800cede:	2000      	movs	r0, #0
 800cee0:	f04f 0c0a 	mov.w	ip, #10
 800cee4:	4621      	mov	r1, r4
 800cee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceea:	3b30      	subs	r3, #48	@ 0x30
 800ceec:	2b09      	cmp	r3, #9
 800ceee:	d94b      	bls.n	800cf88 <_svfiprintf_r+0x17c>
 800cef0:	b1b0      	cbz	r0, 800cf20 <_svfiprintf_r+0x114>
 800cef2:	9207      	str	r2, [sp, #28]
 800cef4:	e014      	b.n	800cf20 <_svfiprintf_r+0x114>
 800cef6:	eba0 0308 	sub.w	r3, r0, r8
 800cefa:	fa09 f303 	lsl.w	r3, r9, r3
 800cefe:	4313      	orrs	r3, r2
 800cf00:	9304      	str	r3, [sp, #16]
 800cf02:	46a2      	mov	sl, r4
 800cf04:	e7d2      	b.n	800ceac <_svfiprintf_r+0xa0>
 800cf06:	9b03      	ldr	r3, [sp, #12]
 800cf08:	1d19      	adds	r1, r3, #4
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	9103      	str	r1, [sp, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	bfbb      	ittet	lt
 800cf12:	425b      	neglt	r3, r3
 800cf14:	f042 0202 	orrlt.w	r2, r2, #2
 800cf18:	9307      	strge	r3, [sp, #28]
 800cf1a:	9307      	strlt	r3, [sp, #28]
 800cf1c:	bfb8      	it	lt
 800cf1e:	9204      	strlt	r2, [sp, #16]
 800cf20:	7823      	ldrb	r3, [r4, #0]
 800cf22:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf24:	d10a      	bne.n	800cf3c <_svfiprintf_r+0x130>
 800cf26:	7863      	ldrb	r3, [r4, #1]
 800cf28:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf2a:	d132      	bne.n	800cf92 <_svfiprintf_r+0x186>
 800cf2c:	9b03      	ldr	r3, [sp, #12]
 800cf2e:	1d1a      	adds	r2, r3, #4
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	9203      	str	r2, [sp, #12]
 800cf34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf38:	3402      	adds	r4, #2
 800cf3a:	9305      	str	r3, [sp, #20]
 800cf3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d000 <_svfiprintf_r+0x1f4>
 800cf40:	7821      	ldrb	r1, [r4, #0]
 800cf42:	2203      	movs	r2, #3
 800cf44:	4650      	mov	r0, sl
 800cf46:	f7f3 f943 	bl	80001d0 <memchr>
 800cf4a:	b138      	cbz	r0, 800cf5c <_svfiprintf_r+0x150>
 800cf4c:	9b04      	ldr	r3, [sp, #16]
 800cf4e:	eba0 000a 	sub.w	r0, r0, sl
 800cf52:	2240      	movs	r2, #64	@ 0x40
 800cf54:	4082      	lsls	r2, r0
 800cf56:	4313      	orrs	r3, r2
 800cf58:	3401      	adds	r4, #1
 800cf5a:	9304      	str	r3, [sp, #16]
 800cf5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf60:	4824      	ldr	r0, [pc, #144]	@ (800cff4 <_svfiprintf_r+0x1e8>)
 800cf62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf66:	2206      	movs	r2, #6
 800cf68:	f7f3 f932 	bl	80001d0 <memchr>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	d036      	beq.n	800cfde <_svfiprintf_r+0x1d2>
 800cf70:	4b21      	ldr	r3, [pc, #132]	@ (800cff8 <_svfiprintf_r+0x1ec>)
 800cf72:	bb1b      	cbnz	r3, 800cfbc <_svfiprintf_r+0x1b0>
 800cf74:	9b03      	ldr	r3, [sp, #12]
 800cf76:	3307      	adds	r3, #7
 800cf78:	f023 0307 	bic.w	r3, r3, #7
 800cf7c:	3308      	adds	r3, #8
 800cf7e:	9303      	str	r3, [sp, #12]
 800cf80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf82:	4433      	add	r3, r6
 800cf84:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf86:	e76a      	b.n	800ce5e <_svfiprintf_r+0x52>
 800cf88:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf8c:	460c      	mov	r4, r1
 800cf8e:	2001      	movs	r0, #1
 800cf90:	e7a8      	b.n	800cee4 <_svfiprintf_r+0xd8>
 800cf92:	2300      	movs	r3, #0
 800cf94:	3401      	adds	r4, #1
 800cf96:	9305      	str	r3, [sp, #20]
 800cf98:	4619      	mov	r1, r3
 800cf9a:	f04f 0c0a 	mov.w	ip, #10
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfa4:	3a30      	subs	r2, #48	@ 0x30
 800cfa6:	2a09      	cmp	r2, #9
 800cfa8:	d903      	bls.n	800cfb2 <_svfiprintf_r+0x1a6>
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d0c6      	beq.n	800cf3c <_svfiprintf_r+0x130>
 800cfae:	9105      	str	r1, [sp, #20]
 800cfb0:	e7c4      	b.n	800cf3c <_svfiprintf_r+0x130>
 800cfb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfb6:	4604      	mov	r4, r0
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e7f0      	b.n	800cf9e <_svfiprintf_r+0x192>
 800cfbc:	ab03      	add	r3, sp, #12
 800cfbe:	9300      	str	r3, [sp, #0]
 800cfc0:	462a      	mov	r2, r5
 800cfc2:	4b0e      	ldr	r3, [pc, #56]	@ (800cffc <_svfiprintf_r+0x1f0>)
 800cfc4:	a904      	add	r1, sp, #16
 800cfc6:	4638      	mov	r0, r7
 800cfc8:	f3af 8000 	nop.w
 800cfcc:	1c42      	adds	r2, r0, #1
 800cfce:	4606      	mov	r6, r0
 800cfd0:	d1d6      	bne.n	800cf80 <_svfiprintf_r+0x174>
 800cfd2:	89ab      	ldrh	r3, [r5, #12]
 800cfd4:	065b      	lsls	r3, r3, #25
 800cfd6:	f53f af2d 	bmi.w	800ce34 <_svfiprintf_r+0x28>
 800cfda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfdc:	e72c      	b.n	800ce38 <_svfiprintf_r+0x2c>
 800cfde:	ab03      	add	r3, sp, #12
 800cfe0:	9300      	str	r3, [sp, #0]
 800cfe2:	462a      	mov	r2, r5
 800cfe4:	4b05      	ldr	r3, [pc, #20]	@ (800cffc <_svfiprintf_r+0x1f0>)
 800cfe6:	a904      	add	r1, sp, #16
 800cfe8:	4638      	mov	r0, r7
 800cfea:	f000 f9bb 	bl	800d364 <_printf_i>
 800cfee:	e7ed      	b.n	800cfcc <_svfiprintf_r+0x1c0>
 800cff0:	0800d990 	.word	0x0800d990
 800cff4:	0800d99a 	.word	0x0800d99a
 800cff8:	00000000 	.word	0x00000000
 800cffc:	0800cd55 	.word	0x0800cd55
 800d000:	0800d996 	.word	0x0800d996

0800d004 <__sfputc_r>:
 800d004:	6893      	ldr	r3, [r2, #8]
 800d006:	3b01      	subs	r3, #1
 800d008:	2b00      	cmp	r3, #0
 800d00a:	b410      	push	{r4}
 800d00c:	6093      	str	r3, [r2, #8]
 800d00e:	da08      	bge.n	800d022 <__sfputc_r+0x1e>
 800d010:	6994      	ldr	r4, [r2, #24]
 800d012:	42a3      	cmp	r3, r4
 800d014:	db01      	blt.n	800d01a <__sfputc_r+0x16>
 800d016:	290a      	cmp	r1, #10
 800d018:	d103      	bne.n	800d022 <__sfputc_r+0x1e>
 800d01a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d01e:	f7ff bcca 	b.w	800c9b6 <__swbuf_r>
 800d022:	6813      	ldr	r3, [r2, #0]
 800d024:	1c58      	adds	r0, r3, #1
 800d026:	6010      	str	r0, [r2, #0]
 800d028:	7019      	strb	r1, [r3, #0]
 800d02a:	4608      	mov	r0, r1
 800d02c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d030:	4770      	bx	lr

0800d032 <__sfputs_r>:
 800d032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d034:	4606      	mov	r6, r0
 800d036:	460f      	mov	r7, r1
 800d038:	4614      	mov	r4, r2
 800d03a:	18d5      	adds	r5, r2, r3
 800d03c:	42ac      	cmp	r4, r5
 800d03e:	d101      	bne.n	800d044 <__sfputs_r+0x12>
 800d040:	2000      	movs	r0, #0
 800d042:	e007      	b.n	800d054 <__sfputs_r+0x22>
 800d044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d048:	463a      	mov	r2, r7
 800d04a:	4630      	mov	r0, r6
 800d04c:	f7ff ffda 	bl	800d004 <__sfputc_r>
 800d050:	1c43      	adds	r3, r0, #1
 800d052:	d1f3      	bne.n	800d03c <__sfputs_r+0xa>
 800d054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d058 <_vfiprintf_r>:
 800d058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d05c:	460d      	mov	r5, r1
 800d05e:	b09d      	sub	sp, #116	@ 0x74
 800d060:	4614      	mov	r4, r2
 800d062:	4698      	mov	r8, r3
 800d064:	4606      	mov	r6, r0
 800d066:	b118      	cbz	r0, 800d070 <_vfiprintf_r+0x18>
 800d068:	6a03      	ldr	r3, [r0, #32]
 800d06a:	b90b      	cbnz	r3, 800d070 <_vfiprintf_r+0x18>
 800d06c:	f7ff fb9a 	bl	800c7a4 <__sinit>
 800d070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d072:	07d9      	lsls	r1, r3, #31
 800d074:	d405      	bmi.n	800d082 <_vfiprintf_r+0x2a>
 800d076:	89ab      	ldrh	r3, [r5, #12]
 800d078:	059a      	lsls	r2, r3, #22
 800d07a:	d402      	bmi.n	800d082 <_vfiprintf_r+0x2a>
 800d07c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d07e:	f7ff fe0e 	bl	800cc9e <__retarget_lock_acquire_recursive>
 800d082:	89ab      	ldrh	r3, [r5, #12]
 800d084:	071b      	lsls	r3, r3, #28
 800d086:	d501      	bpl.n	800d08c <_vfiprintf_r+0x34>
 800d088:	692b      	ldr	r3, [r5, #16]
 800d08a:	b99b      	cbnz	r3, 800d0b4 <_vfiprintf_r+0x5c>
 800d08c:	4629      	mov	r1, r5
 800d08e:	4630      	mov	r0, r6
 800d090:	f7ff fcd0 	bl	800ca34 <__swsetup_r>
 800d094:	b170      	cbz	r0, 800d0b4 <_vfiprintf_r+0x5c>
 800d096:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d098:	07dc      	lsls	r4, r3, #31
 800d09a:	d504      	bpl.n	800d0a6 <_vfiprintf_r+0x4e>
 800d09c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d0a0:	b01d      	add	sp, #116	@ 0x74
 800d0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a6:	89ab      	ldrh	r3, [r5, #12]
 800d0a8:	0598      	lsls	r0, r3, #22
 800d0aa:	d4f7      	bmi.n	800d09c <_vfiprintf_r+0x44>
 800d0ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0ae:	f7ff fdf7 	bl	800cca0 <__retarget_lock_release_recursive>
 800d0b2:	e7f3      	b.n	800d09c <_vfiprintf_r+0x44>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0b8:	2320      	movs	r3, #32
 800d0ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d0be:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0c2:	2330      	movs	r3, #48	@ 0x30
 800d0c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d274 <_vfiprintf_r+0x21c>
 800d0c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d0cc:	f04f 0901 	mov.w	r9, #1
 800d0d0:	4623      	mov	r3, r4
 800d0d2:	469a      	mov	sl, r3
 800d0d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0d8:	b10a      	cbz	r2, 800d0de <_vfiprintf_r+0x86>
 800d0da:	2a25      	cmp	r2, #37	@ 0x25
 800d0dc:	d1f9      	bne.n	800d0d2 <_vfiprintf_r+0x7a>
 800d0de:	ebba 0b04 	subs.w	fp, sl, r4
 800d0e2:	d00b      	beq.n	800d0fc <_vfiprintf_r+0xa4>
 800d0e4:	465b      	mov	r3, fp
 800d0e6:	4622      	mov	r2, r4
 800d0e8:	4629      	mov	r1, r5
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f7ff ffa1 	bl	800d032 <__sfputs_r>
 800d0f0:	3001      	adds	r0, #1
 800d0f2:	f000 80a7 	beq.w	800d244 <_vfiprintf_r+0x1ec>
 800d0f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0f8:	445a      	add	r2, fp
 800d0fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d100:	2b00      	cmp	r3, #0
 800d102:	f000 809f 	beq.w	800d244 <_vfiprintf_r+0x1ec>
 800d106:	2300      	movs	r3, #0
 800d108:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d10c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d110:	f10a 0a01 	add.w	sl, sl, #1
 800d114:	9304      	str	r3, [sp, #16]
 800d116:	9307      	str	r3, [sp, #28]
 800d118:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d11c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d11e:	4654      	mov	r4, sl
 800d120:	2205      	movs	r2, #5
 800d122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d126:	4853      	ldr	r0, [pc, #332]	@ (800d274 <_vfiprintf_r+0x21c>)
 800d128:	f7f3 f852 	bl	80001d0 <memchr>
 800d12c:	9a04      	ldr	r2, [sp, #16]
 800d12e:	b9d8      	cbnz	r0, 800d168 <_vfiprintf_r+0x110>
 800d130:	06d1      	lsls	r1, r2, #27
 800d132:	bf44      	itt	mi
 800d134:	2320      	movmi	r3, #32
 800d136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d13a:	0713      	lsls	r3, r2, #28
 800d13c:	bf44      	itt	mi
 800d13e:	232b      	movmi	r3, #43	@ 0x2b
 800d140:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d144:	f89a 3000 	ldrb.w	r3, [sl]
 800d148:	2b2a      	cmp	r3, #42	@ 0x2a
 800d14a:	d015      	beq.n	800d178 <_vfiprintf_r+0x120>
 800d14c:	9a07      	ldr	r2, [sp, #28]
 800d14e:	4654      	mov	r4, sl
 800d150:	2000      	movs	r0, #0
 800d152:	f04f 0c0a 	mov.w	ip, #10
 800d156:	4621      	mov	r1, r4
 800d158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d15c:	3b30      	subs	r3, #48	@ 0x30
 800d15e:	2b09      	cmp	r3, #9
 800d160:	d94b      	bls.n	800d1fa <_vfiprintf_r+0x1a2>
 800d162:	b1b0      	cbz	r0, 800d192 <_vfiprintf_r+0x13a>
 800d164:	9207      	str	r2, [sp, #28]
 800d166:	e014      	b.n	800d192 <_vfiprintf_r+0x13a>
 800d168:	eba0 0308 	sub.w	r3, r0, r8
 800d16c:	fa09 f303 	lsl.w	r3, r9, r3
 800d170:	4313      	orrs	r3, r2
 800d172:	9304      	str	r3, [sp, #16]
 800d174:	46a2      	mov	sl, r4
 800d176:	e7d2      	b.n	800d11e <_vfiprintf_r+0xc6>
 800d178:	9b03      	ldr	r3, [sp, #12]
 800d17a:	1d19      	adds	r1, r3, #4
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	9103      	str	r1, [sp, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	bfbb      	ittet	lt
 800d184:	425b      	neglt	r3, r3
 800d186:	f042 0202 	orrlt.w	r2, r2, #2
 800d18a:	9307      	strge	r3, [sp, #28]
 800d18c:	9307      	strlt	r3, [sp, #28]
 800d18e:	bfb8      	it	lt
 800d190:	9204      	strlt	r2, [sp, #16]
 800d192:	7823      	ldrb	r3, [r4, #0]
 800d194:	2b2e      	cmp	r3, #46	@ 0x2e
 800d196:	d10a      	bne.n	800d1ae <_vfiprintf_r+0x156>
 800d198:	7863      	ldrb	r3, [r4, #1]
 800d19a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d19c:	d132      	bne.n	800d204 <_vfiprintf_r+0x1ac>
 800d19e:	9b03      	ldr	r3, [sp, #12]
 800d1a0:	1d1a      	adds	r2, r3, #4
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	9203      	str	r2, [sp, #12]
 800d1a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1aa:	3402      	adds	r4, #2
 800d1ac:	9305      	str	r3, [sp, #20]
 800d1ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d284 <_vfiprintf_r+0x22c>
 800d1b2:	7821      	ldrb	r1, [r4, #0]
 800d1b4:	2203      	movs	r2, #3
 800d1b6:	4650      	mov	r0, sl
 800d1b8:	f7f3 f80a 	bl	80001d0 <memchr>
 800d1bc:	b138      	cbz	r0, 800d1ce <_vfiprintf_r+0x176>
 800d1be:	9b04      	ldr	r3, [sp, #16]
 800d1c0:	eba0 000a 	sub.w	r0, r0, sl
 800d1c4:	2240      	movs	r2, #64	@ 0x40
 800d1c6:	4082      	lsls	r2, r0
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	3401      	adds	r4, #1
 800d1cc:	9304      	str	r3, [sp, #16]
 800d1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1d2:	4829      	ldr	r0, [pc, #164]	@ (800d278 <_vfiprintf_r+0x220>)
 800d1d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d1d8:	2206      	movs	r2, #6
 800d1da:	f7f2 fff9 	bl	80001d0 <memchr>
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	d03f      	beq.n	800d262 <_vfiprintf_r+0x20a>
 800d1e2:	4b26      	ldr	r3, [pc, #152]	@ (800d27c <_vfiprintf_r+0x224>)
 800d1e4:	bb1b      	cbnz	r3, 800d22e <_vfiprintf_r+0x1d6>
 800d1e6:	9b03      	ldr	r3, [sp, #12]
 800d1e8:	3307      	adds	r3, #7
 800d1ea:	f023 0307 	bic.w	r3, r3, #7
 800d1ee:	3308      	adds	r3, #8
 800d1f0:	9303      	str	r3, [sp, #12]
 800d1f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1f4:	443b      	add	r3, r7
 800d1f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1f8:	e76a      	b.n	800d0d0 <_vfiprintf_r+0x78>
 800d1fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1fe:	460c      	mov	r4, r1
 800d200:	2001      	movs	r0, #1
 800d202:	e7a8      	b.n	800d156 <_vfiprintf_r+0xfe>
 800d204:	2300      	movs	r3, #0
 800d206:	3401      	adds	r4, #1
 800d208:	9305      	str	r3, [sp, #20]
 800d20a:	4619      	mov	r1, r3
 800d20c:	f04f 0c0a 	mov.w	ip, #10
 800d210:	4620      	mov	r0, r4
 800d212:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d216:	3a30      	subs	r2, #48	@ 0x30
 800d218:	2a09      	cmp	r2, #9
 800d21a:	d903      	bls.n	800d224 <_vfiprintf_r+0x1cc>
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d0c6      	beq.n	800d1ae <_vfiprintf_r+0x156>
 800d220:	9105      	str	r1, [sp, #20]
 800d222:	e7c4      	b.n	800d1ae <_vfiprintf_r+0x156>
 800d224:	fb0c 2101 	mla	r1, ip, r1, r2
 800d228:	4604      	mov	r4, r0
 800d22a:	2301      	movs	r3, #1
 800d22c:	e7f0      	b.n	800d210 <_vfiprintf_r+0x1b8>
 800d22e:	ab03      	add	r3, sp, #12
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	462a      	mov	r2, r5
 800d234:	4b12      	ldr	r3, [pc, #72]	@ (800d280 <_vfiprintf_r+0x228>)
 800d236:	a904      	add	r1, sp, #16
 800d238:	4630      	mov	r0, r6
 800d23a:	f3af 8000 	nop.w
 800d23e:	4607      	mov	r7, r0
 800d240:	1c78      	adds	r0, r7, #1
 800d242:	d1d6      	bne.n	800d1f2 <_vfiprintf_r+0x19a>
 800d244:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d246:	07d9      	lsls	r1, r3, #31
 800d248:	d405      	bmi.n	800d256 <_vfiprintf_r+0x1fe>
 800d24a:	89ab      	ldrh	r3, [r5, #12]
 800d24c:	059a      	lsls	r2, r3, #22
 800d24e:	d402      	bmi.n	800d256 <_vfiprintf_r+0x1fe>
 800d250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d252:	f7ff fd25 	bl	800cca0 <__retarget_lock_release_recursive>
 800d256:	89ab      	ldrh	r3, [r5, #12]
 800d258:	065b      	lsls	r3, r3, #25
 800d25a:	f53f af1f 	bmi.w	800d09c <_vfiprintf_r+0x44>
 800d25e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d260:	e71e      	b.n	800d0a0 <_vfiprintf_r+0x48>
 800d262:	ab03      	add	r3, sp, #12
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	462a      	mov	r2, r5
 800d268:	4b05      	ldr	r3, [pc, #20]	@ (800d280 <_vfiprintf_r+0x228>)
 800d26a:	a904      	add	r1, sp, #16
 800d26c:	4630      	mov	r0, r6
 800d26e:	f000 f879 	bl	800d364 <_printf_i>
 800d272:	e7e4      	b.n	800d23e <_vfiprintf_r+0x1e6>
 800d274:	0800d990 	.word	0x0800d990
 800d278:	0800d99a 	.word	0x0800d99a
 800d27c:	00000000 	.word	0x00000000
 800d280:	0800d033 	.word	0x0800d033
 800d284:	0800d996 	.word	0x0800d996

0800d288 <_printf_common>:
 800d288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d28c:	4616      	mov	r6, r2
 800d28e:	4698      	mov	r8, r3
 800d290:	688a      	ldr	r2, [r1, #8]
 800d292:	690b      	ldr	r3, [r1, #16]
 800d294:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d298:	4293      	cmp	r3, r2
 800d29a:	bfb8      	it	lt
 800d29c:	4613      	movlt	r3, r2
 800d29e:	6033      	str	r3, [r6, #0]
 800d2a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d2a4:	4607      	mov	r7, r0
 800d2a6:	460c      	mov	r4, r1
 800d2a8:	b10a      	cbz	r2, 800d2ae <_printf_common+0x26>
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	6033      	str	r3, [r6, #0]
 800d2ae:	6823      	ldr	r3, [r4, #0]
 800d2b0:	0699      	lsls	r1, r3, #26
 800d2b2:	bf42      	ittt	mi
 800d2b4:	6833      	ldrmi	r3, [r6, #0]
 800d2b6:	3302      	addmi	r3, #2
 800d2b8:	6033      	strmi	r3, [r6, #0]
 800d2ba:	6825      	ldr	r5, [r4, #0]
 800d2bc:	f015 0506 	ands.w	r5, r5, #6
 800d2c0:	d106      	bne.n	800d2d0 <_printf_common+0x48>
 800d2c2:	f104 0a19 	add.w	sl, r4, #25
 800d2c6:	68e3      	ldr	r3, [r4, #12]
 800d2c8:	6832      	ldr	r2, [r6, #0]
 800d2ca:	1a9b      	subs	r3, r3, r2
 800d2cc:	42ab      	cmp	r3, r5
 800d2ce:	dc26      	bgt.n	800d31e <_printf_common+0x96>
 800d2d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d2d4:	6822      	ldr	r2, [r4, #0]
 800d2d6:	3b00      	subs	r3, #0
 800d2d8:	bf18      	it	ne
 800d2da:	2301      	movne	r3, #1
 800d2dc:	0692      	lsls	r2, r2, #26
 800d2de:	d42b      	bmi.n	800d338 <_printf_common+0xb0>
 800d2e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d2e4:	4641      	mov	r1, r8
 800d2e6:	4638      	mov	r0, r7
 800d2e8:	47c8      	blx	r9
 800d2ea:	3001      	adds	r0, #1
 800d2ec:	d01e      	beq.n	800d32c <_printf_common+0xa4>
 800d2ee:	6823      	ldr	r3, [r4, #0]
 800d2f0:	6922      	ldr	r2, [r4, #16]
 800d2f2:	f003 0306 	and.w	r3, r3, #6
 800d2f6:	2b04      	cmp	r3, #4
 800d2f8:	bf02      	ittt	eq
 800d2fa:	68e5      	ldreq	r5, [r4, #12]
 800d2fc:	6833      	ldreq	r3, [r6, #0]
 800d2fe:	1aed      	subeq	r5, r5, r3
 800d300:	68a3      	ldr	r3, [r4, #8]
 800d302:	bf0c      	ite	eq
 800d304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d308:	2500      	movne	r5, #0
 800d30a:	4293      	cmp	r3, r2
 800d30c:	bfc4      	itt	gt
 800d30e:	1a9b      	subgt	r3, r3, r2
 800d310:	18ed      	addgt	r5, r5, r3
 800d312:	2600      	movs	r6, #0
 800d314:	341a      	adds	r4, #26
 800d316:	42b5      	cmp	r5, r6
 800d318:	d11a      	bne.n	800d350 <_printf_common+0xc8>
 800d31a:	2000      	movs	r0, #0
 800d31c:	e008      	b.n	800d330 <_printf_common+0xa8>
 800d31e:	2301      	movs	r3, #1
 800d320:	4652      	mov	r2, sl
 800d322:	4641      	mov	r1, r8
 800d324:	4638      	mov	r0, r7
 800d326:	47c8      	blx	r9
 800d328:	3001      	adds	r0, #1
 800d32a:	d103      	bne.n	800d334 <_printf_common+0xac>
 800d32c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d334:	3501      	adds	r5, #1
 800d336:	e7c6      	b.n	800d2c6 <_printf_common+0x3e>
 800d338:	18e1      	adds	r1, r4, r3
 800d33a:	1c5a      	adds	r2, r3, #1
 800d33c:	2030      	movs	r0, #48	@ 0x30
 800d33e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d342:	4422      	add	r2, r4
 800d344:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d348:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d34c:	3302      	adds	r3, #2
 800d34e:	e7c7      	b.n	800d2e0 <_printf_common+0x58>
 800d350:	2301      	movs	r3, #1
 800d352:	4622      	mov	r2, r4
 800d354:	4641      	mov	r1, r8
 800d356:	4638      	mov	r0, r7
 800d358:	47c8      	blx	r9
 800d35a:	3001      	adds	r0, #1
 800d35c:	d0e6      	beq.n	800d32c <_printf_common+0xa4>
 800d35e:	3601      	adds	r6, #1
 800d360:	e7d9      	b.n	800d316 <_printf_common+0x8e>
	...

0800d364 <_printf_i>:
 800d364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d368:	7e0f      	ldrb	r7, [r1, #24]
 800d36a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d36c:	2f78      	cmp	r7, #120	@ 0x78
 800d36e:	4691      	mov	r9, r2
 800d370:	4680      	mov	r8, r0
 800d372:	460c      	mov	r4, r1
 800d374:	469a      	mov	sl, r3
 800d376:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d37a:	d807      	bhi.n	800d38c <_printf_i+0x28>
 800d37c:	2f62      	cmp	r7, #98	@ 0x62
 800d37e:	d80a      	bhi.n	800d396 <_printf_i+0x32>
 800d380:	2f00      	cmp	r7, #0
 800d382:	f000 80d2 	beq.w	800d52a <_printf_i+0x1c6>
 800d386:	2f58      	cmp	r7, #88	@ 0x58
 800d388:	f000 80b9 	beq.w	800d4fe <_printf_i+0x19a>
 800d38c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d390:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d394:	e03a      	b.n	800d40c <_printf_i+0xa8>
 800d396:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d39a:	2b15      	cmp	r3, #21
 800d39c:	d8f6      	bhi.n	800d38c <_printf_i+0x28>
 800d39e:	a101      	add	r1, pc, #4	@ (adr r1, 800d3a4 <_printf_i+0x40>)
 800d3a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3a4:	0800d3fd 	.word	0x0800d3fd
 800d3a8:	0800d411 	.word	0x0800d411
 800d3ac:	0800d38d 	.word	0x0800d38d
 800d3b0:	0800d38d 	.word	0x0800d38d
 800d3b4:	0800d38d 	.word	0x0800d38d
 800d3b8:	0800d38d 	.word	0x0800d38d
 800d3bc:	0800d411 	.word	0x0800d411
 800d3c0:	0800d38d 	.word	0x0800d38d
 800d3c4:	0800d38d 	.word	0x0800d38d
 800d3c8:	0800d38d 	.word	0x0800d38d
 800d3cc:	0800d38d 	.word	0x0800d38d
 800d3d0:	0800d511 	.word	0x0800d511
 800d3d4:	0800d43b 	.word	0x0800d43b
 800d3d8:	0800d4cb 	.word	0x0800d4cb
 800d3dc:	0800d38d 	.word	0x0800d38d
 800d3e0:	0800d38d 	.word	0x0800d38d
 800d3e4:	0800d533 	.word	0x0800d533
 800d3e8:	0800d38d 	.word	0x0800d38d
 800d3ec:	0800d43b 	.word	0x0800d43b
 800d3f0:	0800d38d 	.word	0x0800d38d
 800d3f4:	0800d38d 	.word	0x0800d38d
 800d3f8:	0800d4d3 	.word	0x0800d4d3
 800d3fc:	6833      	ldr	r3, [r6, #0]
 800d3fe:	1d1a      	adds	r2, r3, #4
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	6032      	str	r2, [r6, #0]
 800d404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d408:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d40c:	2301      	movs	r3, #1
 800d40e:	e09d      	b.n	800d54c <_printf_i+0x1e8>
 800d410:	6833      	ldr	r3, [r6, #0]
 800d412:	6820      	ldr	r0, [r4, #0]
 800d414:	1d19      	adds	r1, r3, #4
 800d416:	6031      	str	r1, [r6, #0]
 800d418:	0606      	lsls	r6, r0, #24
 800d41a:	d501      	bpl.n	800d420 <_printf_i+0xbc>
 800d41c:	681d      	ldr	r5, [r3, #0]
 800d41e:	e003      	b.n	800d428 <_printf_i+0xc4>
 800d420:	0645      	lsls	r5, r0, #25
 800d422:	d5fb      	bpl.n	800d41c <_printf_i+0xb8>
 800d424:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d428:	2d00      	cmp	r5, #0
 800d42a:	da03      	bge.n	800d434 <_printf_i+0xd0>
 800d42c:	232d      	movs	r3, #45	@ 0x2d
 800d42e:	426d      	negs	r5, r5
 800d430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d434:	4859      	ldr	r0, [pc, #356]	@ (800d59c <_printf_i+0x238>)
 800d436:	230a      	movs	r3, #10
 800d438:	e011      	b.n	800d45e <_printf_i+0xfa>
 800d43a:	6821      	ldr	r1, [r4, #0]
 800d43c:	6833      	ldr	r3, [r6, #0]
 800d43e:	0608      	lsls	r0, r1, #24
 800d440:	f853 5b04 	ldr.w	r5, [r3], #4
 800d444:	d402      	bmi.n	800d44c <_printf_i+0xe8>
 800d446:	0649      	lsls	r1, r1, #25
 800d448:	bf48      	it	mi
 800d44a:	b2ad      	uxthmi	r5, r5
 800d44c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d44e:	4853      	ldr	r0, [pc, #332]	@ (800d59c <_printf_i+0x238>)
 800d450:	6033      	str	r3, [r6, #0]
 800d452:	bf14      	ite	ne
 800d454:	230a      	movne	r3, #10
 800d456:	2308      	moveq	r3, #8
 800d458:	2100      	movs	r1, #0
 800d45a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d45e:	6866      	ldr	r6, [r4, #4]
 800d460:	60a6      	str	r6, [r4, #8]
 800d462:	2e00      	cmp	r6, #0
 800d464:	bfa2      	ittt	ge
 800d466:	6821      	ldrge	r1, [r4, #0]
 800d468:	f021 0104 	bicge.w	r1, r1, #4
 800d46c:	6021      	strge	r1, [r4, #0]
 800d46e:	b90d      	cbnz	r5, 800d474 <_printf_i+0x110>
 800d470:	2e00      	cmp	r6, #0
 800d472:	d04b      	beq.n	800d50c <_printf_i+0x1a8>
 800d474:	4616      	mov	r6, r2
 800d476:	fbb5 f1f3 	udiv	r1, r5, r3
 800d47a:	fb03 5711 	mls	r7, r3, r1, r5
 800d47e:	5dc7      	ldrb	r7, [r0, r7]
 800d480:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d484:	462f      	mov	r7, r5
 800d486:	42bb      	cmp	r3, r7
 800d488:	460d      	mov	r5, r1
 800d48a:	d9f4      	bls.n	800d476 <_printf_i+0x112>
 800d48c:	2b08      	cmp	r3, #8
 800d48e:	d10b      	bne.n	800d4a8 <_printf_i+0x144>
 800d490:	6823      	ldr	r3, [r4, #0]
 800d492:	07df      	lsls	r7, r3, #31
 800d494:	d508      	bpl.n	800d4a8 <_printf_i+0x144>
 800d496:	6923      	ldr	r3, [r4, #16]
 800d498:	6861      	ldr	r1, [r4, #4]
 800d49a:	4299      	cmp	r1, r3
 800d49c:	bfde      	ittt	le
 800d49e:	2330      	movle	r3, #48	@ 0x30
 800d4a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d4a4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d4a8:	1b92      	subs	r2, r2, r6
 800d4aa:	6122      	str	r2, [r4, #16]
 800d4ac:	f8cd a000 	str.w	sl, [sp]
 800d4b0:	464b      	mov	r3, r9
 800d4b2:	aa03      	add	r2, sp, #12
 800d4b4:	4621      	mov	r1, r4
 800d4b6:	4640      	mov	r0, r8
 800d4b8:	f7ff fee6 	bl	800d288 <_printf_common>
 800d4bc:	3001      	adds	r0, #1
 800d4be:	d14a      	bne.n	800d556 <_printf_i+0x1f2>
 800d4c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4c4:	b004      	add	sp, #16
 800d4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ca:	6823      	ldr	r3, [r4, #0]
 800d4cc:	f043 0320 	orr.w	r3, r3, #32
 800d4d0:	6023      	str	r3, [r4, #0]
 800d4d2:	4833      	ldr	r0, [pc, #204]	@ (800d5a0 <_printf_i+0x23c>)
 800d4d4:	2778      	movs	r7, #120	@ 0x78
 800d4d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d4da:	6823      	ldr	r3, [r4, #0]
 800d4dc:	6831      	ldr	r1, [r6, #0]
 800d4de:	061f      	lsls	r7, r3, #24
 800d4e0:	f851 5b04 	ldr.w	r5, [r1], #4
 800d4e4:	d402      	bmi.n	800d4ec <_printf_i+0x188>
 800d4e6:	065f      	lsls	r7, r3, #25
 800d4e8:	bf48      	it	mi
 800d4ea:	b2ad      	uxthmi	r5, r5
 800d4ec:	6031      	str	r1, [r6, #0]
 800d4ee:	07d9      	lsls	r1, r3, #31
 800d4f0:	bf44      	itt	mi
 800d4f2:	f043 0320 	orrmi.w	r3, r3, #32
 800d4f6:	6023      	strmi	r3, [r4, #0]
 800d4f8:	b11d      	cbz	r5, 800d502 <_printf_i+0x19e>
 800d4fa:	2310      	movs	r3, #16
 800d4fc:	e7ac      	b.n	800d458 <_printf_i+0xf4>
 800d4fe:	4827      	ldr	r0, [pc, #156]	@ (800d59c <_printf_i+0x238>)
 800d500:	e7e9      	b.n	800d4d6 <_printf_i+0x172>
 800d502:	6823      	ldr	r3, [r4, #0]
 800d504:	f023 0320 	bic.w	r3, r3, #32
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	e7f6      	b.n	800d4fa <_printf_i+0x196>
 800d50c:	4616      	mov	r6, r2
 800d50e:	e7bd      	b.n	800d48c <_printf_i+0x128>
 800d510:	6833      	ldr	r3, [r6, #0]
 800d512:	6825      	ldr	r5, [r4, #0]
 800d514:	6961      	ldr	r1, [r4, #20]
 800d516:	1d18      	adds	r0, r3, #4
 800d518:	6030      	str	r0, [r6, #0]
 800d51a:	062e      	lsls	r6, r5, #24
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	d501      	bpl.n	800d524 <_printf_i+0x1c0>
 800d520:	6019      	str	r1, [r3, #0]
 800d522:	e002      	b.n	800d52a <_printf_i+0x1c6>
 800d524:	0668      	lsls	r0, r5, #25
 800d526:	d5fb      	bpl.n	800d520 <_printf_i+0x1bc>
 800d528:	8019      	strh	r1, [r3, #0]
 800d52a:	2300      	movs	r3, #0
 800d52c:	6123      	str	r3, [r4, #16]
 800d52e:	4616      	mov	r6, r2
 800d530:	e7bc      	b.n	800d4ac <_printf_i+0x148>
 800d532:	6833      	ldr	r3, [r6, #0]
 800d534:	1d1a      	adds	r2, r3, #4
 800d536:	6032      	str	r2, [r6, #0]
 800d538:	681e      	ldr	r6, [r3, #0]
 800d53a:	6862      	ldr	r2, [r4, #4]
 800d53c:	2100      	movs	r1, #0
 800d53e:	4630      	mov	r0, r6
 800d540:	f7f2 fe46 	bl	80001d0 <memchr>
 800d544:	b108      	cbz	r0, 800d54a <_printf_i+0x1e6>
 800d546:	1b80      	subs	r0, r0, r6
 800d548:	6060      	str	r0, [r4, #4]
 800d54a:	6863      	ldr	r3, [r4, #4]
 800d54c:	6123      	str	r3, [r4, #16]
 800d54e:	2300      	movs	r3, #0
 800d550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d554:	e7aa      	b.n	800d4ac <_printf_i+0x148>
 800d556:	6923      	ldr	r3, [r4, #16]
 800d558:	4632      	mov	r2, r6
 800d55a:	4649      	mov	r1, r9
 800d55c:	4640      	mov	r0, r8
 800d55e:	47d0      	blx	sl
 800d560:	3001      	adds	r0, #1
 800d562:	d0ad      	beq.n	800d4c0 <_printf_i+0x15c>
 800d564:	6823      	ldr	r3, [r4, #0]
 800d566:	079b      	lsls	r3, r3, #30
 800d568:	d413      	bmi.n	800d592 <_printf_i+0x22e>
 800d56a:	68e0      	ldr	r0, [r4, #12]
 800d56c:	9b03      	ldr	r3, [sp, #12]
 800d56e:	4298      	cmp	r0, r3
 800d570:	bfb8      	it	lt
 800d572:	4618      	movlt	r0, r3
 800d574:	e7a6      	b.n	800d4c4 <_printf_i+0x160>
 800d576:	2301      	movs	r3, #1
 800d578:	4632      	mov	r2, r6
 800d57a:	4649      	mov	r1, r9
 800d57c:	4640      	mov	r0, r8
 800d57e:	47d0      	blx	sl
 800d580:	3001      	adds	r0, #1
 800d582:	d09d      	beq.n	800d4c0 <_printf_i+0x15c>
 800d584:	3501      	adds	r5, #1
 800d586:	68e3      	ldr	r3, [r4, #12]
 800d588:	9903      	ldr	r1, [sp, #12]
 800d58a:	1a5b      	subs	r3, r3, r1
 800d58c:	42ab      	cmp	r3, r5
 800d58e:	dcf2      	bgt.n	800d576 <_printf_i+0x212>
 800d590:	e7eb      	b.n	800d56a <_printf_i+0x206>
 800d592:	2500      	movs	r5, #0
 800d594:	f104 0619 	add.w	r6, r4, #25
 800d598:	e7f5      	b.n	800d586 <_printf_i+0x222>
 800d59a:	bf00      	nop
 800d59c:	0800d9a1 	.word	0x0800d9a1
 800d5a0:	0800d9b2 	.word	0x0800d9b2

0800d5a4 <__sflush_r>:
 800d5a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ac:	0716      	lsls	r6, r2, #28
 800d5ae:	4605      	mov	r5, r0
 800d5b0:	460c      	mov	r4, r1
 800d5b2:	d454      	bmi.n	800d65e <__sflush_r+0xba>
 800d5b4:	684b      	ldr	r3, [r1, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	dc02      	bgt.n	800d5c0 <__sflush_r+0x1c>
 800d5ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	dd48      	ble.n	800d652 <__sflush_r+0xae>
 800d5c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5c2:	2e00      	cmp	r6, #0
 800d5c4:	d045      	beq.n	800d652 <__sflush_r+0xae>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d5cc:	682f      	ldr	r7, [r5, #0]
 800d5ce:	6a21      	ldr	r1, [r4, #32]
 800d5d0:	602b      	str	r3, [r5, #0]
 800d5d2:	d030      	beq.n	800d636 <__sflush_r+0x92>
 800d5d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5d6:	89a3      	ldrh	r3, [r4, #12]
 800d5d8:	0759      	lsls	r1, r3, #29
 800d5da:	d505      	bpl.n	800d5e8 <__sflush_r+0x44>
 800d5dc:	6863      	ldr	r3, [r4, #4]
 800d5de:	1ad2      	subs	r2, r2, r3
 800d5e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d5e2:	b10b      	cbz	r3, 800d5e8 <__sflush_r+0x44>
 800d5e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d5e6:	1ad2      	subs	r2, r2, r3
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5ec:	6a21      	ldr	r1, [r4, #32]
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	47b0      	blx	r6
 800d5f2:	1c43      	adds	r3, r0, #1
 800d5f4:	89a3      	ldrh	r3, [r4, #12]
 800d5f6:	d106      	bne.n	800d606 <__sflush_r+0x62>
 800d5f8:	6829      	ldr	r1, [r5, #0]
 800d5fa:	291d      	cmp	r1, #29
 800d5fc:	d82b      	bhi.n	800d656 <__sflush_r+0xb2>
 800d5fe:	4a2a      	ldr	r2, [pc, #168]	@ (800d6a8 <__sflush_r+0x104>)
 800d600:	410a      	asrs	r2, r1
 800d602:	07d6      	lsls	r6, r2, #31
 800d604:	d427      	bmi.n	800d656 <__sflush_r+0xb2>
 800d606:	2200      	movs	r2, #0
 800d608:	6062      	str	r2, [r4, #4]
 800d60a:	04d9      	lsls	r1, r3, #19
 800d60c:	6922      	ldr	r2, [r4, #16]
 800d60e:	6022      	str	r2, [r4, #0]
 800d610:	d504      	bpl.n	800d61c <__sflush_r+0x78>
 800d612:	1c42      	adds	r2, r0, #1
 800d614:	d101      	bne.n	800d61a <__sflush_r+0x76>
 800d616:	682b      	ldr	r3, [r5, #0]
 800d618:	b903      	cbnz	r3, 800d61c <__sflush_r+0x78>
 800d61a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d61c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d61e:	602f      	str	r7, [r5, #0]
 800d620:	b1b9      	cbz	r1, 800d652 <__sflush_r+0xae>
 800d622:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d626:	4299      	cmp	r1, r3
 800d628:	d002      	beq.n	800d630 <__sflush_r+0x8c>
 800d62a:	4628      	mov	r0, r5
 800d62c:	f7ff fb48 	bl	800ccc0 <_free_r>
 800d630:	2300      	movs	r3, #0
 800d632:	6363      	str	r3, [r4, #52]	@ 0x34
 800d634:	e00d      	b.n	800d652 <__sflush_r+0xae>
 800d636:	2301      	movs	r3, #1
 800d638:	4628      	mov	r0, r5
 800d63a:	47b0      	blx	r6
 800d63c:	4602      	mov	r2, r0
 800d63e:	1c50      	adds	r0, r2, #1
 800d640:	d1c9      	bne.n	800d5d6 <__sflush_r+0x32>
 800d642:	682b      	ldr	r3, [r5, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d0c6      	beq.n	800d5d6 <__sflush_r+0x32>
 800d648:	2b1d      	cmp	r3, #29
 800d64a:	d001      	beq.n	800d650 <__sflush_r+0xac>
 800d64c:	2b16      	cmp	r3, #22
 800d64e:	d11e      	bne.n	800d68e <__sflush_r+0xea>
 800d650:	602f      	str	r7, [r5, #0]
 800d652:	2000      	movs	r0, #0
 800d654:	e022      	b.n	800d69c <__sflush_r+0xf8>
 800d656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d65a:	b21b      	sxth	r3, r3
 800d65c:	e01b      	b.n	800d696 <__sflush_r+0xf2>
 800d65e:	690f      	ldr	r7, [r1, #16]
 800d660:	2f00      	cmp	r7, #0
 800d662:	d0f6      	beq.n	800d652 <__sflush_r+0xae>
 800d664:	0793      	lsls	r3, r2, #30
 800d666:	680e      	ldr	r6, [r1, #0]
 800d668:	bf08      	it	eq
 800d66a:	694b      	ldreq	r3, [r1, #20]
 800d66c:	600f      	str	r7, [r1, #0]
 800d66e:	bf18      	it	ne
 800d670:	2300      	movne	r3, #0
 800d672:	eba6 0807 	sub.w	r8, r6, r7
 800d676:	608b      	str	r3, [r1, #8]
 800d678:	f1b8 0f00 	cmp.w	r8, #0
 800d67c:	dde9      	ble.n	800d652 <__sflush_r+0xae>
 800d67e:	6a21      	ldr	r1, [r4, #32]
 800d680:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d682:	4643      	mov	r3, r8
 800d684:	463a      	mov	r2, r7
 800d686:	4628      	mov	r0, r5
 800d688:	47b0      	blx	r6
 800d68a:	2800      	cmp	r0, #0
 800d68c:	dc08      	bgt.n	800d6a0 <__sflush_r+0xfc>
 800d68e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d696:	81a3      	strh	r3, [r4, #12]
 800d698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6a0:	4407      	add	r7, r0
 800d6a2:	eba8 0800 	sub.w	r8, r8, r0
 800d6a6:	e7e7      	b.n	800d678 <__sflush_r+0xd4>
 800d6a8:	dfbffffe 	.word	0xdfbffffe

0800d6ac <_fflush_r>:
 800d6ac:	b538      	push	{r3, r4, r5, lr}
 800d6ae:	690b      	ldr	r3, [r1, #16]
 800d6b0:	4605      	mov	r5, r0
 800d6b2:	460c      	mov	r4, r1
 800d6b4:	b913      	cbnz	r3, 800d6bc <_fflush_r+0x10>
 800d6b6:	2500      	movs	r5, #0
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	bd38      	pop	{r3, r4, r5, pc}
 800d6bc:	b118      	cbz	r0, 800d6c6 <_fflush_r+0x1a>
 800d6be:	6a03      	ldr	r3, [r0, #32]
 800d6c0:	b90b      	cbnz	r3, 800d6c6 <_fflush_r+0x1a>
 800d6c2:	f7ff f86f 	bl	800c7a4 <__sinit>
 800d6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d0f3      	beq.n	800d6b6 <_fflush_r+0xa>
 800d6ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6d0:	07d0      	lsls	r0, r2, #31
 800d6d2:	d404      	bmi.n	800d6de <_fflush_r+0x32>
 800d6d4:	0599      	lsls	r1, r3, #22
 800d6d6:	d402      	bmi.n	800d6de <_fflush_r+0x32>
 800d6d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6da:	f7ff fae0 	bl	800cc9e <__retarget_lock_acquire_recursive>
 800d6de:	4628      	mov	r0, r5
 800d6e0:	4621      	mov	r1, r4
 800d6e2:	f7ff ff5f 	bl	800d5a4 <__sflush_r>
 800d6e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6e8:	07da      	lsls	r2, r3, #31
 800d6ea:	4605      	mov	r5, r0
 800d6ec:	d4e4      	bmi.n	800d6b8 <_fflush_r+0xc>
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	059b      	lsls	r3, r3, #22
 800d6f2:	d4e1      	bmi.n	800d6b8 <_fflush_r+0xc>
 800d6f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6f6:	f7ff fad3 	bl	800cca0 <__retarget_lock_release_recursive>
 800d6fa:	e7dd      	b.n	800d6b8 <_fflush_r+0xc>

0800d6fc <__swhatbuf_r>:
 800d6fc:	b570      	push	{r4, r5, r6, lr}
 800d6fe:	460c      	mov	r4, r1
 800d700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d704:	2900      	cmp	r1, #0
 800d706:	b096      	sub	sp, #88	@ 0x58
 800d708:	4615      	mov	r5, r2
 800d70a:	461e      	mov	r6, r3
 800d70c:	da0d      	bge.n	800d72a <__swhatbuf_r+0x2e>
 800d70e:	89a3      	ldrh	r3, [r4, #12]
 800d710:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d714:	f04f 0100 	mov.w	r1, #0
 800d718:	bf14      	ite	ne
 800d71a:	2340      	movne	r3, #64	@ 0x40
 800d71c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d720:	2000      	movs	r0, #0
 800d722:	6031      	str	r1, [r6, #0]
 800d724:	602b      	str	r3, [r5, #0]
 800d726:	b016      	add	sp, #88	@ 0x58
 800d728:	bd70      	pop	{r4, r5, r6, pc}
 800d72a:	466a      	mov	r2, sp
 800d72c:	f000 f862 	bl	800d7f4 <_fstat_r>
 800d730:	2800      	cmp	r0, #0
 800d732:	dbec      	blt.n	800d70e <__swhatbuf_r+0x12>
 800d734:	9901      	ldr	r1, [sp, #4]
 800d736:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d73a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d73e:	4259      	negs	r1, r3
 800d740:	4159      	adcs	r1, r3
 800d742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d746:	e7eb      	b.n	800d720 <__swhatbuf_r+0x24>

0800d748 <__smakebuf_r>:
 800d748:	898b      	ldrh	r3, [r1, #12]
 800d74a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d74c:	079d      	lsls	r5, r3, #30
 800d74e:	4606      	mov	r6, r0
 800d750:	460c      	mov	r4, r1
 800d752:	d507      	bpl.n	800d764 <__smakebuf_r+0x1c>
 800d754:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d758:	6023      	str	r3, [r4, #0]
 800d75a:	6123      	str	r3, [r4, #16]
 800d75c:	2301      	movs	r3, #1
 800d75e:	6163      	str	r3, [r4, #20]
 800d760:	b003      	add	sp, #12
 800d762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d764:	ab01      	add	r3, sp, #4
 800d766:	466a      	mov	r2, sp
 800d768:	f7ff ffc8 	bl	800d6fc <__swhatbuf_r>
 800d76c:	9f00      	ldr	r7, [sp, #0]
 800d76e:	4605      	mov	r5, r0
 800d770:	4639      	mov	r1, r7
 800d772:	4630      	mov	r0, r6
 800d774:	f7fe fefe 	bl	800c574 <_malloc_r>
 800d778:	b948      	cbnz	r0, 800d78e <__smakebuf_r+0x46>
 800d77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d77e:	059a      	lsls	r2, r3, #22
 800d780:	d4ee      	bmi.n	800d760 <__smakebuf_r+0x18>
 800d782:	f023 0303 	bic.w	r3, r3, #3
 800d786:	f043 0302 	orr.w	r3, r3, #2
 800d78a:	81a3      	strh	r3, [r4, #12]
 800d78c:	e7e2      	b.n	800d754 <__smakebuf_r+0xc>
 800d78e:	89a3      	ldrh	r3, [r4, #12]
 800d790:	6020      	str	r0, [r4, #0]
 800d792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d796:	81a3      	strh	r3, [r4, #12]
 800d798:	9b01      	ldr	r3, [sp, #4]
 800d79a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d79e:	b15b      	cbz	r3, 800d7b8 <__smakebuf_r+0x70>
 800d7a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7a4:	4630      	mov	r0, r6
 800d7a6:	f000 f837 	bl	800d818 <_isatty_r>
 800d7aa:	b128      	cbz	r0, 800d7b8 <__smakebuf_r+0x70>
 800d7ac:	89a3      	ldrh	r3, [r4, #12]
 800d7ae:	f023 0303 	bic.w	r3, r3, #3
 800d7b2:	f043 0301 	orr.w	r3, r3, #1
 800d7b6:	81a3      	strh	r3, [r4, #12]
 800d7b8:	89a3      	ldrh	r3, [r4, #12]
 800d7ba:	431d      	orrs	r5, r3
 800d7bc:	81a5      	strh	r5, [r4, #12]
 800d7be:	e7cf      	b.n	800d760 <__smakebuf_r+0x18>

0800d7c0 <memmove>:
 800d7c0:	4288      	cmp	r0, r1
 800d7c2:	b510      	push	{r4, lr}
 800d7c4:	eb01 0402 	add.w	r4, r1, r2
 800d7c8:	d902      	bls.n	800d7d0 <memmove+0x10>
 800d7ca:	4284      	cmp	r4, r0
 800d7cc:	4623      	mov	r3, r4
 800d7ce:	d807      	bhi.n	800d7e0 <memmove+0x20>
 800d7d0:	1e43      	subs	r3, r0, #1
 800d7d2:	42a1      	cmp	r1, r4
 800d7d4:	d008      	beq.n	800d7e8 <memmove+0x28>
 800d7d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7de:	e7f8      	b.n	800d7d2 <memmove+0x12>
 800d7e0:	4402      	add	r2, r0
 800d7e2:	4601      	mov	r1, r0
 800d7e4:	428a      	cmp	r2, r1
 800d7e6:	d100      	bne.n	800d7ea <memmove+0x2a>
 800d7e8:	bd10      	pop	{r4, pc}
 800d7ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7f2:	e7f7      	b.n	800d7e4 <memmove+0x24>

0800d7f4 <_fstat_r>:
 800d7f4:	b538      	push	{r3, r4, r5, lr}
 800d7f6:	4d07      	ldr	r5, [pc, #28]	@ (800d814 <_fstat_r+0x20>)
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	4608      	mov	r0, r1
 800d7fe:	4611      	mov	r1, r2
 800d800:	602b      	str	r3, [r5, #0]
 800d802:	f7f3 fba0 	bl	8000f46 <_fstat>
 800d806:	1c43      	adds	r3, r0, #1
 800d808:	d102      	bne.n	800d810 <_fstat_r+0x1c>
 800d80a:	682b      	ldr	r3, [r5, #0]
 800d80c:	b103      	cbz	r3, 800d810 <_fstat_r+0x1c>
 800d80e:	6023      	str	r3, [r4, #0]
 800d810:	bd38      	pop	{r3, r4, r5, pc}
 800d812:	bf00      	nop
 800d814:	20005510 	.word	0x20005510

0800d818 <_isatty_r>:
 800d818:	b538      	push	{r3, r4, r5, lr}
 800d81a:	4d06      	ldr	r5, [pc, #24]	@ (800d834 <_isatty_r+0x1c>)
 800d81c:	2300      	movs	r3, #0
 800d81e:	4604      	mov	r4, r0
 800d820:	4608      	mov	r0, r1
 800d822:	602b      	str	r3, [r5, #0]
 800d824:	f7f3 fb9f 	bl	8000f66 <_isatty>
 800d828:	1c43      	adds	r3, r0, #1
 800d82a:	d102      	bne.n	800d832 <_isatty_r+0x1a>
 800d82c:	682b      	ldr	r3, [r5, #0]
 800d82e:	b103      	cbz	r3, 800d832 <_isatty_r+0x1a>
 800d830:	6023      	str	r3, [r4, #0]
 800d832:	bd38      	pop	{r3, r4, r5, pc}
 800d834:	20005510 	.word	0x20005510

0800d838 <_realloc_r>:
 800d838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d83c:	4680      	mov	r8, r0
 800d83e:	4615      	mov	r5, r2
 800d840:	460c      	mov	r4, r1
 800d842:	b921      	cbnz	r1, 800d84e <_realloc_r+0x16>
 800d844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d848:	4611      	mov	r1, r2
 800d84a:	f7fe be93 	b.w	800c574 <_malloc_r>
 800d84e:	b92a      	cbnz	r2, 800d85c <_realloc_r+0x24>
 800d850:	f7ff fa36 	bl	800ccc0 <_free_r>
 800d854:	2400      	movs	r4, #0
 800d856:	4620      	mov	r0, r4
 800d858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d85c:	f000 f81a 	bl	800d894 <_malloc_usable_size_r>
 800d860:	4285      	cmp	r5, r0
 800d862:	4606      	mov	r6, r0
 800d864:	d802      	bhi.n	800d86c <_realloc_r+0x34>
 800d866:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d86a:	d8f4      	bhi.n	800d856 <_realloc_r+0x1e>
 800d86c:	4629      	mov	r1, r5
 800d86e:	4640      	mov	r0, r8
 800d870:	f7fe fe80 	bl	800c574 <_malloc_r>
 800d874:	4607      	mov	r7, r0
 800d876:	2800      	cmp	r0, #0
 800d878:	d0ec      	beq.n	800d854 <_realloc_r+0x1c>
 800d87a:	42b5      	cmp	r5, r6
 800d87c:	462a      	mov	r2, r5
 800d87e:	4621      	mov	r1, r4
 800d880:	bf28      	it	cs
 800d882:	4632      	movcs	r2, r6
 800d884:	f7ff fa0d 	bl	800cca2 <memcpy>
 800d888:	4621      	mov	r1, r4
 800d88a:	4640      	mov	r0, r8
 800d88c:	f7ff fa18 	bl	800ccc0 <_free_r>
 800d890:	463c      	mov	r4, r7
 800d892:	e7e0      	b.n	800d856 <_realloc_r+0x1e>

0800d894 <_malloc_usable_size_r>:
 800d894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d898:	1f18      	subs	r0, r3, #4
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	bfbc      	itt	lt
 800d89e:	580b      	ldrlt	r3, [r1, r0]
 800d8a0:	18c0      	addlt	r0, r0, r3
 800d8a2:	4770      	bx	lr

0800d8a4 <_init>:
 800d8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8a6:	bf00      	nop
 800d8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8aa:	bc08      	pop	{r3}
 800d8ac:	469e      	mov	lr, r3
 800d8ae:	4770      	bx	lr

0800d8b0 <_fini>:
 800d8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8b2:	bf00      	nop
 800d8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8b6:	bc08      	pop	{r3}
 800d8b8:	469e      	mov	lr, r3
 800d8ba:	4770      	bx	lr
